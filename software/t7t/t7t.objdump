
t7t.elf:     file format elf32-littlenios2
t7t.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00005864 memsz 0x00005864 flags r-x
    LOAD off    0x00006884 vaddr 0x00805884 paddr 0x008072f0 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008d5c vaddr 0x00808d5c paddr 0x00808d5c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000055f8  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  0080583c  0080583c  0000683c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00805884  008072f0  00006884  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00808d5c  00808d5c  00008d5c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00808eb0  00808eb0  000082f0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000082f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a30  00000000  00000000  00008318  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000164f5  00000000  00000000  00008d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000603f  00000000  00000000  0001f23d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000068f4  00000000  00000000  0002527c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000159c  00000000  00000000  0002bb70  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027b2  00000000  00000000  0002d10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002f8be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003430c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00034340  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00036f2e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00036f31  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00036f34  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00036f35  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00036f36  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00036f3a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00036f3e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00036f42  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00036f4b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00036f54  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00036f5d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000037  00000000  00000000  00036f6f  2**0
                  CONTENTS, READONLY
 29 .jdi          000058e3  00000000  00000000  00036fa6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003d9e8  00000000  00000000  0003c889  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080583c l    d  .rodata	00000000 .rodata
00805884 l    d  .rwdata	00000000 .rwdata
00808d5c l    d  .bss	00000000 .bss
00808eb0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../t7t_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00800430 l     F .text	00000008 __fp_unlock
00800444 l     F .text	0000019c __sinit.part.1
008005e0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00805884 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0080308c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00803198 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008031c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
008032b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00803390 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080347c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00803650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008072e0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080389c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008039d0 l     F .text	00000034 alt_dev_reg
00806258 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00803cc4 l     F .text	0000020c altera_avalon_jtag_uart_irq
00803ed0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00804508 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00804770 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00804be4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00804d24 l     F .text	0000003c alt_get_errno
00804d60 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00808d84 g     O .bss	00000004 alt_instruction_exception_handler
00802e84 g     F .text	00000054 _isatty_r
0080358c g     F .text	0000007c alt_main
008002c4 g     F .text	000000c0 _puts_r
00808db0 g     O .bss	00000100 alt_irq
00802bac g     F .text	00000060 _lseek_r
008072f0 g       *ABS*	00000000 __flash_rwdata_start
00808eb0 g       *ABS*	00000000 __alt_heap_start
00802160 g     F .text	0000005c __sseek
00800780 g     F .text	00000010 __sinit
008005e8 g     F .text	00000068 __sfmoreglue
0080362c g     F .text	00000024 __malloc_unlock
0080184c g     F .text	0000015c memmove
00800768 g     F .text	00000018 _cleanup
0080511c g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802e28 g     F .text	0000005c _fstat_r
00808d68 g     O .bss	00000004 errno
008020dc g     F .text	00000008 __seofread
00808d70 g     O .bss	00000004 alt_argv
0080f2b8 g       *ABS*	00000000 _gp
008060d8 g     O .rwdata	00000180 alt_fd_list
00805140 g     F .text	00000090 alt_find_dev
00801704 g     F .text	00000148 memcpy
00800438 g     F .text	0000000c _cleanup_r
00804ca8 g     F .text	0000007c alt_io_redirect
0080583c g       *ABS*	00000000 __DTOR_END__
00800384 g     F .text	00000014 puts
0080540c g     F .text	0000009c alt_exception_cause_generated_bad_addr
008040c8 g     F .text	0000021c altera_avalon_jtag_uart_read
00802fd0 g     F .text	00000064 .hidden __udivsi3
008032ec g     F .text	000000a4 isatty
0080537c g     F .text	00000090 alt_icache_flush
00808d64 g     O .bss	00000004 __malloc_top_pad
008007d0 g     F .text	000004bc __sfvwrite_r
00802034 g     F .text	00000054 _sbrk_r
00802dc8 g     F .text	00000060 _read_r
008072d8 g     O .rwdata	00000004 alt_max_fd
008023cc g     F .text	000000f0 _fclose_r
00802748 g     F .text	00000030 fflush
00808d60 g     O .bss	00000004 __malloc_max_sbrked_mem
008034b8 g     F .text	000000d4 lseek
008072b8 g     O .rwdata	00000004 _global_impure_ptr
00801ad0 g     F .text	00000564 _realloc_r
00808eb0 g       *ABS*	00000000 __bss_end
00804af4 g     F .text	000000f0 alt_iic_isr_register
00805014 g     F .text	00000108 alt_tick
008007a0 g     F .text	00000018 __fp_lock_all
00804aa8 g     F .text	0000004c alt_ic_irq_enabled
00804f78 g     F .text	0000009c alt_alarm_stop
00808d78 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
008060b0 g     O .rwdata	00000028 alt_dev_null
00804728 g     F .text	00000048 alt_dcache_flush_all
008072f0 g       *ABS*	00000000 __ram_rwdata_end
008072d0 g     O .rwdata	00000008 alt_dev_list
008038d8 g     F .text	000000f8 write
00805884 g       *ABS*	00000000 __ram_rodata_end
00803200 g     F .text	000000b0 fstat
00803034 g     F .text	00000058 .hidden __umodsi3
00808eb0 g       *ABS*	00000000 end
00803c04 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080583c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00804580 g     F .text	0000007c alt_avalon_timer_sc_init
008042e4 g     F .text	00000224 altera_avalon_jtag_uart_write
00800790 g     F .text	00000004 __sfp_lock_acquire
00801620 g     F .text	000000e4 memchr
0080289c g     F .text	00000310 _free_r
00805688 g     F .text	00000180 __call_exitprocs
008072c0 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00808d7c g     O .bss	00000004 _alt_tick_rate
00808d80 g     O .bss	00000004 _alt_nticks
0080368c g     F .text	000000fc read
00803a3c g     F .text	00000064 alt_sys_init
00805570 g     F .text	00000118 __register_exitproc
00803f70 g     F .text	00000068 altera_avalon_jtag_uart_close
00805884 g       *ABS*	00000000 __ram_rwdata_start
0080583c g       *ABS*	00000000 __ram_rodata_start
00808d88 g     O .bss	00000028 __malloc_current_mallinfo
00803aa0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008052d8 g     F .text	000000a4 alt_get_fd
00802378 g     F .text	00000054 _close_r
008054f4 g     F .text	0000007c memcmp
00803b60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00808eb0 g       *ABS*	00000000 __alt_stack_base
00803bb0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802224 g     F .text	00000154 __swsetup_r
00800650 g     F .text	00000118 __sfp
00805ca8 g     O .rwdata	00000408 __malloc_av_
0080079c g     F .text	00000004 __sinit_lock_release
00802088 g     F .text	00000054 __sread
008051d0 g     F .text	00000108 alt_find_file
008047ac g     F .text	000000a4 alt_dev_llist_insert
00803608 g     F .text	00000024 __malloc_lock
008037ec g     F .text	000000b0 sbrk
008026ec g     F .text	0000005c _fflush_r
00808d5c g       *ABS*	00000000 __bss_start
008019a8 g     F .text	00000128 memset
00800290 g     F .text	00000034 main
00808d74 g     O .bss	00000004 alt_envp
00808d5c g     O .bss	00000004 __malloc_max_total_mem
00803b00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008021bc g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008024bc g     F .text	00000014 fclose
00800e14 g     F .text	0000080c _malloc_r
008072dc g     O .rwdata	00000004 alt_errno
00800c8c g     F .text	000000c4 _fwalk
00802ed8 g     F .text	00000084 .hidden __divsi3
00802778 g     F .text	00000124 _malloc_trim_r
0080583c g       *ABS*	00000000 __CTOR_END__
0080583c g       *ABS*	00000000 __flash_rodata_start
0080583c g       *ABS*	00000000 __DTOR_LIST__
00803a04 g     F .text	00000038 alt_irq_init
00803788 g     F .text	00000064 alt_release_fd
008054a8 g     F .text	00000014 atexit
008021c4 g     F .text	00000060 _write_r
008072bc g     O .rwdata	00000004 _impure_ptr
00808d6c g     O .bss	00000004 alt_argc
008024d0 g     F .text	0000021c __sflush_r
008048b0 g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
008007b8 g     F .text	00000018 __fp_unlock_all
008072c8 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00804944 g     F .text	00000050 alt_ic_isr_register
008072f0 g       *ABS*	00000000 _edata
00808eb0 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00803fd8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00804a1c g     F .text	0000008c alt_ic_irq_disable
008020e4 g     F .text	0000007c __swrite
008072c4 g     O .rwdata	00000004 __malloc_trim_threshold
008054bc g     F .text	00000038 exit
00800d50 g     F .text	000000c4 _fwalk_reent
00802f5c g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800794 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00805808 g     F .text	00000034 _exit
008045fc g     F .text	0000012c alt_alarm_start
00802c0c g     F .text	000001bc __smakebuf_r
00800398 g     F .text	00000098 strlen
00804e24 g     F .text	00000154 open
00804910 g     F .text	00000034 alt_icache_flush_all
008072e4 g     O .rwdata	00000004 alt_priority_mask
00804994 g     F .text	00000088 alt_ic_irq_enable
008072e8 g     O .rwdata	00000008 alt_alarm_list
00804850 g     F .text	00000060 _do_ctors
008030c8 g     F .text	000000d0 close
008033f8 g     F .text	00000084 alt_load
00800798 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10a36c04 	addi	r2,r2,-29264
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10a36c04 	addi	r2,r2,-29264
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a6b317 	ldw	r2,-25908(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a6b317 	ldw	r2,-25908(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800260:	d6bcae14 	ori	gp,gp,62136
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	10a35714 	ori	r2,r2,36188

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18e3ac14 	ori	r3,r3,36528

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08033f80 	call	8033f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080358c0 	call	80358c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <main>:
 */

#include <stdio.h>

int main()
{
  800290:	defffe04 	addi	sp,sp,-8
  800294:	dfc00115 	stw	ra,4(sp)
  800298:	df000015 	stw	fp,0(sp)
  80029c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
  8002a0:	01002034 	movhi	r4,128
  8002a4:	21160f04 	addi	r4,r4,22588
  8002a8:	08003840 	call	800384 <puts>

  return 0;
  8002ac:	0005883a 	mov	r2,zero
}
  8002b0:	e037883a 	mov	sp,fp
  8002b4:	dfc00117 	ldw	ra,4(sp)
  8002b8:	df000017 	ldw	fp,0(sp)
  8002bc:	dec00204 	addi	sp,sp,8
  8002c0:	f800283a 	ret

008002c4 <_puts_r>:
  8002c4:	defff604 	addi	sp,sp,-40
  8002c8:	dc000715 	stw	r16,28(sp)
  8002cc:	2021883a 	mov	r16,r4
  8002d0:	2809883a 	mov	r4,r5
  8002d4:	dc400815 	stw	r17,32(sp)
  8002d8:	dfc00915 	stw	ra,36(sp)
  8002dc:	2823883a 	mov	r17,r5
  8002e0:	08003980 	call	800398 <strlen>
  8002e4:	10c00044 	addi	r3,r2,1
  8002e8:	d8800115 	stw	r2,4(sp)
  8002ec:	00802034 	movhi	r2,128
  8002f0:	10961404 	addi	r2,r2,22608
  8002f4:	d8800215 	stw	r2,8(sp)
  8002f8:	00800044 	movi	r2,1
  8002fc:	d8800315 	stw	r2,12(sp)
  800300:	00800084 	movi	r2,2
  800304:	dc400015 	stw	r17,0(sp)
  800308:	d8c00615 	stw	r3,24(sp)
  80030c:	dec00415 	stw	sp,16(sp)
  800310:	d8800515 	stw	r2,20(sp)
  800314:	80000226 	beq	r16,zero,800320 <_puts_r+0x5c>
  800318:	80800e17 	ldw	r2,56(r16)
  80031c:	10001426 	beq	r2,zero,800370 <_puts_r+0xac>
  800320:	81400217 	ldw	r5,8(r16)
  800324:	2880030b 	ldhu	r2,12(r5)
  800328:	10c8000c 	andi	r3,r2,8192
  80032c:	1800061e 	bne	r3,zero,800348 <_puts_r+0x84>
  800330:	29001917 	ldw	r4,100(r5)
  800334:	00f7ffc4 	movi	r3,-8193
  800338:	10880014 	ori	r2,r2,8192
  80033c:	20c6703a 	and	r3,r4,r3
  800340:	2880030d 	sth	r2,12(r5)
  800344:	28c01915 	stw	r3,100(r5)
  800348:	d9800404 	addi	r6,sp,16
  80034c:	8009883a 	mov	r4,r16
  800350:	08007d00 	call	8007d0 <__sfvwrite_r>
  800354:	1000091e 	bne	r2,zero,80037c <_puts_r+0xb8>
  800358:	00800284 	movi	r2,10
  80035c:	dfc00917 	ldw	ra,36(sp)
  800360:	dc400817 	ldw	r17,32(sp)
  800364:	dc000717 	ldw	r16,28(sp)
  800368:	dec00a04 	addi	sp,sp,40
  80036c:	f800283a 	ret
  800370:	8009883a 	mov	r4,r16
  800374:	08007800 	call	800780 <__sinit>
  800378:	003fe906 	br	800320 <__alt_data_end+0xff800320>
  80037c:	00bfffc4 	movi	r2,-1
  800380:	003ff606 	br	80035c <__alt_data_end+0xff80035c>

00800384 <puts>:
  800384:	00802034 	movhi	r2,128
  800388:	109caf04 	addi	r2,r2,29372
  80038c:	200b883a 	mov	r5,r4
  800390:	11000017 	ldw	r4,0(r2)
  800394:	08002c41 	jmpi	8002c4 <_puts_r>

00800398 <strlen>:
  800398:	208000cc 	andi	r2,r4,3
  80039c:	10002026 	beq	r2,zero,800420 <strlen+0x88>
  8003a0:	20800007 	ldb	r2,0(r4)
  8003a4:	10002026 	beq	r2,zero,800428 <strlen+0x90>
  8003a8:	2005883a 	mov	r2,r4
  8003ac:	00000206 	br	8003b8 <strlen+0x20>
  8003b0:	10c00007 	ldb	r3,0(r2)
  8003b4:	18001826 	beq	r3,zero,800418 <strlen+0x80>
  8003b8:	10800044 	addi	r2,r2,1
  8003bc:	10c000cc 	andi	r3,r2,3
  8003c0:	183ffb1e 	bne	r3,zero,8003b0 <__alt_data_end+0xff8003b0>
  8003c4:	10c00017 	ldw	r3,0(r2)
  8003c8:	01ffbff4 	movhi	r7,65279
  8003cc:	39ffbfc4 	addi	r7,r7,-257
  8003d0:	00ca303a 	nor	r5,zero,r3
  8003d4:	01a02074 	movhi	r6,32897
  8003d8:	19c7883a 	add	r3,r3,r7
  8003dc:	31a02004 	addi	r6,r6,-32640
  8003e0:	1946703a 	and	r3,r3,r5
  8003e4:	1986703a 	and	r3,r3,r6
  8003e8:	1800091e 	bne	r3,zero,800410 <strlen+0x78>
  8003ec:	10800104 	addi	r2,r2,4
  8003f0:	10c00017 	ldw	r3,0(r2)
  8003f4:	19cb883a 	add	r5,r3,r7
  8003f8:	00c6303a 	nor	r3,zero,r3
  8003fc:	28c6703a 	and	r3,r5,r3
  800400:	1986703a 	and	r3,r3,r6
  800404:	183ff926 	beq	r3,zero,8003ec <__alt_data_end+0xff8003ec>
  800408:	00000106 	br	800410 <strlen+0x78>
  80040c:	10800044 	addi	r2,r2,1
  800410:	10c00007 	ldb	r3,0(r2)
  800414:	183ffd1e 	bne	r3,zero,80040c <__alt_data_end+0xff80040c>
  800418:	1105c83a 	sub	r2,r2,r4
  80041c:	f800283a 	ret
  800420:	2005883a 	mov	r2,r4
  800424:	003fe706 	br	8003c4 <__alt_data_end+0xff8003c4>
  800428:	0005883a 	mov	r2,zero
  80042c:	f800283a 	ret

00800430 <__fp_unlock>:
  800430:	0005883a 	mov	r2,zero
  800434:	f800283a 	ret

00800438 <_cleanup_r>:
  800438:	01402034 	movhi	r5,128
  80043c:	2948f304 	addi	r5,r5,9164
  800440:	0800d501 	jmpi	800d50 <_fwalk_reent>

00800444 <__sinit.part.1>:
  800444:	defff704 	addi	sp,sp,-36
  800448:	00c02034 	movhi	r3,128
  80044c:	dfc00815 	stw	ra,32(sp)
  800450:	ddc00715 	stw	r23,28(sp)
  800454:	dd800615 	stw	r22,24(sp)
  800458:	dd400515 	stw	r21,20(sp)
  80045c:	dd000415 	stw	r20,16(sp)
  800460:	dcc00315 	stw	r19,12(sp)
  800464:	dc800215 	stw	r18,8(sp)
  800468:	dc400115 	stw	r17,4(sp)
  80046c:	dc000015 	stw	r16,0(sp)
  800470:	18c10e04 	addi	r3,r3,1080
  800474:	24000117 	ldw	r16,4(r4)
  800478:	20c00f15 	stw	r3,60(r4)
  80047c:	2080bb04 	addi	r2,r4,748
  800480:	00c000c4 	movi	r3,3
  800484:	20c0b915 	stw	r3,740(r4)
  800488:	2080ba15 	stw	r2,744(r4)
  80048c:	2000b815 	stw	zero,736(r4)
  800490:	05c00204 	movi	r23,8
  800494:	00800104 	movi	r2,4
  800498:	2025883a 	mov	r18,r4
  80049c:	b80d883a 	mov	r6,r23
  8004a0:	81001704 	addi	r4,r16,92
  8004a4:	000b883a 	mov	r5,zero
  8004a8:	80000015 	stw	zero,0(r16)
  8004ac:	80000115 	stw	zero,4(r16)
  8004b0:	80000215 	stw	zero,8(r16)
  8004b4:	8080030d 	sth	r2,12(r16)
  8004b8:	80001915 	stw	zero,100(r16)
  8004bc:	8000038d 	sth	zero,14(r16)
  8004c0:	80000415 	stw	zero,16(r16)
  8004c4:	80000515 	stw	zero,20(r16)
  8004c8:	80000615 	stw	zero,24(r16)
  8004cc:	08019a80 	call	8019a8 <memset>
  8004d0:	05802034 	movhi	r22,128
  8004d4:	94400217 	ldw	r17,8(r18)
  8004d8:	05402034 	movhi	r21,128
  8004dc:	05002034 	movhi	r20,128
  8004e0:	04c02034 	movhi	r19,128
  8004e4:	b5882204 	addi	r22,r22,8328
  8004e8:	ad483904 	addi	r21,r21,8420
  8004ec:	a5085804 	addi	r20,r20,8544
  8004f0:	9cc86f04 	addi	r19,r19,8636
  8004f4:	85800815 	stw	r22,32(r16)
  8004f8:	85400915 	stw	r21,36(r16)
  8004fc:	85000a15 	stw	r20,40(r16)
  800500:	84c00b15 	stw	r19,44(r16)
  800504:	84000715 	stw	r16,28(r16)
  800508:	00800284 	movi	r2,10
  80050c:	8880030d 	sth	r2,12(r17)
  800510:	00800044 	movi	r2,1
  800514:	b80d883a 	mov	r6,r23
  800518:	89001704 	addi	r4,r17,92
  80051c:	000b883a 	mov	r5,zero
  800520:	88000015 	stw	zero,0(r17)
  800524:	88000115 	stw	zero,4(r17)
  800528:	88000215 	stw	zero,8(r17)
  80052c:	88001915 	stw	zero,100(r17)
  800530:	8880038d 	sth	r2,14(r17)
  800534:	88000415 	stw	zero,16(r17)
  800538:	88000515 	stw	zero,20(r17)
  80053c:	88000615 	stw	zero,24(r17)
  800540:	08019a80 	call	8019a8 <memset>
  800544:	94000317 	ldw	r16,12(r18)
  800548:	00800484 	movi	r2,18
  80054c:	8c400715 	stw	r17,28(r17)
  800550:	8d800815 	stw	r22,32(r17)
  800554:	8d400915 	stw	r21,36(r17)
  800558:	8d000a15 	stw	r20,40(r17)
  80055c:	8cc00b15 	stw	r19,44(r17)
  800560:	8080030d 	sth	r2,12(r16)
  800564:	00800084 	movi	r2,2
  800568:	80000015 	stw	zero,0(r16)
  80056c:	80000115 	stw	zero,4(r16)
  800570:	80000215 	stw	zero,8(r16)
  800574:	80001915 	stw	zero,100(r16)
  800578:	8080038d 	sth	r2,14(r16)
  80057c:	80000415 	stw	zero,16(r16)
  800580:	80000515 	stw	zero,20(r16)
  800584:	80000615 	stw	zero,24(r16)
  800588:	b80d883a 	mov	r6,r23
  80058c:	000b883a 	mov	r5,zero
  800590:	81001704 	addi	r4,r16,92
  800594:	08019a80 	call	8019a8 <memset>
  800598:	00800044 	movi	r2,1
  80059c:	84000715 	stw	r16,28(r16)
  8005a0:	85800815 	stw	r22,32(r16)
  8005a4:	85400915 	stw	r21,36(r16)
  8005a8:	85000a15 	stw	r20,40(r16)
  8005ac:	84c00b15 	stw	r19,44(r16)
  8005b0:	90800e15 	stw	r2,56(r18)
  8005b4:	dfc00817 	ldw	ra,32(sp)
  8005b8:	ddc00717 	ldw	r23,28(sp)
  8005bc:	dd800617 	ldw	r22,24(sp)
  8005c0:	dd400517 	ldw	r21,20(sp)
  8005c4:	dd000417 	ldw	r20,16(sp)
  8005c8:	dcc00317 	ldw	r19,12(sp)
  8005cc:	dc800217 	ldw	r18,8(sp)
  8005d0:	dc400117 	ldw	r17,4(sp)
  8005d4:	dc000017 	ldw	r16,0(sp)
  8005d8:	dec00904 	addi	sp,sp,36
  8005dc:	f800283a 	ret

008005e0 <__fp_lock>:
  8005e0:	0005883a 	mov	r2,zero
  8005e4:	f800283a 	ret

008005e8 <__sfmoreglue>:
  8005e8:	defffc04 	addi	sp,sp,-16
  8005ec:	dc400115 	stw	r17,4(sp)
  8005f0:	2c7fffc4 	addi	r17,r5,-1
  8005f4:	8c401a24 	muli	r17,r17,104
  8005f8:	dc800215 	stw	r18,8(sp)
  8005fc:	2825883a 	mov	r18,r5
  800600:	89401d04 	addi	r5,r17,116
  800604:	dc000015 	stw	r16,0(sp)
  800608:	dfc00315 	stw	ra,12(sp)
  80060c:	0800e140 	call	800e14 <_malloc_r>
  800610:	1021883a 	mov	r16,r2
  800614:	10000726 	beq	r2,zero,800634 <__sfmoreglue+0x4c>
  800618:	11000304 	addi	r4,r2,12
  80061c:	10000015 	stw	zero,0(r2)
  800620:	14800115 	stw	r18,4(r2)
  800624:	11000215 	stw	r4,8(r2)
  800628:	89801a04 	addi	r6,r17,104
  80062c:	000b883a 	mov	r5,zero
  800630:	08019a80 	call	8019a8 <memset>
  800634:	8005883a 	mov	r2,r16
  800638:	dfc00317 	ldw	ra,12(sp)
  80063c:	dc800217 	ldw	r18,8(sp)
  800640:	dc400117 	ldw	r17,4(sp)
  800644:	dc000017 	ldw	r16,0(sp)
  800648:	dec00404 	addi	sp,sp,16
  80064c:	f800283a 	ret

00800650 <__sfp>:
  800650:	defffb04 	addi	sp,sp,-20
  800654:	dc000015 	stw	r16,0(sp)
  800658:	04002034 	movhi	r16,128
  80065c:	841cae04 	addi	r16,r16,29368
  800660:	dcc00315 	stw	r19,12(sp)
  800664:	2027883a 	mov	r19,r4
  800668:	81000017 	ldw	r4,0(r16)
  80066c:	dfc00415 	stw	ra,16(sp)
  800670:	dc800215 	stw	r18,8(sp)
  800674:	20800e17 	ldw	r2,56(r4)
  800678:	dc400115 	stw	r17,4(sp)
  80067c:	1000021e 	bne	r2,zero,800688 <__sfp+0x38>
  800680:	08004440 	call	800444 <__sinit.part.1>
  800684:	81000017 	ldw	r4,0(r16)
  800688:	2480b804 	addi	r18,r4,736
  80068c:	047fffc4 	movi	r17,-1
  800690:	91000117 	ldw	r4,4(r18)
  800694:	94000217 	ldw	r16,8(r18)
  800698:	213fffc4 	addi	r4,r4,-1
  80069c:	20000a16 	blt	r4,zero,8006c8 <__sfp+0x78>
  8006a0:	8080030f 	ldh	r2,12(r16)
  8006a4:	10000c26 	beq	r2,zero,8006d8 <__sfp+0x88>
  8006a8:	80c01d04 	addi	r3,r16,116
  8006ac:	00000206 	br	8006b8 <__sfp+0x68>
  8006b0:	18bfe60f 	ldh	r2,-104(r3)
  8006b4:	10000826 	beq	r2,zero,8006d8 <__sfp+0x88>
  8006b8:	213fffc4 	addi	r4,r4,-1
  8006bc:	1c3ffd04 	addi	r16,r3,-12
  8006c0:	18c01a04 	addi	r3,r3,104
  8006c4:	247ffa1e 	bne	r4,r17,8006b0 <__alt_data_end+0xff8006b0>
  8006c8:	90800017 	ldw	r2,0(r18)
  8006cc:	10001d26 	beq	r2,zero,800744 <__sfp+0xf4>
  8006d0:	1025883a 	mov	r18,r2
  8006d4:	003fee06 	br	800690 <__alt_data_end+0xff800690>
  8006d8:	00bfffc4 	movi	r2,-1
  8006dc:	8080038d 	sth	r2,14(r16)
  8006e0:	00800044 	movi	r2,1
  8006e4:	8080030d 	sth	r2,12(r16)
  8006e8:	80001915 	stw	zero,100(r16)
  8006ec:	80000015 	stw	zero,0(r16)
  8006f0:	80000215 	stw	zero,8(r16)
  8006f4:	80000115 	stw	zero,4(r16)
  8006f8:	80000415 	stw	zero,16(r16)
  8006fc:	80000515 	stw	zero,20(r16)
  800700:	80000615 	stw	zero,24(r16)
  800704:	01800204 	movi	r6,8
  800708:	000b883a 	mov	r5,zero
  80070c:	81001704 	addi	r4,r16,92
  800710:	08019a80 	call	8019a8 <memset>
  800714:	8005883a 	mov	r2,r16
  800718:	80000c15 	stw	zero,48(r16)
  80071c:	80000d15 	stw	zero,52(r16)
  800720:	80001115 	stw	zero,68(r16)
  800724:	80001215 	stw	zero,72(r16)
  800728:	dfc00417 	ldw	ra,16(sp)
  80072c:	dcc00317 	ldw	r19,12(sp)
  800730:	dc800217 	ldw	r18,8(sp)
  800734:	dc400117 	ldw	r17,4(sp)
  800738:	dc000017 	ldw	r16,0(sp)
  80073c:	dec00504 	addi	sp,sp,20
  800740:	f800283a 	ret
  800744:	01400104 	movi	r5,4
  800748:	9809883a 	mov	r4,r19
  80074c:	08005e80 	call	8005e8 <__sfmoreglue>
  800750:	90800015 	stw	r2,0(r18)
  800754:	103fde1e 	bne	r2,zero,8006d0 <__alt_data_end+0xff8006d0>
  800758:	00800304 	movi	r2,12
  80075c:	98800015 	stw	r2,0(r19)
  800760:	0005883a 	mov	r2,zero
  800764:	003ff006 	br	800728 <__alt_data_end+0xff800728>

00800768 <_cleanup>:
  800768:	00802034 	movhi	r2,128
  80076c:	109cae04 	addi	r2,r2,29368
  800770:	11000017 	ldw	r4,0(r2)
  800774:	01402034 	movhi	r5,128
  800778:	2948f304 	addi	r5,r5,9164
  80077c:	0800d501 	jmpi	800d50 <_fwalk_reent>

00800780 <__sinit>:
  800780:	20800e17 	ldw	r2,56(r4)
  800784:	10000126 	beq	r2,zero,80078c <__sinit+0xc>
  800788:	f800283a 	ret
  80078c:	08004441 	jmpi	800444 <__sinit.part.1>

00800790 <__sfp_lock_acquire>:
  800790:	f800283a 	ret

00800794 <__sfp_lock_release>:
  800794:	f800283a 	ret

00800798 <__sinit_lock_acquire>:
  800798:	f800283a 	ret

0080079c <__sinit_lock_release>:
  80079c:	f800283a 	ret

008007a0 <__fp_lock_all>:
  8007a0:	00802034 	movhi	r2,128
  8007a4:	109caf04 	addi	r2,r2,29372
  8007a8:	11000017 	ldw	r4,0(r2)
  8007ac:	01402034 	movhi	r5,128
  8007b0:	29417804 	addi	r5,r5,1504
  8007b4:	0800c8c1 	jmpi	800c8c <_fwalk>

008007b8 <__fp_unlock_all>:
  8007b8:	00802034 	movhi	r2,128
  8007bc:	109caf04 	addi	r2,r2,29372
  8007c0:	11000017 	ldw	r4,0(r2)
  8007c4:	01402034 	movhi	r5,128
  8007c8:	29410c04 	addi	r5,r5,1072
  8007cc:	0800c8c1 	jmpi	800c8c <_fwalk>

008007d0 <__sfvwrite_r>:
  8007d0:	30800217 	ldw	r2,8(r6)
  8007d4:	10006726 	beq	r2,zero,800974 <__sfvwrite_r+0x1a4>
  8007d8:	28c0030b 	ldhu	r3,12(r5)
  8007dc:	defff404 	addi	sp,sp,-48
  8007e0:	dd400715 	stw	r21,28(sp)
  8007e4:	dd000615 	stw	r20,24(sp)
  8007e8:	dc000215 	stw	r16,8(sp)
  8007ec:	dfc00b15 	stw	ra,44(sp)
  8007f0:	df000a15 	stw	fp,40(sp)
  8007f4:	ddc00915 	stw	r23,36(sp)
  8007f8:	dd800815 	stw	r22,32(sp)
  8007fc:	dcc00515 	stw	r19,20(sp)
  800800:	dc800415 	stw	r18,16(sp)
  800804:	dc400315 	stw	r17,12(sp)
  800808:	1880020c 	andi	r2,r3,8
  80080c:	2821883a 	mov	r16,r5
  800810:	202b883a 	mov	r21,r4
  800814:	3029883a 	mov	r20,r6
  800818:	10002726 	beq	r2,zero,8008b8 <__sfvwrite_r+0xe8>
  80081c:	28800417 	ldw	r2,16(r5)
  800820:	10002526 	beq	r2,zero,8008b8 <__sfvwrite_r+0xe8>
  800824:	1880008c 	andi	r2,r3,2
  800828:	a4400017 	ldw	r17,0(r20)
  80082c:	10002a26 	beq	r2,zero,8008d8 <__sfvwrite_r+0x108>
  800830:	05a00034 	movhi	r22,32768
  800834:	0027883a 	mov	r19,zero
  800838:	0025883a 	mov	r18,zero
  80083c:	b5bf0004 	addi	r22,r22,-1024
  800840:	980d883a 	mov	r6,r19
  800844:	a809883a 	mov	r4,r21
  800848:	90004626 	beq	r18,zero,800964 <__sfvwrite_r+0x194>
  80084c:	900f883a 	mov	r7,r18
  800850:	b480022e 	bgeu	r22,r18,80085c <__sfvwrite_r+0x8c>
  800854:	01e00034 	movhi	r7,32768
  800858:	39ff0004 	addi	r7,r7,-1024
  80085c:	80800917 	ldw	r2,36(r16)
  800860:	81400717 	ldw	r5,28(r16)
  800864:	103ee83a 	callr	r2
  800868:	0080570e 	bge	zero,r2,8009c8 <__sfvwrite_r+0x1f8>
  80086c:	a0c00217 	ldw	r3,8(r20)
  800870:	98a7883a 	add	r19,r19,r2
  800874:	90a5c83a 	sub	r18,r18,r2
  800878:	1885c83a 	sub	r2,r3,r2
  80087c:	a0800215 	stw	r2,8(r20)
  800880:	103fef1e 	bne	r2,zero,800840 <__alt_data_end+0xff800840>
  800884:	0005883a 	mov	r2,zero
  800888:	dfc00b17 	ldw	ra,44(sp)
  80088c:	df000a17 	ldw	fp,40(sp)
  800890:	ddc00917 	ldw	r23,36(sp)
  800894:	dd800817 	ldw	r22,32(sp)
  800898:	dd400717 	ldw	r21,28(sp)
  80089c:	dd000617 	ldw	r20,24(sp)
  8008a0:	dcc00517 	ldw	r19,20(sp)
  8008a4:	dc800417 	ldw	r18,16(sp)
  8008a8:	dc400317 	ldw	r17,12(sp)
  8008ac:	dc000217 	ldw	r16,8(sp)
  8008b0:	dec00c04 	addi	sp,sp,48
  8008b4:	f800283a 	ret
  8008b8:	800b883a 	mov	r5,r16
  8008bc:	a809883a 	mov	r4,r21
  8008c0:	08022240 	call	802224 <__swsetup_r>
  8008c4:	1000eb1e 	bne	r2,zero,800c74 <__sfvwrite_r+0x4a4>
  8008c8:	80c0030b 	ldhu	r3,12(r16)
  8008cc:	a4400017 	ldw	r17,0(r20)
  8008d0:	1880008c 	andi	r2,r3,2
  8008d4:	103fd61e 	bne	r2,zero,800830 <__alt_data_end+0xff800830>
  8008d8:	1880004c 	andi	r2,r3,1
  8008dc:	10003f1e 	bne	r2,zero,8009dc <__sfvwrite_r+0x20c>
  8008e0:	0039883a 	mov	fp,zero
  8008e4:	0025883a 	mov	r18,zero
  8008e8:	90001a26 	beq	r18,zero,800954 <__sfvwrite_r+0x184>
  8008ec:	1880800c 	andi	r2,r3,512
  8008f0:	84c00217 	ldw	r19,8(r16)
  8008f4:	10002126 	beq	r2,zero,80097c <__sfvwrite_r+0x1ac>
  8008f8:	982f883a 	mov	r23,r19
  8008fc:	94c09336 	bltu	r18,r19,800b4c <__sfvwrite_r+0x37c>
  800900:	1881200c 	andi	r2,r3,1152
  800904:	10009e1e 	bne	r2,zero,800b80 <__sfvwrite_r+0x3b0>
  800908:	81000017 	ldw	r4,0(r16)
  80090c:	b80d883a 	mov	r6,r23
  800910:	e00b883a 	mov	r5,fp
  800914:	080184c0 	call	80184c <memmove>
  800918:	80c00217 	ldw	r3,8(r16)
  80091c:	81000017 	ldw	r4,0(r16)
  800920:	9005883a 	mov	r2,r18
  800924:	1ce7c83a 	sub	r19,r3,r19
  800928:	25cf883a 	add	r7,r4,r23
  80092c:	84c00215 	stw	r19,8(r16)
  800930:	81c00015 	stw	r7,0(r16)
  800934:	a0c00217 	ldw	r3,8(r20)
  800938:	e0b9883a 	add	fp,fp,r2
  80093c:	90a5c83a 	sub	r18,r18,r2
  800940:	18a7c83a 	sub	r19,r3,r2
  800944:	a4c00215 	stw	r19,8(r20)
  800948:	983fce26 	beq	r19,zero,800884 <__alt_data_end+0xff800884>
  80094c:	80c0030b 	ldhu	r3,12(r16)
  800950:	903fe61e 	bne	r18,zero,8008ec <__alt_data_end+0xff8008ec>
  800954:	8f000017 	ldw	fp,0(r17)
  800958:	8c800117 	ldw	r18,4(r17)
  80095c:	8c400204 	addi	r17,r17,8
  800960:	003fe106 	br	8008e8 <__alt_data_end+0xff8008e8>
  800964:	8cc00017 	ldw	r19,0(r17)
  800968:	8c800117 	ldw	r18,4(r17)
  80096c:	8c400204 	addi	r17,r17,8
  800970:	003fb306 	br	800840 <__alt_data_end+0xff800840>
  800974:	0005883a 	mov	r2,zero
  800978:	f800283a 	ret
  80097c:	81000017 	ldw	r4,0(r16)
  800980:	80800417 	ldw	r2,16(r16)
  800984:	11005736 	bltu	r2,r4,800ae4 <__sfvwrite_r+0x314>
  800988:	85c00517 	ldw	r23,20(r16)
  80098c:	95c05536 	bltu	r18,r23,800ae4 <__sfvwrite_r+0x314>
  800990:	00a00034 	movhi	r2,32768
  800994:	10bfffc4 	addi	r2,r2,-1
  800998:	9009883a 	mov	r4,r18
  80099c:	1480012e 	bgeu	r2,r18,8009a4 <__sfvwrite_r+0x1d4>
  8009a0:	1009883a 	mov	r4,r2
  8009a4:	b80b883a 	mov	r5,r23
  8009a8:	0802ed80 	call	802ed8 <__divsi3>
  8009ac:	15cf383a 	mul	r7,r2,r23
  8009b0:	81400717 	ldw	r5,28(r16)
  8009b4:	80800917 	ldw	r2,36(r16)
  8009b8:	e00d883a 	mov	r6,fp
  8009bc:	a809883a 	mov	r4,r21
  8009c0:	103ee83a 	callr	r2
  8009c4:	00bfdb16 	blt	zero,r2,800934 <__alt_data_end+0xff800934>
  8009c8:	8080030b 	ldhu	r2,12(r16)
  8009cc:	10801014 	ori	r2,r2,64
  8009d0:	8080030d 	sth	r2,12(r16)
  8009d4:	00bfffc4 	movi	r2,-1
  8009d8:	003fab06 	br	800888 <__alt_data_end+0xff800888>
  8009dc:	0027883a 	mov	r19,zero
  8009e0:	0011883a 	mov	r8,zero
  8009e4:	0039883a 	mov	fp,zero
  8009e8:	0025883a 	mov	r18,zero
  8009ec:	90001f26 	beq	r18,zero,800a6c <__sfvwrite_r+0x29c>
  8009f0:	40005a26 	beq	r8,zero,800b5c <__sfvwrite_r+0x38c>
  8009f4:	982d883a 	mov	r22,r19
  8009f8:	94c0012e 	bgeu	r18,r19,800a00 <__sfvwrite_r+0x230>
  8009fc:	902d883a 	mov	r22,r18
  800a00:	81000017 	ldw	r4,0(r16)
  800a04:	80800417 	ldw	r2,16(r16)
  800a08:	b02f883a 	mov	r23,r22
  800a0c:	81c00517 	ldw	r7,20(r16)
  800a10:	1100032e 	bgeu	r2,r4,800a20 <__sfvwrite_r+0x250>
  800a14:	80c00217 	ldw	r3,8(r16)
  800a18:	38c7883a 	add	r3,r7,r3
  800a1c:	1d801816 	blt	r3,r22,800a80 <__sfvwrite_r+0x2b0>
  800a20:	b1c03e16 	blt	r22,r7,800b1c <__sfvwrite_r+0x34c>
  800a24:	80800917 	ldw	r2,36(r16)
  800a28:	81400717 	ldw	r5,28(r16)
  800a2c:	e00d883a 	mov	r6,fp
  800a30:	da000115 	stw	r8,4(sp)
  800a34:	a809883a 	mov	r4,r21
  800a38:	103ee83a 	callr	r2
  800a3c:	102f883a 	mov	r23,r2
  800a40:	da000117 	ldw	r8,4(sp)
  800a44:	00bfe00e 	bge	zero,r2,8009c8 <__alt_data_end+0xff8009c8>
  800a48:	9de7c83a 	sub	r19,r19,r23
  800a4c:	98001f26 	beq	r19,zero,800acc <__sfvwrite_r+0x2fc>
  800a50:	a0800217 	ldw	r2,8(r20)
  800a54:	e5f9883a 	add	fp,fp,r23
  800a58:	95e5c83a 	sub	r18,r18,r23
  800a5c:	15efc83a 	sub	r23,r2,r23
  800a60:	a5c00215 	stw	r23,8(r20)
  800a64:	b83f8726 	beq	r23,zero,800884 <__alt_data_end+0xff800884>
  800a68:	903fe11e 	bne	r18,zero,8009f0 <__alt_data_end+0xff8009f0>
  800a6c:	8f000017 	ldw	fp,0(r17)
  800a70:	8c800117 	ldw	r18,4(r17)
  800a74:	0011883a 	mov	r8,zero
  800a78:	8c400204 	addi	r17,r17,8
  800a7c:	003fdb06 	br	8009ec <__alt_data_end+0xff8009ec>
  800a80:	180d883a 	mov	r6,r3
  800a84:	e00b883a 	mov	r5,fp
  800a88:	da000115 	stw	r8,4(sp)
  800a8c:	d8c00015 	stw	r3,0(sp)
  800a90:	080184c0 	call	80184c <memmove>
  800a94:	d8c00017 	ldw	r3,0(sp)
  800a98:	80800017 	ldw	r2,0(r16)
  800a9c:	800b883a 	mov	r5,r16
  800aa0:	a809883a 	mov	r4,r21
  800aa4:	10c5883a 	add	r2,r2,r3
  800aa8:	80800015 	stw	r2,0(r16)
  800aac:	d8c00015 	stw	r3,0(sp)
  800ab0:	08026ec0 	call	8026ec <_fflush_r>
  800ab4:	d8c00017 	ldw	r3,0(sp)
  800ab8:	da000117 	ldw	r8,4(sp)
  800abc:	103fc21e 	bne	r2,zero,8009c8 <__alt_data_end+0xff8009c8>
  800ac0:	182f883a 	mov	r23,r3
  800ac4:	9de7c83a 	sub	r19,r19,r23
  800ac8:	983fe11e 	bne	r19,zero,800a50 <__alt_data_end+0xff800a50>
  800acc:	800b883a 	mov	r5,r16
  800ad0:	a809883a 	mov	r4,r21
  800ad4:	08026ec0 	call	8026ec <_fflush_r>
  800ad8:	103fbb1e 	bne	r2,zero,8009c8 <__alt_data_end+0xff8009c8>
  800adc:	0011883a 	mov	r8,zero
  800ae0:	003fdb06 	br	800a50 <__alt_data_end+0xff800a50>
  800ae4:	94c0012e 	bgeu	r18,r19,800aec <__sfvwrite_r+0x31c>
  800ae8:	9027883a 	mov	r19,r18
  800aec:	980d883a 	mov	r6,r19
  800af0:	e00b883a 	mov	r5,fp
  800af4:	080184c0 	call	80184c <memmove>
  800af8:	80800217 	ldw	r2,8(r16)
  800afc:	80c00017 	ldw	r3,0(r16)
  800b00:	14c5c83a 	sub	r2,r2,r19
  800b04:	1cc7883a 	add	r3,r3,r19
  800b08:	80800215 	stw	r2,8(r16)
  800b0c:	80c00015 	stw	r3,0(r16)
  800b10:	10004326 	beq	r2,zero,800c20 <__sfvwrite_r+0x450>
  800b14:	9805883a 	mov	r2,r19
  800b18:	003f8606 	br	800934 <__alt_data_end+0xff800934>
  800b1c:	b00d883a 	mov	r6,r22
  800b20:	e00b883a 	mov	r5,fp
  800b24:	da000115 	stw	r8,4(sp)
  800b28:	080184c0 	call	80184c <memmove>
  800b2c:	80800217 	ldw	r2,8(r16)
  800b30:	80c00017 	ldw	r3,0(r16)
  800b34:	da000117 	ldw	r8,4(sp)
  800b38:	1585c83a 	sub	r2,r2,r22
  800b3c:	1dad883a 	add	r22,r3,r22
  800b40:	80800215 	stw	r2,8(r16)
  800b44:	85800015 	stw	r22,0(r16)
  800b48:	003fbf06 	br	800a48 <__alt_data_end+0xff800a48>
  800b4c:	81000017 	ldw	r4,0(r16)
  800b50:	9027883a 	mov	r19,r18
  800b54:	902f883a 	mov	r23,r18
  800b58:	003f6c06 	br	80090c <__alt_data_end+0xff80090c>
  800b5c:	900d883a 	mov	r6,r18
  800b60:	01400284 	movi	r5,10
  800b64:	e009883a 	mov	r4,fp
  800b68:	08016200 	call	801620 <memchr>
  800b6c:	10003e26 	beq	r2,zero,800c68 <__sfvwrite_r+0x498>
  800b70:	10800044 	addi	r2,r2,1
  800b74:	1727c83a 	sub	r19,r2,fp
  800b78:	02000044 	movi	r8,1
  800b7c:	003f9d06 	br	8009f4 <__alt_data_end+0xff8009f4>
  800b80:	80800517 	ldw	r2,20(r16)
  800b84:	81400417 	ldw	r5,16(r16)
  800b88:	81c00017 	ldw	r7,0(r16)
  800b8c:	10a7883a 	add	r19,r2,r2
  800b90:	9885883a 	add	r2,r19,r2
  800b94:	1026d7fa 	srli	r19,r2,31
  800b98:	396dc83a 	sub	r22,r7,r5
  800b9c:	b1000044 	addi	r4,r22,1
  800ba0:	9885883a 	add	r2,r19,r2
  800ba4:	1027d07a 	srai	r19,r2,1
  800ba8:	2485883a 	add	r2,r4,r18
  800bac:	980d883a 	mov	r6,r19
  800bb0:	9880022e 	bgeu	r19,r2,800bbc <__sfvwrite_r+0x3ec>
  800bb4:	1027883a 	mov	r19,r2
  800bb8:	100d883a 	mov	r6,r2
  800bbc:	18c1000c 	andi	r3,r3,1024
  800bc0:	18001c26 	beq	r3,zero,800c34 <__sfvwrite_r+0x464>
  800bc4:	300b883a 	mov	r5,r6
  800bc8:	a809883a 	mov	r4,r21
  800bcc:	0800e140 	call	800e14 <_malloc_r>
  800bd0:	102f883a 	mov	r23,r2
  800bd4:	10002926 	beq	r2,zero,800c7c <__sfvwrite_r+0x4ac>
  800bd8:	81400417 	ldw	r5,16(r16)
  800bdc:	b00d883a 	mov	r6,r22
  800be0:	1009883a 	mov	r4,r2
  800be4:	08017040 	call	801704 <memcpy>
  800be8:	8080030b 	ldhu	r2,12(r16)
  800bec:	00fedfc4 	movi	r3,-1153
  800bf0:	10c4703a 	and	r2,r2,r3
  800bf4:	10802014 	ori	r2,r2,128
  800bf8:	8080030d 	sth	r2,12(r16)
  800bfc:	bd89883a 	add	r4,r23,r22
  800c00:	9d8fc83a 	sub	r7,r19,r22
  800c04:	85c00415 	stw	r23,16(r16)
  800c08:	84c00515 	stw	r19,20(r16)
  800c0c:	81000015 	stw	r4,0(r16)
  800c10:	9027883a 	mov	r19,r18
  800c14:	81c00215 	stw	r7,8(r16)
  800c18:	902f883a 	mov	r23,r18
  800c1c:	003f3b06 	br	80090c <__alt_data_end+0xff80090c>
  800c20:	800b883a 	mov	r5,r16
  800c24:	a809883a 	mov	r4,r21
  800c28:	08026ec0 	call	8026ec <_fflush_r>
  800c2c:	103fb926 	beq	r2,zero,800b14 <__alt_data_end+0xff800b14>
  800c30:	003f6506 	br	8009c8 <__alt_data_end+0xff8009c8>
  800c34:	a809883a 	mov	r4,r21
  800c38:	0801ad00 	call	801ad0 <_realloc_r>
  800c3c:	102f883a 	mov	r23,r2
  800c40:	103fee1e 	bne	r2,zero,800bfc <__alt_data_end+0xff800bfc>
  800c44:	81400417 	ldw	r5,16(r16)
  800c48:	a809883a 	mov	r4,r21
  800c4c:	080289c0 	call	80289c <_free_r>
  800c50:	8080030b 	ldhu	r2,12(r16)
  800c54:	00ffdfc4 	movi	r3,-129
  800c58:	1884703a 	and	r2,r3,r2
  800c5c:	00c00304 	movi	r3,12
  800c60:	a8c00015 	stw	r3,0(r21)
  800c64:	003f5906 	br	8009cc <__alt_data_end+0xff8009cc>
  800c68:	94c00044 	addi	r19,r18,1
  800c6c:	02000044 	movi	r8,1
  800c70:	003f6006 	br	8009f4 <__alt_data_end+0xff8009f4>
  800c74:	00bfffc4 	movi	r2,-1
  800c78:	003f0306 	br	800888 <__alt_data_end+0xff800888>
  800c7c:	00800304 	movi	r2,12
  800c80:	a8800015 	stw	r2,0(r21)
  800c84:	8080030b 	ldhu	r2,12(r16)
  800c88:	003f5006 	br	8009cc <__alt_data_end+0xff8009cc>

00800c8c <_fwalk>:
  800c8c:	defff704 	addi	sp,sp,-36
  800c90:	dd000415 	stw	r20,16(sp)
  800c94:	dfc00815 	stw	ra,32(sp)
  800c98:	ddc00715 	stw	r23,28(sp)
  800c9c:	dd800615 	stw	r22,24(sp)
  800ca0:	dd400515 	stw	r21,20(sp)
  800ca4:	dcc00315 	stw	r19,12(sp)
  800ca8:	dc800215 	stw	r18,8(sp)
  800cac:	dc400115 	stw	r17,4(sp)
  800cb0:	dc000015 	stw	r16,0(sp)
  800cb4:	2500b804 	addi	r20,r4,736
  800cb8:	a0002326 	beq	r20,zero,800d48 <_fwalk+0xbc>
  800cbc:	282b883a 	mov	r21,r5
  800cc0:	002f883a 	mov	r23,zero
  800cc4:	05800044 	movi	r22,1
  800cc8:	04ffffc4 	movi	r19,-1
  800ccc:	a4400117 	ldw	r17,4(r20)
  800cd0:	a4800217 	ldw	r18,8(r20)
  800cd4:	8c7fffc4 	addi	r17,r17,-1
  800cd8:	88000d16 	blt	r17,zero,800d10 <_fwalk+0x84>
  800cdc:	94000304 	addi	r16,r18,12
  800ce0:	94800384 	addi	r18,r18,14
  800ce4:	8080000b 	ldhu	r2,0(r16)
  800ce8:	8c7fffc4 	addi	r17,r17,-1
  800cec:	813ffd04 	addi	r4,r16,-12
  800cf0:	b080042e 	bgeu	r22,r2,800d04 <_fwalk+0x78>
  800cf4:	9080000f 	ldh	r2,0(r18)
  800cf8:	14c00226 	beq	r2,r19,800d04 <_fwalk+0x78>
  800cfc:	a83ee83a 	callr	r21
  800d00:	b8aeb03a 	or	r23,r23,r2
  800d04:	84001a04 	addi	r16,r16,104
  800d08:	94801a04 	addi	r18,r18,104
  800d0c:	8cfff51e 	bne	r17,r19,800ce4 <__alt_data_end+0xff800ce4>
  800d10:	a5000017 	ldw	r20,0(r20)
  800d14:	a03fed1e 	bne	r20,zero,800ccc <__alt_data_end+0xff800ccc>
  800d18:	b805883a 	mov	r2,r23
  800d1c:	dfc00817 	ldw	ra,32(sp)
  800d20:	ddc00717 	ldw	r23,28(sp)
  800d24:	dd800617 	ldw	r22,24(sp)
  800d28:	dd400517 	ldw	r21,20(sp)
  800d2c:	dd000417 	ldw	r20,16(sp)
  800d30:	dcc00317 	ldw	r19,12(sp)
  800d34:	dc800217 	ldw	r18,8(sp)
  800d38:	dc400117 	ldw	r17,4(sp)
  800d3c:	dc000017 	ldw	r16,0(sp)
  800d40:	dec00904 	addi	sp,sp,36
  800d44:	f800283a 	ret
  800d48:	002f883a 	mov	r23,zero
  800d4c:	003ff206 	br	800d18 <__alt_data_end+0xff800d18>

00800d50 <_fwalk_reent>:
  800d50:	defff704 	addi	sp,sp,-36
  800d54:	dd000415 	stw	r20,16(sp)
  800d58:	dfc00815 	stw	ra,32(sp)
  800d5c:	ddc00715 	stw	r23,28(sp)
  800d60:	dd800615 	stw	r22,24(sp)
  800d64:	dd400515 	stw	r21,20(sp)
  800d68:	dcc00315 	stw	r19,12(sp)
  800d6c:	dc800215 	stw	r18,8(sp)
  800d70:	dc400115 	stw	r17,4(sp)
  800d74:	dc000015 	stw	r16,0(sp)
  800d78:	2500b804 	addi	r20,r4,736
  800d7c:	a0002326 	beq	r20,zero,800e0c <_fwalk_reent+0xbc>
  800d80:	282b883a 	mov	r21,r5
  800d84:	2027883a 	mov	r19,r4
  800d88:	002f883a 	mov	r23,zero
  800d8c:	05800044 	movi	r22,1
  800d90:	04bfffc4 	movi	r18,-1
  800d94:	a4400117 	ldw	r17,4(r20)
  800d98:	a4000217 	ldw	r16,8(r20)
  800d9c:	8c7fffc4 	addi	r17,r17,-1
  800da0:	88000c16 	blt	r17,zero,800dd4 <_fwalk_reent+0x84>
  800da4:	84000304 	addi	r16,r16,12
  800da8:	8080000b 	ldhu	r2,0(r16)
  800dac:	8c7fffc4 	addi	r17,r17,-1
  800db0:	817ffd04 	addi	r5,r16,-12
  800db4:	b080052e 	bgeu	r22,r2,800dcc <_fwalk_reent+0x7c>
  800db8:	8080008f 	ldh	r2,2(r16)
  800dbc:	9809883a 	mov	r4,r19
  800dc0:	14800226 	beq	r2,r18,800dcc <_fwalk_reent+0x7c>
  800dc4:	a83ee83a 	callr	r21
  800dc8:	b8aeb03a 	or	r23,r23,r2
  800dcc:	84001a04 	addi	r16,r16,104
  800dd0:	8cbff51e 	bne	r17,r18,800da8 <__alt_data_end+0xff800da8>
  800dd4:	a5000017 	ldw	r20,0(r20)
  800dd8:	a03fee1e 	bne	r20,zero,800d94 <__alt_data_end+0xff800d94>
  800ddc:	b805883a 	mov	r2,r23
  800de0:	dfc00817 	ldw	ra,32(sp)
  800de4:	ddc00717 	ldw	r23,28(sp)
  800de8:	dd800617 	ldw	r22,24(sp)
  800dec:	dd400517 	ldw	r21,20(sp)
  800df0:	dd000417 	ldw	r20,16(sp)
  800df4:	dcc00317 	ldw	r19,12(sp)
  800df8:	dc800217 	ldw	r18,8(sp)
  800dfc:	dc400117 	ldw	r17,4(sp)
  800e00:	dc000017 	ldw	r16,0(sp)
  800e04:	dec00904 	addi	sp,sp,36
  800e08:	f800283a 	ret
  800e0c:	002f883a 	mov	r23,zero
  800e10:	003ff206 	br	800ddc <__alt_data_end+0xff800ddc>

00800e14 <_malloc_r>:
  800e14:	defff504 	addi	sp,sp,-44
  800e18:	dc800315 	stw	r18,12(sp)
  800e1c:	dfc00a15 	stw	ra,40(sp)
  800e20:	df000915 	stw	fp,36(sp)
  800e24:	ddc00815 	stw	r23,32(sp)
  800e28:	dd800715 	stw	r22,28(sp)
  800e2c:	dd400615 	stw	r21,24(sp)
  800e30:	dd000515 	stw	r20,20(sp)
  800e34:	dcc00415 	stw	r19,16(sp)
  800e38:	dc400215 	stw	r17,8(sp)
  800e3c:	dc000115 	stw	r16,4(sp)
  800e40:	288002c4 	addi	r2,r5,11
  800e44:	00c00584 	movi	r3,22
  800e48:	2025883a 	mov	r18,r4
  800e4c:	18807f2e 	bgeu	r3,r2,80104c <_malloc_r+0x238>
  800e50:	047ffe04 	movi	r17,-8
  800e54:	1462703a 	and	r17,r2,r17
  800e58:	8800a316 	blt	r17,zero,8010e8 <_malloc_r+0x2d4>
  800e5c:	8940a236 	bltu	r17,r5,8010e8 <_malloc_r+0x2d4>
  800e60:	08036080 	call	803608 <__malloc_lock>
  800e64:	00807dc4 	movi	r2,503
  800e68:	1441e92e 	bgeu	r2,r17,801610 <_malloc_r+0x7fc>
  800e6c:	8804d27a 	srli	r2,r17,9
  800e70:	1000a126 	beq	r2,zero,8010f8 <_malloc_r+0x2e4>
  800e74:	00c00104 	movi	r3,4
  800e78:	18811e36 	bltu	r3,r2,8012f4 <_malloc_r+0x4e0>
  800e7c:	8804d1ba 	srli	r2,r17,6
  800e80:	12000e44 	addi	r8,r2,57
  800e84:	11c00e04 	addi	r7,r2,56
  800e88:	4209883a 	add	r4,r8,r8
  800e8c:	04c02034 	movhi	r19,128
  800e90:	2109883a 	add	r4,r4,r4
  800e94:	9cd72a04 	addi	r19,r19,23720
  800e98:	2109883a 	add	r4,r4,r4
  800e9c:	9909883a 	add	r4,r19,r4
  800ea0:	24000117 	ldw	r16,4(r4)
  800ea4:	213ffe04 	addi	r4,r4,-8
  800ea8:	24009726 	beq	r4,r16,801108 <_malloc_r+0x2f4>
  800eac:	80800117 	ldw	r2,4(r16)
  800eb0:	01bfff04 	movi	r6,-4
  800eb4:	014003c4 	movi	r5,15
  800eb8:	1184703a 	and	r2,r2,r6
  800ebc:	1447c83a 	sub	r3,r2,r17
  800ec0:	28c00716 	blt	r5,r3,800ee0 <_malloc_r+0xcc>
  800ec4:	1800920e 	bge	r3,zero,801110 <_malloc_r+0x2fc>
  800ec8:	84000317 	ldw	r16,12(r16)
  800ecc:	24008e26 	beq	r4,r16,801108 <_malloc_r+0x2f4>
  800ed0:	80800117 	ldw	r2,4(r16)
  800ed4:	1184703a 	and	r2,r2,r6
  800ed8:	1447c83a 	sub	r3,r2,r17
  800edc:	28fff90e 	bge	r5,r3,800ec4 <__alt_data_end+0xff800ec4>
  800ee0:	3809883a 	mov	r4,r7
  800ee4:	01802034 	movhi	r6,128
  800ee8:	9c000417 	ldw	r16,16(r19)
  800eec:	31972a04 	addi	r6,r6,23720
  800ef0:	32000204 	addi	r8,r6,8
  800ef4:	82013426 	beq	r16,r8,8013c8 <_malloc_r+0x5b4>
  800ef8:	80c00117 	ldw	r3,4(r16)
  800efc:	00bfff04 	movi	r2,-4
  800f00:	188e703a 	and	r7,r3,r2
  800f04:	3c45c83a 	sub	r2,r7,r17
  800f08:	00c003c4 	movi	r3,15
  800f0c:	18811f16 	blt	r3,r2,80138c <_malloc_r+0x578>
  800f10:	32000515 	stw	r8,20(r6)
  800f14:	32000415 	stw	r8,16(r6)
  800f18:	10007f0e 	bge	r2,zero,801118 <_malloc_r+0x304>
  800f1c:	00807fc4 	movi	r2,511
  800f20:	11c0fd36 	bltu	r2,r7,801318 <_malloc_r+0x504>
  800f24:	3806d0fa 	srli	r3,r7,3
  800f28:	01c00044 	movi	r7,1
  800f2c:	30800117 	ldw	r2,4(r6)
  800f30:	19400044 	addi	r5,r3,1
  800f34:	294b883a 	add	r5,r5,r5
  800f38:	1807d0ba 	srai	r3,r3,2
  800f3c:	294b883a 	add	r5,r5,r5
  800f40:	294b883a 	add	r5,r5,r5
  800f44:	298b883a 	add	r5,r5,r6
  800f48:	38c6983a 	sll	r3,r7,r3
  800f4c:	29c00017 	ldw	r7,0(r5)
  800f50:	2a7ffe04 	addi	r9,r5,-8
  800f54:	1886b03a 	or	r3,r3,r2
  800f58:	82400315 	stw	r9,12(r16)
  800f5c:	81c00215 	stw	r7,8(r16)
  800f60:	30c00115 	stw	r3,4(r6)
  800f64:	2c000015 	stw	r16,0(r5)
  800f68:	3c000315 	stw	r16,12(r7)
  800f6c:	2005d0ba 	srai	r2,r4,2
  800f70:	01400044 	movi	r5,1
  800f74:	288a983a 	sll	r5,r5,r2
  800f78:	19406f36 	bltu	r3,r5,801138 <_malloc_r+0x324>
  800f7c:	28c4703a 	and	r2,r5,r3
  800f80:	10000a1e 	bne	r2,zero,800fac <_malloc_r+0x198>
  800f84:	00bfff04 	movi	r2,-4
  800f88:	294b883a 	add	r5,r5,r5
  800f8c:	2088703a 	and	r4,r4,r2
  800f90:	28c4703a 	and	r2,r5,r3
  800f94:	21000104 	addi	r4,r4,4
  800f98:	1000041e 	bne	r2,zero,800fac <_malloc_r+0x198>
  800f9c:	294b883a 	add	r5,r5,r5
  800fa0:	28c4703a 	and	r2,r5,r3
  800fa4:	21000104 	addi	r4,r4,4
  800fa8:	103ffc26 	beq	r2,zero,800f9c <__alt_data_end+0xff800f9c>
  800fac:	02bfff04 	movi	r10,-4
  800fb0:	024003c4 	movi	r9,15
  800fb4:	21800044 	addi	r6,r4,1
  800fb8:	318d883a 	add	r6,r6,r6
  800fbc:	318d883a 	add	r6,r6,r6
  800fc0:	318d883a 	add	r6,r6,r6
  800fc4:	998d883a 	add	r6,r19,r6
  800fc8:	333ffe04 	addi	r12,r6,-8
  800fcc:	2017883a 	mov	r11,r4
  800fd0:	31800104 	addi	r6,r6,4
  800fd4:	34000017 	ldw	r16,0(r6)
  800fd8:	31fffd04 	addi	r7,r6,-12
  800fdc:	81c0041e 	bne	r16,r7,800ff0 <_malloc_r+0x1dc>
  800fe0:	0000fb06 	br	8013d0 <_malloc_r+0x5bc>
  800fe4:	1801030e 	bge	r3,zero,8013f4 <_malloc_r+0x5e0>
  800fe8:	84000317 	ldw	r16,12(r16)
  800fec:	81c0f826 	beq	r16,r7,8013d0 <_malloc_r+0x5bc>
  800ff0:	80800117 	ldw	r2,4(r16)
  800ff4:	1284703a 	and	r2,r2,r10
  800ff8:	1447c83a 	sub	r3,r2,r17
  800ffc:	48fff90e 	bge	r9,r3,800fe4 <__alt_data_end+0xff800fe4>
  801000:	80800317 	ldw	r2,12(r16)
  801004:	81000217 	ldw	r4,8(r16)
  801008:	89400054 	ori	r5,r17,1
  80100c:	81400115 	stw	r5,4(r16)
  801010:	20800315 	stw	r2,12(r4)
  801014:	11000215 	stw	r4,8(r2)
  801018:	8463883a 	add	r17,r16,r17
  80101c:	9c400515 	stw	r17,20(r19)
  801020:	9c400415 	stw	r17,16(r19)
  801024:	18800054 	ori	r2,r3,1
  801028:	88800115 	stw	r2,4(r17)
  80102c:	8a000315 	stw	r8,12(r17)
  801030:	8a000215 	stw	r8,8(r17)
  801034:	88e3883a 	add	r17,r17,r3
  801038:	88c00015 	stw	r3,0(r17)
  80103c:	9009883a 	mov	r4,r18
  801040:	080362c0 	call	80362c <__malloc_unlock>
  801044:	80800204 	addi	r2,r16,8
  801048:	00001b06 	br	8010b8 <_malloc_r+0x2a4>
  80104c:	04400404 	movi	r17,16
  801050:	89402536 	bltu	r17,r5,8010e8 <_malloc_r+0x2d4>
  801054:	08036080 	call	803608 <__malloc_lock>
  801058:	00800184 	movi	r2,6
  80105c:	01000084 	movi	r4,2
  801060:	04c02034 	movhi	r19,128
  801064:	1085883a 	add	r2,r2,r2
  801068:	9cd72a04 	addi	r19,r19,23720
  80106c:	1085883a 	add	r2,r2,r2
  801070:	9885883a 	add	r2,r19,r2
  801074:	14000117 	ldw	r16,4(r2)
  801078:	10fffe04 	addi	r3,r2,-8
  80107c:	80c0d926 	beq	r16,r3,8013e4 <_malloc_r+0x5d0>
  801080:	80c00117 	ldw	r3,4(r16)
  801084:	81000317 	ldw	r4,12(r16)
  801088:	00bfff04 	movi	r2,-4
  80108c:	1884703a 	and	r2,r3,r2
  801090:	81400217 	ldw	r5,8(r16)
  801094:	8085883a 	add	r2,r16,r2
  801098:	10c00117 	ldw	r3,4(r2)
  80109c:	29000315 	stw	r4,12(r5)
  8010a0:	21400215 	stw	r5,8(r4)
  8010a4:	18c00054 	ori	r3,r3,1
  8010a8:	10c00115 	stw	r3,4(r2)
  8010ac:	9009883a 	mov	r4,r18
  8010b0:	080362c0 	call	80362c <__malloc_unlock>
  8010b4:	80800204 	addi	r2,r16,8
  8010b8:	dfc00a17 	ldw	ra,40(sp)
  8010bc:	df000917 	ldw	fp,36(sp)
  8010c0:	ddc00817 	ldw	r23,32(sp)
  8010c4:	dd800717 	ldw	r22,28(sp)
  8010c8:	dd400617 	ldw	r21,24(sp)
  8010cc:	dd000517 	ldw	r20,20(sp)
  8010d0:	dcc00417 	ldw	r19,16(sp)
  8010d4:	dc800317 	ldw	r18,12(sp)
  8010d8:	dc400217 	ldw	r17,8(sp)
  8010dc:	dc000117 	ldw	r16,4(sp)
  8010e0:	dec00b04 	addi	sp,sp,44
  8010e4:	f800283a 	ret
  8010e8:	00800304 	movi	r2,12
  8010ec:	90800015 	stw	r2,0(r18)
  8010f0:	0005883a 	mov	r2,zero
  8010f4:	003ff006 	br	8010b8 <__alt_data_end+0xff8010b8>
  8010f8:	01002004 	movi	r4,128
  8010fc:	02001004 	movi	r8,64
  801100:	01c00fc4 	movi	r7,63
  801104:	003f6106 	br	800e8c <__alt_data_end+0xff800e8c>
  801108:	4009883a 	mov	r4,r8
  80110c:	003f7506 	br	800ee4 <__alt_data_end+0xff800ee4>
  801110:	81000317 	ldw	r4,12(r16)
  801114:	003fde06 	br	801090 <__alt_data_end+0xff801090>
  801118:	81c5883a 	add	r2,r16,r7
  80111c:	11400117 	ldw	r5,4(r2)
  801120:	9009883a 	mov	r4,r18
  801124:	29400054 	ori	r5,r5,1
  801128:	11400115 	stw	r5,4(r2)
  80112c:	080362c0 	call	80362c <__malloc_unlock>
  801130:	80800204 	addi	r2,r16,8
  801134:	003fe006 	br	8010b8 <__alt_data_end+0xff8010b8>
  801138:	9c000217 	ldw	r16,8(r19)
  80113c:	00bfff04 	movi	r2,-4
  801140:	85800117 	ldw	r22,4(r16)
  801144:	b0ac703a 	and	r22,r22,r2
  801148:	b4400336 	bltu	r22,r17,801158 <_malloc_r+0x344>
  80114c:	b445c83a 	sub	r2,r22,r17
  801150:	00c003c4 	movi	r3,15
  801154:	18805d16 	blt	r3,r2,8012cc <_malloc_r+0x4b8>
  801158:	05c02034 	movhi	r23,128
  80115c:	00802074 	movhi	r2,129
  801160:	10a35904 	addi	r2,r2,-29340
  801164:	bddcb004 	addi	r23,r23,29376
  801168:	15400017 	ldw	r21,0(r2)
  80116c:	b8c00017 	ldw	r3,0(r23)
  801170:	00bfffc4 	movi	r2,-1
  801174:	858d883a 	add	r6,r16,r22
  801178:	8d6b883a 	add	r21,r17,r21
  80117c:	1880ea26 	beq	r3,r2,801528 <_malloc_r+0x714>
  801180:	ad4403c4 	addi	r21,r21,4111
  801184:	00bc0004 	movi	r2,-4096
  801188:	a8aa703a 	and	r21,r21,r2
  80118c:	a80b883a 	mov	r5,r21
  801190:	9009883a 	mov	r4,r18
  801194:	d9800015 	stw	r6,0(sp)
  801198:	08020340 	call	802034 <_sbrk_r>
  80119c:	1029883a 	mov	r20,r2
  8011a0:	00bfffc4 	movi	r2,-1
  8011a4:	d9800017 	ldw	r6,0(sp)
  8011a8:	a080e826 	beq	r20,r2,80154c <_malloc_r+0x738>
  8011ac:	a180a636 	bltu	r20,r6,801448 <_malloc_r+0x634>
  8011b0:	07002074 	movhi	fp,129
  8011b4:	e7236204 	addi	fp,fp,-29304
  8011b8:	e0800017 	ldw	r2,0(fp)
  8011bc:	a887883a 	add	r3,r21,r2
  8011c0:	e0c00015 	stw	r3,0(fp)
  8011c4:	3500e626 	beq	r6,r20,801560 <_malloc_r+0x74c>
  8011c8:	b9000017 	ldw	r4,0(r23)
  8011cc:	00bfffc4 	movi	r2,-1
  8011d0:	2080ee26 	beq	r4,r2,80158c <_malloc_r+0x778>
  8011d4:	a185c83a 	sub	r2,r20,r6
  8011d8:	10c5883a 	add	r2,r2,r3
  8011dc:	e0800015 	stw	r2,0(fp)
  8011e0:	a0c001cc 	andi	r3,r20,7
  8011e4:	1800bc26 	beq	r3,zero,8014d8 <_malloc_r+0x6c4>
  8011e8:	a0e9c83a 	sub	r20,r20,r3
  8011ec:	00840204 	movi	r2,4104
  8011f0:	a5000204 	addi	r20,r20,8
  8011f4:	10c7c83a 	sub	r3,r2,r3
  8011f8:	a545883a 	add	r2,r20,r21
  8011fc:	1083ffcc 	andi	r2,r2,4095
  801200:	18abc83a 	sub	r21,r3,r2
  801204:	a80b883a 	mov	r5,r21
  801208:	9009883a 	mov	r4,r18
  80120c:	08020340 	call	802034 <_sbrk_r>
  801210:	00ffffc4 	movi	r3,-1
  801214:	10c0e126 	beq	r2,r3,80159c <_malloc_r+0x788>
  801218:	1505c83a 	sub	r2,r2,r20
  80121c:	1545883a 	add	r2,r2,r21
  801220:	10800054 	ori	r2,r2,1
  801224:	e0c00017 	ldw	r3,0(fp)
  801228:	9d000215 	stw	r20,8(r19)
  80122c:	a0800115 	stw	r2,4(r20)
  801230:	a8c7883a 	add	r3,r21,r3
  801234:	e0c00015 	stw	r3,0(fp)
  801238:	84c00e26 	beq	r16,r19,801274 <_malloc_r+0x460>
  80123c:	018003c4 	movi	r6,15
  801240:	3580a72e 	bgeu	r6,r22,8014e0 <_malloc_r+0x6cc>
  801244:	81400117 	ldw	r5,4(r16)
  801248:	013ffe04 	movi	r4,-8
  80124c:	b0bffd04 	addi	r2,r22,-12
  801250:	1104703a 	and	r2,r2,r4
  801254:	2900004c 	andi	r4,r5,1
  801258:	2088b03a 	or	r4,r4,r2
  80125c:	81000115 	stw	r4,4(r16)
  801260:	01400144 	movi	r5,5
  801264:	8089883a 	add	r4,r16,r2
  801268:	21400115 	stw	r5,4(r4)
  80126c:	21400215 	stw	r5,8(r4)
  801270:	3080cd36 	bltu	r6,r2,8015a8 <_malloc_r+0x794>
  801274:	00802074 	movhi	r2,129
  801278:	10a35804 	addi	r2,r2,-29344
  80127c:	11000017 	ldw	r4,0(r2)
  801280:	20c0012e 	bgeu	r4,r3,801288 <_malloc_r+0x474>
  801284:	10c00015 	stw	r3,0(r2)
  801288:	00802074 	movhi	r2,129
  80128c:	10a35704 	addi	r2,r2,-29348
  801290:	11000017 	ldw	r4,0(r2)
  801294:	9c000217 	ldw	r16,8(r19)
  801298:	20c0012e 	bgeu	r4,r3,8012a0 <_malloc_r+0x48c>
  80129c:	10c00015 	stw	r3,0(r2)
  8012a0:	80c00117 	ldw	r3,4(r16)
  8012a4:	00bfff04 	movi	r2,-4
  8012a8:	1886703a 	and	r3,r3,r2
  8012ac:	1c45c83a 	sub	r2,r3,r17
  8012b0:	1c400236 	bltu	r3,r17,8012bc <_malloc_r+0x4a8>
  8012b4:	00c003c4 	movi	r3,15
  8012b8:	18800416 	blt	r3,r2,8012cc <_malloc_r+0x4b8>
  8012bc:	9009883a 	mov	r4,r18
  8012c0:	080362c0 	call	80362c <__malloc_unlock>
  8012c4:	0005883a 	mov	r2,zero
  8012c8:	003f7b06 	br	8010b8 <__alt_data_end+0xff8010b8>
  8012cc:	88c00054 	ori	r3,r17,1
  8012d0:	80c00115 	stw	r3,4(r16)
  8012d4:	8463883a 	add	r17,r16,r17
  8012d8:	10800054 	ori	r2,r2,1
  8012dc:	9c400215 	stw	r17,8(r19)
  8012e0:	88800115 	stw	r2,4(r17)
  8012e4:	9009883a 	mov	r4,r18
  8012e8:	080362c0 	call	80362c <__malloc_unlock>
  8012ec:	80800204 	addi	r2,r16,8
  8012f0:	003f7106 	br	8010b8 <__alt_data_end+0xff8010b8>
  8012f4:	00c00504 	movi	r3,20
  8012f8:	18804a2e 	bgeu	r3,r2,801424 <_malloc_r+0x610>
  8012fc:	00c01504 	movi	r3,84
  801300:	18806e36 	bltu	r3,r2,8014bc <_malloc_r+0x6a8>
  801304:	8804d33a 	srli	r2,r17,12
  801308:	12001bc4 	addi	r8,r2,111
  80130c:	11c01b84 	addi	r7,r2,110
  801310:	4209883a 	add	r4,r8,r8
  801314:	003edd06 	br	800e8c <__alt_data_end+0xff800e8c>
  801318:	3804d27a 	srli	r2,r7,9
  80131c:	00c00104 	movi	r3,4
  801320:	1880442e 	bgeu	r3,r2,801434 <_malloc_r+0x620>
  801324:	00c00504 	movi	r3,20
  801328:	18808136 	bltu	r3,r2,801530 <_malloc_r+0x71c>
  80132c:	11401704 	addi	r5,r2,92
  801330:	10c016c4 	addi	r3,r2,91
  801334:	294b883a 	add	r5,r5,r5
  801338:	294b883a 	add	r5,r5,r5
  80133c:	294b883a 	add	r5,r5,r5
  801340:	994b883a 	add	r5,r19,r5
  801344:	28800017 	ldw	r2,0(r5)
  801348:	01802034 	movhi	r6,128
  80134c:	297ffe04 	addi	r5,r5,-8
  801350:	31972a04 	addi	r6,r6,23720
  801354:	28806526 	beq	r5,r2,8014ec <_malloc_r+0x6d8>
  801358:	01bfff04 	movi	r6,-4
  80135c:	10c00117 	ldw	r3,4(r2)
  801360:	1986703a 	and	r3,r3,r6
  801364:	38c0022e 	bgeu	r7,r3,801370 <_malloc_r+0x55c>
  801368:	10800217 	ldw	r2,8(r2)
  80136c:	28bffb1e 	bne	r5,r2,80135c <__alt_data_end+0xff80135c>
  801370:	11400317 	ldw	r5,12(r2)
  801374:	98c00117 	ldw	r3,4(r19)
  801378:	81400315 	stw	r5,12(r16)
  80137c:	80800215 	stw	r2,8(r16)
  801380:	2c000215 	stw	r16,8(r5)
  801384:	14000315 	stw	r16,12(r2)
  801388:	003ef806 	br	800f6c <__alt_data_end+0xff800f6c>
  80138c:	88c00054 	ori	r3,r17,1
  801390:	80c00115 	stw	r3,4(r16)
  801394:	8463883a 	add	r17,r16,r17
  801398:	34400515 	stw	r17,20(r6)
  80139c:	34400415 	stw	r17,16(r6)
  8013a0:	10c00054 	ori	r3,r2,1
  8013a4:	8a000315 	stw	r8,12(r17)
  8013a8:	8a000215 	stw	r8,8(r17)
  8013ac:	88c00115 	stw	r3,4(r17)
  8013b0:	88a3883a 	add	r17,r17,r2
  8013b4:	88800015 	stw	r2,0(r17)
  8013b8:	9009883a 	mov	r4,r18
  8013bc:	080362c0 	call	80362c <__malloc_unlock>
  8013c0:	80800204 	addi	r2,r16,8
  8013c4:	003f3c06 	br	8010b8 <__alt_data_end+0xff8010b8>
  8013c8:	30c00117 	ldw	r3,4(r6)
  8013cc:	003ee706 	br	800f6c <__alt_data_end+0xff800f6c>
  8013d0:	5ac00044 	addi	r11,r11,1
  8013d4:	588000cc 	andi	r2,r11,3
  8013d8:	31800204 	addi	r6,r6,8
  8013dc:	103efd1e 	bne	r2,zero,800fd4 <__alt_data_end+0xff800fd4>
  8013e0:	00002406 	br	801474 <_malloc_r+0x660>
  8013e4:	14000317 	ldw	r16,12(r2)
  8013e8:	143f251e 	bne	r2,r16,801080 <__alt_data_end+0xff801080>
  8013ec:	21000084 	addi	r4,r4,2
  8013f0:	003ebc06 	br	800ee4 <__alt_data_end+0xff800ee4>
  8013f4:	8085883a 	add	r2,r16,r2
  8013f8:	10c00117 	ldw	r3,4(r2)
  8013fc:	81000317 	ldw	r4,12(r16)
  801400:	81400217 	ldw	r5,8(r16)
  801404:	18c00054 	ori	r3,r3,1
  801408:	10c00115 	stw	r3,4(r2)
  80140c:	29000315 	stw	r4,12(r5)
  801410:	21400215 	stw	r5,8(r4)
  801414:	9009883a 	mov	r4,r18
  801418:	080362c0 	call	80362c <__malloc_unlock>
  80141c:	80800204 	addi	r2,r16,8
  801420:	003f2506 	br	8010b8 <__alt_data_end+0xff8010b8>
  801424:	12001704 	addi	r8,r2,92
  801428:	11c016c4 	addi	r7,r2,91
  80142c:	4209883a 	add	r4,r8,r8
  801430:	003e9606 	br	800e8c <__alt_data_end+0xff800e8c>
  801434:	3804d1ba 	srli	r2,r7,6
  801438:	11400e44 	addi	r5,r2,57
  80143c:	10c00e04 	addi	r3,r2,56
  801440:	294b883a 	add	r5,r5,r5
  801444:	003fbc06 	br	801338 <__alt_data_end+0xff801338>
  801448:	84ff5926 	beq	r16,r19,8011b0 <__alt_data_end+0xff8011b0>
  80144c:	00802034 	movhi	r2,128
  801450:	10972a04 	addi	r2,r2,23720
  801454:	14000217 	ldw	r16,8(r2)
  801458:	00bfff04 	movi	r2,-4
  80145c:	80c00117 	ldw	r3,4(r16)
  801460:	1886703a 	and	r3,r3,r2
  801464:	003f9106 	br	8012ac <__alt_data_end+0xff8012ac>
  801468:	60800217 	ldw	r2,8(r12)
  80146c:	213fffc4 	addi	r4,r4,-1
  801470:	1300651e 	bne	r2,r12,801608 <_malloc_r+0x7f4>
  801474:	208000cc 	andi	r2,r4,3
  801478:	633ffe04 	addi	r12,r12,-8
  80147c:	103ffa1e 	bne	r2,zero,801468 <__alt_data_end+0xff801468>
  801480:	98800117 	ldw	r2,4(r19)
  801484:	0146303a 	nor	r3,zero,r5
  801488:	1884703a 	and	r2,r3,r2
  80148c:	98800115 	stw	r2,4(r19)
  801490:	294b883a 	add	r5,r5,r5
  801494:	117f2836 	bltu	r2,r5,801138 <__alt_data_end+0xff801138>
  801498:	283f2726 	beq	r5,zero,801138 <__alt_data_end+0xff801138>
  80149c:	2886703a 	and	r3,r5,r2
  8014a0:	5809883a 	mov	r4,r11
  8014a4:	183ec31e 	bne	r3,zero,800fb4 <__alt_data_end+0xff800fb4>
  8014a8:	294b883a 	add	r5,r5,r5
  8014ac:	2886703a 	and	r3,r5,r2
  8014b0:	21000104 	addi	r4,r4,4
  8014b4:	183ffc26 	beq	r3,zero,8014a8 <__alt_data_end+0xff8014a8>
  8014b8:	003ebe06 	br	800fb4 <__alt_data_end+0xff800fb4>
  8014bc:	00c05504 	movi	r3,340
  8014c0:	18801236 	bltu	r3,r2,80150c <_malloc_r+0x6f8>
  8014c4:	8804d3fa 	srli	r2,r17,15
  8014c8:	12001e04 	addi	r8,r2,120
  8014cc:	11c01dc4 	addi	r7,r2,119
  8014d0:	4209883a 	add	r4,r8,r8
  8014d4:	003e6d06 	br	800e8c <__alt_data_end+0xff800e8c>
  8014d8:	00c40004 	movi	r3,4096
  8014dc:	003f4606 	br	8011f8 <__alt_data_end+0xff8011f8>
  8014e0:	00800044 	movi	r2,1
  8014e4:	a0800115 	stw	r2,4(r20)
  8014e8:	003f7406 	br	8012bc <__alt_data_end+0xff8012bc>
  8014ec:	1805d0ba 	srai	r2,r3,2
  8014f0:	01c00044 	movi	r7,1
  8014f4:	30c00117 	ldw	r3,4(r6)
  8014f8:	388e983a 	sll	r7,r7,r2
  8014fc:	2805883a 	mov	r2,r5
  801500:	38c6b03a 	or	r3,r7,r3
  801504:	30c00115 	stw	r3,4(r6)
  801508:	003f9b06 	br	801378 <__alt_data_end+0xff801378>
  80150c:	00c15504 	movi	r3,1364
  801510:	18801a36 	bltu	r3,r2,80157c <_malloc_r+0x768>
  801514:	8804d4ba 	srli	r2,r17,18
  801518:	12001f44 	addi	r8,r2,125
  80151c:	11c01f04 	addi	r7,r2,124
  801520:	4209883a 	add	r4,r8,r8
  801524:	003e5906 	br	800e8c <__alt_data_end+0xff800e8c>
  801528:	ad400404 	addi	r21,r21,16
  80152c:	003f1706 	br	80118c <__alt_data_end+0xff80118c>
  801530:	00c01504 	movi	r3,84
  801534:	18802336 	bltu	r3,r2,8015c4 <_malloc_r+0x7b0>
  801538:	3804d33a 	srli	r2,r7,12
  80153c:	11401bc4 	addi	r5,r2,111
  801540:	10c01b84 	addi	r3,r2,110
  801544:	294b883a 	add	r5,r5,r5
  801548:	003f7b06 	br	801338 <__alt_data_end+0xff801338>
  80154c:	9c000217 	ldw	r16,8(r19)
  801550:	00bfff04 	movi	r2,-4
  801554:	80c00117 	ldw	r3,4(r16)
  801558:	1886703a 	and	r3,r3,r2
  80155c:	003f5306 	br	8012ac <__alt_data_end+0xff8012ac>
  801560:	3083ffcc 	andi	r2,r6,4095
  801564:	103f181e 	bne	r2,zero,8011c8 <__alt_data_end+0xff8011c8>
  801568:	99000217 	ldw	r4,8(r19)
  80156c:	b545883a 	add	r2,r22,r21
  801570:	10800054 	ori	r2,r2,1
  801574:	20800115 	stw	r2,4(r4)
  801578:	003f3e06 	br	801274 <__alt_data_end+0xff801274>
  80157c:	01003f84 	movi	r4,254
  801580:	02001fc4 	movi	r8,127
  801584:	01c01f84 	movi	r7,126
  801588:	003e4006 	br	800e8c <__alt_data_end+0xff800e8c>
  80158c:	00802034 	movhi	r2,128
  801590:	109cb004 	addi	r2,r2,29376
  801594:	15000015 	stw	r20,0(r2)
  801598:	003f1106 	br	8011e0 <__alt_data_end+0xff8011e0>
  80159c:	00800044 	movi	r2,1
  8015a0:	002b883a 	mov	r21,zero
  8015a4:	003f1f06 	br	801224 <__alt_data_end+0xff801224>
  8015a8:	81400204 	addi	r5,r16,8
  8015ac:	9009883a 	mov	r4,r18
  8015b0:	080289c0 	call	80289c <_free_r>
  8015b4:	00802074 	movhi	r2,129
  8015b8:	10a36204 	addi	r2,r2,-29304
  8015bc:	10c00017 	ldw	r3,0(r2)
  8015c0:	003f2c06 	br	801274 <__alt_data_end+0xff801274>
  8015c4:	00c05504 	movi	r3,340
  8015c8:	18800536 	bltu	r3,r2,8015e0 <_malloc_r+0x7cc>
  8015cc:	3804d3fa 	srli	r2,r7,15
  8015d0:	11401e04 	addi	r5,r2,120
  8015d4:	10c01dc4 	addi	r3,r2,119
  8015d8:	294b883a 	add	r5,r5,r5
  8015dc:	003f5606 	br	801338 <__alt_data_end+0xff801338>
  8015e0:	00c15504 	movi	r3,1364
  8015e4:	18800536 	bltu	r3,r2,8015fc <_malloc_r+0x7e8>
  8015e8:	3804d4ba 	srli	r2,r7,18
  8015ec:	11401f44 	addi	r5,r2,125
  8015f0:	10c01f04 	addi	r3,r2,124
  8015f4:	294b883a 	add	r5,r5,r5
  8015f8:	003f4f06 	br	801338 <__alt_data_end+0xff801338>
  8015fc:	01403f84 	movi	r5,254
  801600:	00c01f84 	movi	r3,126
  801604:	003f4c06 	br	801338 <__alt_data_end+0xff801338>
  801608:	98800117 	ldw	r2,4(r19)
  80160c:	003fa006 	br	801490 <__alt_data_end+0xff801490>
  801610:	8808d0fa 	srli	r4,r17,3
  801614:	20800044 	addi	r2,r4,1
  801618:	1085883a 	add	r2,r2,r2
  80161c:	003e9006 	br	801060 <__alt_data_end+0xff801060>

00801620 <memchr>:
  801620:	208000cc 	andi	r2,r4,3
  801624:	280f883a 	mov	r7,r5
  801628:	10003426 	beq	r2,zero,8016fc <memchr+0xdc>
  80162c:	30bfffc4 	addi	r2,r6,-1
  801630:	30001a26 	beq	r6,zero,80169c <memchr+0x7c>
  801634:	20c00003 	ldbu	r3,0(r4)
  801638:	29803fcc 	andi	r6,r5,255
  80163c:	30c0051e 	bne	r6,r3,801654 <memchr+0x34>
  801640:	00001806 	br	8016a4 <memchr+0x84>
  801644:	10001526 	beq	r2,zero,80169c <memchr+0x7c>
  801648:	20c00003 	ldbu	r3,0(r4)
  80164c:	10bfffc4 	addi	r2,r2,-1
  801650:	30c01426 	beq	r6,r3,8016a4 <memchr+0x84>
  801654:	21000044 	addi	r4,r4,1
  801658:	20c000cc 	andi	r3,r4,3
  80165c:	183ff91e 	bne	r3,zero,801644 <__alt_data_end+0xff801644>
  801660:	020000c4 	movi	r8,3
  801664:	40801136 	bltu	r8,r2,8016ac <memchr+0x8c>
  801668:	10000c26 	beq	r2,zero,80169c <memchr+0x7c>
  80166c:	20c00003 	ldbu	r3,0(r4)
  801670:	29403fcc 	andi	r5,r5,255
  801674:	28c00b26 	beq	r5,r3,8016a4 <memchr+0x84>
  801678:	20c00044 	addi	r3,r4,1
  80167c:	39803fcc 	andi	r6,r7,255
  801680:	2089883a 	add	r4,r4,r2
  801684:	00000306 	br	801694 <memchr+0x74>
  801688:	18c00044 	addi	r3,r3,1
  80168c:	197fffc3 	ldbu	r5,-1(r3)
  801690:	31400526 	beq	r6,r5,8016a8 <memchr+0x88>
  801694:	1805883a 	mov	r2,r3
  801698:	20fffb1e 	bne	r4,r3,801688 <__alt_data_end+0xff801688>
  80169c:	0005883a 	mov	r2,zero
  8016a0:	f800283a 	ret
  8016a4:	2005883a 	mov	r2,r4
  8016a8:	f800283a 	ret
  8016ac:	28c03fcc 	andi	r3,r5,255
  8016b0:	1812923a 	slli	r9,r3,8
  8016b4:	02ffbff4 	movhi	r11,65279
  8016b8:	02a02074 	movhi	r10,32897
  8016bc:	48d2b03a 	or	r9,r9,r3
  8016c0:	4806943a 	slli	r3,r9,16
  8016c4:	5affbfc4 	addi	r11,r11,-257
  8016c8:	52a02004 	addi	r10,r10,-32640
  8016cc:	48d2b03a 	or	r9,r9,r3
  8016d0:	20c00017 	ldw	r3,0(r4)
  8016d4:	48c6f03a 	xor	r3,r9,r3
  8016d8:	1acd883a 	add	r6,r3,r11
  8016dc:	00c6303a 	nor	r3,zero,r3
  8016e0:	30c6703a 	and	r3,r6,r3
  8016e4:	1a86703a 	and	r3,r3,r10
  8016e8:	183fe01e 	bne	r3,zero,80166c <__alt_data_end+0xff80166c>
  8016ec:	10bfff04 	addi	r2,r2,-4
  8016f0:	21000104 	addi	r4,r4,4
  8016f4:	40bff636 	bltu	r8,r2,8016d0 <__alt_data_end+0xff8016d0>
  8016f8:	003fdb06 	br	801668 <__alt_data_end+0xff801668>
  8016fc:	3005883a 	mov	r2,r6
  801700:	003fd706 	br	801660 <__alt_data_end+0xff801660>

00801704 <memcpy>:
  801704:	defffd04 	addi	sp,sp,-12
  801708:	dfc00215 	stw	ra,8(sp)
  80170c:	dc400115 	stw	r17,4(sp)
  801710:	dc000015 	stw	r16,0(sp)
  801714:	00c003c4 	movi	r3,15
  801718:	2005883a 	mov	r2,r4
  80171c:	1980452e 	bgeu	r3,r6,801834 <memcpy+0x130>
  801720:	2906b03a 	or	r3,r5,r4
  801724:	18c000cc 	andi	r3,r3,3
  801728:	1800441e 	bne	r3,zero,80183c <memcpy+0x138>
  80172c:	347ffc04 	addi	r17,r6,-16
  801730:	8822d13a 	srli	r17,r17,4
  801734:	28c00104 	addi	r3,r5,4
  801738:	23400104 	addi	r13,r4,4
  80173c:	8820913a 	slli	r16,r17,4
  801740:	2b000204 	addi	r12,r5,8
  801744:	22c00204 	addi	r11,r4,8
  801748:	84000504 	addi	r16,r16,20
  80174c:	2a800304 	addi	r10,r5,12
  801750:	22400304 	addi	r9,r4,12
  801754:	2c21883a 	add	r16,r5,r16
  801758:	2811883a 	mov	r8,r5
  80175c:	200f883a 	mov	r7,r4
  801760:	41000017 	ldw	r4,0(r8)
  801764:	1fc00017 	ldw	ra,0(r3)
  801768:	63c00017 	ldw	r15,0(r12)
  80176c:	39000015 	stw	r4,0(r7)
  801770:	53800017 	ldw	r14,0(r10)
  801774:	6fc00015 	stw	ra,0(r13)
  801778:	5bc00015 	stw	r15,0(r11)
  80177c:	4b800015 	stw	r14,0(r9)
  801780:	18c00404 	addi	r3,r3,16
  801784:	39c00404 	addi	r7,r7,16
  801788:	42000404 	addi	r8,r8,16
  80178c:	6b400404 	addi	r13,r13,16
  801790:	63000404 	addi	r12,r12,16
  801794:	5ac00404 	addi	r11,r11,16
  801798:	52800404 	addi	r10,r10,16
  80179c:	4a400404 	addi	r9,r9,16
  8017a0:	1c3fef1e 	bne	r3,r16,801760 <__alt_data_end+0xff801760>
  8017a4:	89c00044 	addi	r7,r17,1
  8017a8:	380e913a 	slli	r7,r7,4
  8017ac:	310003cc 	andi	r4,r6,15
  8017b0:	02c000c4 	movi	r11,3
  8017b4:	11c7883a 	add	r3,r2,r7
  8017b8:	29cb883a 	add	r5,r5,r7
  8017bc:	5900212e 	bgeu	r11,r4,801844 <memcpy+0x140>
  8017c0:	1813883a 	mov	r9,r3
  8017c4:	2811883a 	mov	r8,r5
  8017c8:	200f883a 	mov	r7,r4
  8017cc:	42800017 	ldw	r10,0(r8)
  8017d0:	4a400104 	addi	r9,r9,4
  8017d4:	39ffff04 	addi	r7,r7,-4
  8017d8:	4abfff15 	stw	r10,-4(r9)
  8017dc:	42000104 	addi	r8,r8,4
  8017e0:	59fffa36 	bltu	r11,r7,8017cc <__alt_data_end+0xff8017cc>
  8017e4:	213fff04 	addi	r4,r4,-4
  8017e8:	2008d0ba 	srli	r4,r4,2
  8017ec:	318000cc 	andi	r6,r6,3
  8017f0:	21000044 	addi	r4,r4,1
  8017f4:	2109883a 	add	r4,r4,r4
  8017f8:	2109883a 	add	r4,r4,r4
  8017fc:	1907883a 	add	r3,r3,r4
  801800:	290b883a 	add	r5,r5,r4
  801804:	30000626 	beq	r6,zero,801820 <memcpy+0x11c>
  801808:	198d883a 	add	r6,r3,r6
  80180c:	29c00003 	ldbu	r7,0(r5)
  801810:	18c00044 	addi	r3,r3,1
  801814:	29400044 	addi	r5,r5,1
  801818:	19ffffc5 	stb	r7,-1(r3)
  80181c:	19bffb1e 	bne	r3,r6,80180c <__alt_data_end+0xff80180c>
  801820:	dfc00217 	ldw	ra,8(sp)
  801824:	dc400117 	ldw	r17,4(sp)
  801828:	dc000017 	ldw	r16,0(sp)
  80182c:	dec00304 	addi	sp,sp,12
  801830:	f800283a 	ret
  801834:	2007883a 	mov	r3,r4
  801838:	003ff206 	br	801804 <__alt_data_end+0xff801804>
  80183c:	2007883a 	mov	r3,r4
  801840:	003ff106 	br	801808 <__alt_data_end+0xff801808>
  801844:	200d883a 	mov	r6,r4
  801848:	003fee06 	br	801804 <__alt_data_end+0xff801804>

0080184c <memmove>:
  80184c:	2005883a 	mov	r2,r4
  801850:	29000b2e 	bgeu	r5,r4,801880 <memmove+0x34>
  801854:	298f883a 	add	r7,r5,r6
  801858:	21c0092e 	bgeu	r4,r7,801880 <memmove+0x34>
  80185c:	2187883a 	add	r3,r4,r6
  801860:	198bc83a 	sub	r5,r3,r6
  801864:	30004826 	beq	r6,zero,801988 <memmove+0x13c>
  801868:	39ffffc4 	addi	r7,r7,-1
  80186c:	39000003 	ldbu	r4,0(r7)
  801870:	18ffffc4 	addi	r3,r3,-1
  801874:	19000005 	stb	r4,0(r3)
  801878:	28fffb1e 	bne	r5,r3,801868 <__alt_data_end+0xff801868>
  80187c:	f800283a 	ret
  801880:	00c003c4 	movi	r3,15
  801884:	1980412e 	bgeu	r3,r6,80198c <memmove+0x140>
  801888:	2886b03a 	or	r3,r5,r2
  80188c:	18c000cc 	andi	r3,r3,3
  801890:	1800401e 	bne	r3,zero,801994 <memmove+0x148>
  801894:	33fffc04 	addi	r15,r6,-16
  801898:	781ed13a 	srli	r15,r15,4
  80189c:	28c00104 	addi	r3,r5,4
  8018a0:	13400104 	addi	r13,r2,4
  8018a4:	781c913a 	slli	r14,r15,4
  8018a8:	2b000204 	addi	r12,r5,8
  8018ac:	12c00204 	addi	r11,r2,8
  8018b0:	73800504 	addi	r14,r14,20
  8018b4:	2a800304 	addi	r10,r5,12
  8018b8:	12400304 	addi	r9,r2,12
  8018bc:	2b9d883a 	add	r14,r5,r14
  8018c0:	2811883a 	mov	r8,r5
  8018c4:	100f883a 	mov	r7,r2
  8018c8:	41000017 	ldw	r4,0(r8)
  8018cc:	39c00404 	addi	r7,r7,16
  8018d0:	18c00404 	addi	r3,r3,16
  8018d4:	393ffc15 	stw	r4,-16(r7)
  8018d8:	193ffc17 	ldw	r4,-16(r3)
  8018dc:	6b400404 	addi	r13,r13,16
  8018e0:	5ac00404 	addi	r11,r11,16
  8018e4:	693ffc15 	stw	r4,-16(r13)
  8018e8:	61000017 	ldw	r4,0(r12)
  8018ec:	4a400404 	addi	r9,r9,16
  8018f0:	42000404 	addi	r8,r8,16
  8018f4:	593ffc15 	stw	r4,-16(r11)
  8018f8:	51000017 	ldw	r4,0(r10)
  8018fc:	63000404 	addi	r12,r12,16
  801900:	52800404 	addi	r10,r10,16
  801904:	493ffc15 	stw	r4,-16(r9)
  801908:	1bbfef1e 	bne	r3,r14,8018c8 <__alt_data_end+0xff8018c8>
  80190c:	79000044 	addi	r4,r15,1
  801910:	2008913a 	slli	r4,r4,4
  801914:	328003cc 	andi	r10,r6,15
  801918:	02c000c4 	movi	r11,3
  80191c:	1107883a 	add	r3,r2,r4
  801920:	290b883a 	add	r5,r5,r4
  801924:	5a801e2e 	bgeu	r11,r10,8019a0 <memmove+0x154>
  801928:	1813883a 	mov	r9,r3
  80192c:	2811883a 	mov	r8,r5
  801930:	500f883a 	mov	r7,r10
  801934:	41000017 	ldw	r4,0(r8)
  801938:	4a400104 	addi	r9,r9,4
  80193c:	39ffff04 	addi	r7,r7,-4
  801940:	493fff15 	stw	r4,-4(r9)
  801944:	42000104 	addi	r8,r8,4
  801948:	59fffa36 	bltu	r11,r7,801934 <__alt_data_end+0xff801934>
  80194c:	513fff04 	addi	r4,r10,-4
  801950:	2008d0ba 	srli	r4,r4,2
  801954:	318000cc 	andi	r6,r6,3
  801958:	21000044 	addi	r4,r4,1
  80195c:	2109883a 	add	r4,r4,r4
  801960:	2109883a 	add	r4,r4,r4
  801964:	1907883a 	add	r3,r3,r4
  801968:	290b883a 	add	r5,r5,r4
  80196c:	30000b26 	beq	r6,zero,80199c <memmove+0x150>
  801970:	198d883a 	add	r6,r3,r6
  801974:	29c00003 	ldbu	r7,0(r5)
  801978:	18c00044 	addi	r3,r3,1
  80197c:	29400044 	addi	r5,r5,1
  801980:	19ffffc5 	stb	r7,-1(r3)
  801984:	19bffb1e 	bne	r3,r6,801974 <__alt_data_end+0xff801974>
  801988:	f800283a 	ret
  80198c:	1007883a 	mov	r3,r2
  801990:	003ff606 	br	80196c <__alt_data_end+0xff80196c>
  801994:	1007883a 	mov	r3,r2
  801998:	003ff506 	br	801970 <__alt_data_end+0xff801970>
  80199c:	f800283a 	ret
  8019a0:	500d883a 	mov	r6,r10
  8019a4:	003ff106 	br	80196c <__alt_data_end+0xff80196c>

008019a8 <memset>:
  8019a8:	20c000cc 	andi	r3,r4,3
  8019ac:	2005883a 	mov	r2,r4
  8019b0:	18004426 	beq	r3,zero,801ac4 <memset+0x11c>
  8019b4:	31ffffc4 	addi	r7,r6,-1
  8019b8:	30004026 	beq	r6,zero,801abc <memset+0x114>
  8019bc:	2813883a 	mov	r9,r5
  8019c0:	200d883a 	mov	r6,r4
  8019c4:	2007883a 	mov	r3,r4
  8019c8:	00000406 	br	8019dc <memset+0x34>
  8019cc:	3a3fffc4 	addi	r8,r7,-1
  8019d0:	31800044 	addi	r6,r6,1
  8019d4:	38003926 	beq	r7,zero,801abc <memset+0x114>
  8019d8:	400f883a 	mov	r7,r8
  8019dc:	18c00044 	addi	r3,r3,1
  8019e0:	32400005 	stb	r9,0(r6)
  8019e4:	1a0000cc 	andi	r8,r3,3
  8019e8:	403ff81e 	bne	r8,zero,8019cc <__alt_data_end+0xff8019cc>
  8019ec:	010000c4 	movi	r4,3
  8019f0:	21c02d2e 	bgeu	r4,r7,801aa8 <memset+0x100>
  8019f4:	29003fcc 	andi	r4,r5,255
  8019f8:	200c923a 	slli	r6,r4,8
  8019fc:	3108b03a 	or	r4,r6,r4
  801a00:	200c943a 	slli	r6,r4,16
  801a04:	218cb03a 	or	r6,r4,r6
  801a08:	010003c4 	movi	r4,15
  801a0c:	21c0182e 	bgeu	r4,r7,801a70 <memset+0xc8>
  801a10:	3b3ffc04 	addi	r12,r7,-16
  801a14:	6018d13a 	srli	r12,r12,4
  801a18:	1a000104 	addi	r8,r3,4
  801a1c:	1ac00204 	addi	r11,r3,8
  801a20:	6008913a 	slli	r4,r12,4
  801a24:	1a800304 	addi	r10,r3,12
  801a28:	1813883a 	mov	r9,r3
  801a2c:	21000504 	addi	r4,r4,20
  801a30:	1909883a 	add	r4,r3,r4
  801a34:	49800015 	stw	r6,0(r9)
  801a38:	41800015 	stw	r6,0(r8)
  801a3c:	59800015 	stw	r6,0(r11)
  801a40:	51800015 	stw	r6,0(r10)
  801a44:	42000404 	addi	r8,r8,16
  801a48:	4a400404 	addi	r9,r9,16
  801a4c:	5ac00404 	addi	r11,r11,16
  801a50:	52800404 	addi	r10,r10,16
  801a54:	413ff71e 	bne	r8,r4,801a34 <__alt_data_end+0xff801a34>
  801a58:	63000044 	addi	r12,r12,1
  801a5c:	6018913a 	slli	r12,r12,4
  801a60:	39c003cc 	andi	r7,r7,15
  801a64:	010000c4 	movi	r4,3
  801a68:	1b07883a 	add	r3,r3,r12
  801a6c:	21c00e2e 	bgeu	r4,r7,801aa8 <memset+0x100>
  801a70:	1813883a 	mov	r9,r3
  801a74:	3811883a 	mov	r8,r7
  801a78:	010000c4 	movi	r4,3
  801a7c:	49800015 	stw	r6,0(r9)
  801a80:	423fff04 	addi	r8,r8,-4
  801a84:	4a400104 	addi	r9,r9,4
  801a88:	223ffc36 	bltu	r4,r8,801a7c <__alt_data_end+0xff801a7c>
  801a8c:	393fff04 	addi	r4,r7,-4
  801a90:	2008d0ba 	srli	r4,r4,2
  801a94:	39c000cc 	andi	r7,r7,3
  801a98:	21000044 	addi	r4,r4,1
  801a9c:	2109883a 	add	r4,r4,r4
  801aa0:	2109883a 	add	r4,r4,r4
  801aa4:	1907883a 	add	r3,r3,r4
  801aa8:	38000526 	beq	r7,zero,801ac0 <memset+0x118>
  801aac:	19cf883a 	add	r7,r3,r7
  801ab0:	19400005 	stb	r5,0(r3)
  801ab4:	18c00044 	addi	r3,r3,1
  801ab8:	38fffd1e 	bne	r7,r3,801ab0 <__alt_data_end+0xff801ab0>
  801abc:	f800283a 	ret
  801ac0:	f800283a 	ret
  801ac4:	2007883a 	mov	r3,r4
  801ac8:	300f883a 	mov	r7,r6
  801acc:	003fc706 	br	8019ec <__alt_data_end+0xff8019ec>

00801ad0 <_realloc_r>:
  801ad0:	defff604 	addi	sp,sp,-40
  801ad4:	dc800215 	stw	r18,8(sp)
  801ad8:	dfc00915 	stw	ra,36(sp)
  801adc:	df000815 	stw	fp,32(sp)
  801ae0:	ddc00715 	stw	r23,28(sp)
  801ae4:	dd800615 	stw	r22,24(sp)
  801ae8:	dd400515 	stw	r21,20(sp)
  801aec:	dd000415 	stw	r20,16(sp)
  801af0:	dcc00315 	stw	r19,12(sp)
  801af4:	dc400115 	stw	r17,4(sp)
  801af8:	dc000015 	stw	r16,0(sp)
  801afc:	3025883a 	mov	r18,r6
  801b00:	2800b726 	beq	r5,zero,801de0 <_realloc_r+0x310>
  801b04:	282b883a 	mov	r21,r5
  801b08:	2029883a 	mov	r20,r4
  801b0c:	08036080 	call	803608 <__malloc_lock>
  801b10:	a8bfff17 	ldw	r2,-4(r21)
  801b14:	043fff04 	movi	r16,-4
  801b18:	90c002c4 	addi	r3,r18,11
  801b1c:	01000584 	movi	r4,22
  801b20:	acfffe04 	addi	r19,r21,-8
  801b24:	1420703a 	and	r16,r2,r16
  801b28:	20c0332e 	bgeu	r4,r3,801bf8 <_realloc_r+0x128>
  801b2c:	047ffe04 	movi	r17,-8
  801b30:	1c62703a 	and	r17,r3,r17
  801b34:	8807883a 	mov	r3,r17
  801b38:	88005816 	blt	r17,zero,801c9c <_realloc_r+0x1cc>
  801b3c:	8c805736 	bltu	r17,r18,801c9c <_realloc_r+0x1cc>
  801b40:	80c0300e 	bge	r16,r3,801c04 <_realloc_r+0x134>
  801b44:	07002034 	movhi	fp,128
  801b48:	e7172a04 	addi	fp,fp,23720
  801b4c:	e1c00217 	ldw	r7,8(fp)
  801b50:	9c09883a 	add	r4,r19,r16
  801b54:	22000117 	ldw	r8,4(r4)
  801b58:	21c06326 	beq	r4,r7,801ce8 <_realloc_r+0x218>
  801b5c:	017fff84 	movi	r5,-2
  801b60:	414a703a 	and	r5,r8,r5
  801b64:	214b883a 	add	r5,r4,r5
  801b68:	29800117 	ldw	r6,4(r5)
  801b6c:	3180004c 	andi	r6,r6,1
  801b70:	30003f26 	beq	r6,zero,801c70 <_realloc_r+0x1a0>
  801b74:	1080004c 	andi	r2,r2,1
  801b78:	10008326 	beq	r2,zero,801d88 <_realloc_r+0x2b8>
  801b7c:	900b883a 	mov	r5,r18
  801b80:	a009883a 	mov	r4,r20
  801b84:	0800e140 	call	800e14 <_malloc_r>
  801b88:	1025883a 	mov	r18,r2
  801b8c:	10011e26 	beq	r2,zero,802008 <_realloc_r+0x538>
  801b90:	a93fff17 	ldw	r4,-4(r21)
  801b94:	10fffe04 	addi	r3,r2,-8
  801b98:	00bfff84 	movi	r2,-2
  801b9c:	2084703a 	and	r2,r4,r2
  801ba0:	9885883a 	add	r2,r19,r2
  801ba4:	1880ee26 	beq	r3,r2,801f60 <_realloc_r+0x490>
  801ba8:	81bfff04 	addi	r6,r16,-4
  801bac:	00800904 	movi	r2,36
  801bb0:	1180b836 	bltu	r2,r6,801e94 <_realloc_r+0x3c4>
  801bb4:	00c004c4 	movi	r3,19
  801bb8:	19809636 	bltu	r3,r6,801e14 <_realloc_r+0x344>
  801bbc:	9005883a 	mov	r2,r18
  801bc0:	a807883a 	mov	r3,r21
  801bc4:	19000017 	ldw	r4,0(r3)
  801bc8:	11000015 	stw	r4,0(r2)
  801bcc:	19000117 	ldw	r4,4(r3)
  801bd0:	11000115 	stw	r4,4(r2)
  801bd4:	18c00217 	ldw	r3,8(r3)
  801bd8:	10c00215 	stw	r3,8(r2)
  801bdc:	a80b883a 	mov	r5,r21
  801be0:	a009883a 	mov	r4,r20
  801be4:	080289c0 	call	80289c <_free_r>
  801be8:	a009883a 	mov	r4,r20
  801bec:	080362c0 	call	80362c <__malloc_unlock>
  801bf0:	9005883a 	mov	r2,r18
  801bf4:	00001206 	br	801c40 <_realloc_r+0x170>
  801bf8:	00c00404 	movi	r3,16
  801bfc:	1823883a 	mov	r17,r3
  801c00:	003fce06 	br	801b3c <__alt_data_end+0xff801b3c>
  801c04:	a825883a 	mov	r18,r21
  801c08:	8445c83a 	sub	r2,r16,r17
  801c0c:	00c003c4 	movi	r3,15
  801c10:	18802636 	bltu	r3,r2,801cac <_realloc_r+0x1dc>
  801c14:	99800117 	ldw	r6,4(r19)
  801c18:	9c07883a 	add	r3,r19,r16
  801c1c:	3180004c 	andi	r6,r6,1
  801c20:	3420b03a 	or	r16,r6,r16
  801c24:	9c000115 	stw	r16,4(r19)
  801c28:	18800117 	ldw	r2,4(r3)
  801c2c:	10800054 	ori	r2,r2,1
  801c30:	18800115 	stw	r2,4(r3)
  801c34:	a009883a 	mov	r4,r20
  801c38:	080362c0 	call	80362c <__malloc_unlock>
  801c3c:	9005883a 	mov	r2,r18
  801c40:	dfc00917 	ldw	ra,36(sp)
  801c44:	df000817 	ldw	fp,32(sp)
  801c48:	ddc00717 	ldw	r23,28(sp)
  801c4c:	dd800617 	ldw	r22,24(sp)
  801c50:	dd400517 	ldw	r21,20(sp)
  801c54:	dd000417 	ldw	r20,16(sp)
  801c58:	dcc00317 	ldw	r19,12(sp)
  801c5c:	dc800217 	ldw	r18,8(sp)
  801c60:	dc400117 	ldw	r17,4(sp)
  801c64:	dc000017 	ldw	r16,0(sp)
  801c68:	dec00a04 	addi	sp,sp,40
  801c6c:	f800283a 	ret
  801c70:	017fff04 	movi	r5,-4
  801c74:	414a703a 	and	r5,r8,r5
  801c78:	814d883a 	add	r6,r16,r5
  801c7c:	30c01f16 	blt	r6,r3,801cfc <_realloc_r+0x22c>
  801c80:	20800317 	ldw	r2,12(r4)
  801c84:	20c00217 	ldw	r3,8(r4)
  801c88:	a825883a 	mov	r18,r21
  801c8c:	3021883a 	mov	r16,r6
  801c90:	18800315 	stw	r2,12(r3)
  801c94:	10c00215 	stw	r3,8(r2)
  801c98:	003fdb06 	br	801c08 <__alt_data_end+0xff801c08>
  801c9c:	00800304 	movi	r2,12
  801ca0:	a0800015 	stw	r2,0(r20)
  801ca4:	0005883a 	mov	r2,zero
  801ca8:	003fe506 	br	801c40 <__alt_data_end+0xff801c40>
  801cac:	98c00117 	ldw	r3,4(r19)
  801cb0:	9c4b883a 	add	r5,r19,r17
  801cb4:	11000054 	ori	r4,r2,1
  801cb8:	18c0004c 	andi	r3,r3,1
  801cbc:	1c62b03a 	or	r17,r3,r17
  801cc0:	9c400115 	stw	r17,4(r19)
  801cc4:	29000115 	stw	r4,4(r5)
  801cc8:	2885883a 	add	r2,r5,r2
  801ccc:	10c00117 	ldw	r3,4(r2)
  801cd0:	29400204 	addi	r5,r5,8
  801cd4:	a009883a 	mov	r4,r20
  801cd8:	18c00054 	ori	r3,r3,1
  801cdc:	10c00115 	stw	r3,4(r2)
  801ce0:	080289c0 	call	80289c <_free_r>
  801ce4:	003fd306 	br	801c34 <__alt_data_end+0xff801c34>
  801ce8:	017fff04 	movi	r5,-4
  801cec:	414a703a 	and	r5,r8,r5
  801cf0:	89800404 	addi	r6,r17,16
  801cf4:	8151883a 	add	r8,r16,r5
  801cf8:	4180590e 	bge	r8,r6,801e60 <_realloc_r+0x390>
  801cfc:	1080004c 	andi	r2,r2,1
  801d00:	103f9e1e 	bne	r2,zero,801b7c <__alt_data_end+0xff801b7c>
  801d04:	adbffe17 	ldw	r22,-8(r21)
  801d08:	00bfff04 	movi	r2,-4
  801d0c:	9dadc83a 	sub	r22,r19,r22
  801d10:	b1800117 	ldw	r6,4(r22)
  801d14:	3084703a 	and	r2,r6,r2
  801d18:	20002026 	beq	r4,zero,801d9c <_realloc_r+0x2cc>
  801d1c:	80af883a 	add	r23,r16,r2
  801d20:	b96f883a 	add	r23,r23,r5
  801d24:	21c05f26 	beq	r4,r7,801ea4 <_realloc_r+0x3d4>
  801d28:	b8c01c16 	blt	r23,r3,801d9c <_realloc_r+0x2cc>
  801d2c:	20800317 	ldw	r2,12(r4)
  801d30:	20c00217 	ldw	r3,8(r4)
  801d34:	81bfff04 	addi	r6,r16,-4
  801d38:	01000904 	movi	r4,36
  801d3c:	18800315 	stw	r2,12(r3)
  801d40:	10c00215 	stw	r3,8(r2)
  801d44:	b0c00217 	ldw	r3,8(r22)
  801d48:	b0800317 	ldw	r2,12(r22)
  801d4c:	b4800204 	addi	r18,r22,8
  801d50:	18800315 	stw	r2,12(r3)
  801d54:	10c00215 	stw	r3,8(r2)
  801d58:	21801b36 	bltu	r4,r6,801dc8 <_realloc_r+0x2f8>
  801d5c:	008004c4 	movi	r2,19
  801d60:	1180352e 	bgeu	r2,r6,801e38 <_realloc_r+0x368>
  801d64:	a8800017 	ldw	r2,0(r21)
  801d68:	b0800215 	stw	r2,8(r22)
  801d6c:	a8800117 	ldw	r2,4(r21)
  801d70:	b0800315 	stw	r2,12(r22)
  801d74:	008006c4 	movi	r2,27
  801d78:	11807f36 	bltu	r2,r6,801f78 <_realloc_r+0x4a8>
  801d7c:	b0800404 	addi	r2,r22,16
  801d80:	ad400204 	addi	r21,r21,8
  801d84:	00002d06 	br	801e3c <_realloc_r+0x36c>
  801d88:	adbffe17 	ldw	r22,-8(r21)
  801d8c:	00bfff04 	movi	r2,-4
  801d90:	9dadc83a 	sub	r22,r19,r22
  801d94:	b1000117 	ldw	r4,4(r22)
  801d98:	2084703a 	and	r2,r4,r2
  801d9c:	b03f7726 	beq	r22,zero,801b7c <__alt_data_end+0xff801b7c>
  801da0:	80af883a 	add	r23,r16,r2
  801da4:	b8ff7516 	blt	r23,r3,801b7c <__alt_data_end+0xff801b7c>
  801da8:	b0800317 	ldw	r2,12(r22)
  801dac:	b0c00217 	ldw	r3,8(r22)
  801db0:	81bfff04 	addi	r6,r16,-4
  801db4:	01000904 	movi	r4,36
  801db8:	18800315 	stw	r2,12(r3)
  801dbc:	10c00215 	stw	r3,8(r2)
  801dc0:	b4800204 	addi	r18,r22,8
  801dc4:	21bfe52e 	bgeu	r4,r6,801d5c <__alt_data_end+0xff801d5c>
  801dc8:	a80b883a 	mov	r5,r21
  801dcc:	9009883a 	mov	r4,r18
  801dd0:	080184c0 	call	80184c <memmove>
  801dd4:	b821883a 	mov	r16,r23
  801dd8:	b027883a 	mov	r19,r22
  801ddc:	003f8a06 	br	801c08 <__alt_data_end+0xff801c08>
  801de0:	300b883a 	mov	r5,r6
  801de4:	dfc00917 	ldw	ra,36(sp)
  801de8:	df000817 	ldw	fp,32(sp)
  801dec:	ddc00717 	ldw	r23,28(sp)
  801df0:	dd800617 	ldw	r22,24(sp)
  801df4:	dd400517 	ldw	r21,20(sp)
  801df8:	dd000417 	ldw	r20,16(sp)
  801dfc:	dcc00317 	ldw	r19,12(sp)
  801e00:	dc800217 	ldw	r18,8(sp)
  801e04:	dc400117 	ldw	r17,4(sp)
  801e08:	dc000017 	ldw	r16,0(sp)
  801e0c:	dec00a04 	addi	sp,sp,40
  801e10:	0800e141 	jmpi	800e14 <_malloc_r>
  801e14:	a8c00017 	ldw	r3,0(r21)
  801e18:	90c00015 	stw	r3,0(r18)
  801e1c:	a8c00117 	ldw	r3,4(r21)
  801e20:	90c00115 	stw	r3,4(r18)
  801e24:	00c006c4 	movi	r3,27
  801e28:	19804536 	bltu	r3,r6,801f40 <_realloc_r+0x470>
  801e2c:	90800204 	addi	r2,r18,8
  801e30:	a8c00204 	addi	r3,r21,8
  801e34:	003f6306 	br	801bc4 <__alt_data_end+0xff801bc4>
  801e38:	9005883a 	mov	r2,r18
  801e3c:	a8c00017 	ldw	r3,0(r21)
  801e40:	b821883a 	mov	r16,r23
  801e44:	b027883a 	mov	r19,r22
  801e48:	10c00015 	stw	r3,0(r2)
  801e4c:	a8c00117 	ldw	r3,4(r21)
  801e50:	10c00115 	stw	r3,4(r2)
  801e54:	a8c00217 	ldw	r3,8(r21)
  801e58:	10c00215 	stw	r3,8(r2)
  801e5c:	003f6a06 	br	801c08 <__alt_data_end+0xff801c08>
  801e60:	9c67883a 	add	r19,r19,r17
  801e64:	4445c83a 	sub	r2,r8,r17
  801e68:	e4c00215 	stw	r19,8(fp)
  801e6c:	10800054 	ori	r2,r2,1
  801e70:	98800115 	stw	r2,4(r19)
  801e74:	a8bfff17 	ldw	r2,-4(r21)
  801e78:	a009883a 	mov	r4,r20
  801e7c:	1080004c 	andi	r2,r2,1
  801e80:	1462b03a 	or	r17,r2,r17
  801e84:	ac7fff15 	stw	r17,-4(r21)
  801e88:	080362c0 	call	80362c <__malloc_unlock>
  801e8c:	a805883a 	mov	r2,r21
  801e90:	003f6b06 	br	801c40 <__alt_data_end+0xff801c40>
  801e94:	a80b883a 	mov	r5,r21
  801e98:	9009883a 	mov	r4,r18
  801e9c:	080184c0 	call	80184c <memmove>
  801ea0:	003f4e06 	br	801bdc <__alt_data_end+0xff801bdc>
  801ea4:	89000404 	addi	r4,r17,16
  801ea8:	b93fbc16 	blt	r23,r4,801d9c <__alt_data_end+0xff801d9c>
  801eac:	b0800317 	ldw	r2,12(r22)
  801eb0:	b0c00217 	ldw	r3,8(r22)
  801eb4:	81bfff04 	addi	r6,r16,-4
  801eb8:	01000904 	movi	r4,36
  801ebc:	18800315 	stw	r2,12(r3)
  801ec0:	10c00215 	stw	r3,8(r2)
  801ec4:	b4800204 	addi	r18,r22,8
  801ec8:	21804336 	bltu	r4,r6,801fd8 <_realloc_r+0x508>
  801ecc:	008004c4 	movi	r2,19
  801ed0:	11803f2e 	bgeu	r2,r6,801fd0 <_realloc_r+0x500>
  801ed4:	a8800017 	ldw	r2,0(r21)
  801ed8:	b0800215 	stw	r2,8(r22)
  801edc:	a8800117 	ldw	r2,4(r21)
  801ee0:	b0800315 	stw	r2,12(r22)
  801ee4:	008006c4 	movi	r2,27
  801ee8:	11803f36 	bltu	r2,r6,801fe8 <_realloc_r+0x518>
  801eec:	b0800404 	addi	r2,r22,16
  801ef0:	ad400204 	addi	r21,r21,8
  801ef4:	a8c00017 	ldw	r3,0(r21)
  801ef8:	10c00015 	stw	r3,0(r2)
  801efc:	a8c00117 	ldw	r3,4(r21)
  801f00:	10c00115 	stw	r3,4(r2)
  801f04:	a8c00217 	ldw	r3,8(r21)
  801f08:	10c00215 	stw	r3,8(r2)
  801f0c:	b447883a 	add	r3,r22,r17
  801f10:	bc45c83a 	sub	r2,r23,r17
  801f14:	e0c00215 	stw	r3,8(fp)
  801f18:	10800054 	ori	r2,r2,1
  801f1c:	18800115 	stw	r2,4(r3)
  801f20:	b0800117 	ldw	r2,4(r22)
  801f24:	a009883a 	mov	r4,r20
  801f28:	1080004c 	andi	r2,r2,1
  801f2c:	1462b03a 	or	r17,r2,r17
  801f30:	b4400115 	stw	r17,4(r22)
  801f34:	080362c0 	call	80362c <__malloc_unlock>
  801f38:	9005883a 	mov	r2,r18
  801f3c:	003f4006 	br	801c40 <__alt_data_end+0xff801c40>
  801f40:	a8c00217 	ldw	r3,8(r21)
  801f44:	90c00215 	stw	r3,8(r18)
  801f48:	a8c00317 	ldw	r3,12(r21)
  801f4c:	90c00315 	stw	r3,12(r18)
  801f50:	30801126 	beq	r6,r2,801f98 <_realloc_r+0x4c8>
  801f54:	90800404 	addi	r2,r18,16
  801f58:	a8c00404 	addi	r3,r21,16
  801f5c:	003f1906 	br	801bc4 <__alt_data_end+0xff801bc4>
  801f60:	90ffff17 	ldw	r3,-4(r18)
  801f64:	00bfff04 	movi	r2,-4
  801f68:	a825883a 	mov	r18,r21
  801f6c:	1884703a 	and	r2,r3,r2
  801f70:	80a1883a 	add	r16,r16,r2
  801f74:	003f2406 	br	801c08 <__alt_data_end+0xff801c08>
  801f78:	a8800217 	ldw	r2,8(r21)
  801f7c:	b0800415 	stw	r2,16(r22)
  801f80:	a8800317 	ldw	r2,12(r21)
  801f84:	b0800515 	stw	r2,20(r22)
  801f88:	31000a26 	beq	r6,r4,801fb4 <_realloc_r+0x4e4>
  801f8c:	b0800604 	addi	r2,r22,24
  801f90:	ad400404 	addi	r21,r21,16
  801f94:	003fa906 	br	801e3c <__alt_data_end+0xff801e3c>
  801f98:	a9000417 	ldw	r4,16(r21)
  801f9c:	90800604 	addi	r2,r18,24
  801fa0:	a8c00604 	addi	r3,r21,24
  801fa4:	91000415 	stw	r4,16(r18)
  801fa8:	a9000517 	ldw	r4,20(r21)
  801fac:	91000515 	stw	r4,20(r18)
  801fb0:	003f0406 	br	801bc4 <__alt_data_end+0xff801bc4>
  801fb4:	a8c00417 	ldw	r3,16(r21)
  801fb8:	ad400604 	addi	r21,r21,24
  801fbc:	b0800804 	addi	r2,r22,32
  801fc0:	b0c00615 	stw	r3,24(r22)
  801fc4:	a8ffff17 	ldw	r3,-4(r21)
  801fc8:	b0c00715 	stw	r3,28(r22)
  801fcc:	003f9b06 	br	801e3c <__alt_data_end+0xff801e3c>
  801fd0:	9005883a 	mov	r2,r18
  801fd4:	003fc706 	br	801ef4 <__alt_data_end+0xff801ef4>
  801fd8:	a80b883a 	mov	r5,r21
  801fdc:	9009883a 	mov	r4,r18
  801fe0:	080184c0 	call	80184c <memmove>
  801fe4:	003fc906 	br	801f0c <__alt_data_end+0xff801f0c>
  801fe8:	a8800217 	ldw	r2,8(r21)
  801fec:	b0800415 	stw	r2,16(r22)
  801ff0:	a8800317 	ldw	r2,12(r21)
  801ff4:	b0800515 	stw	r2,20(r22)
  801ff8:	31000726 	beq	r6,r4,802018 <_realloc_r+0x548>
  801ffc:	b0800604 	addi	r2,r22,24
  802000:	ad400404 	addi	r21,r21,16
  802004:	003fbb06 	br	801ef4 <__alt_data_end+0xff801ef4>
  802008:	a009883a 	mov	r4,r20
  80200c:	080362c0 	call	80362c <__malloc_unlock>
  802010:	0005883a 	mov	r2,zero
  802014:	003f0a06 	br	801c40 <__alt_data_end+0xff801c40>
  802018:	a8c00417 	ldw	r3,16(r21)
  80201c:	ad400604 	addi	r21,r21,24
  802020:	b0800804 	addi	r2,r22,32
  802024:	b0c00615 	stw	r3,24(r22)
  802028:	a8ffff17 	ldw	r3,-4(r21)
  80202c:	b0c00715 	stw	r3,28(r22)
  802030:	003fb006 	br	801ef4 <__alt_data_end+0xff801ef4>

00802034 <_sbrk_r>:
  802034:	defffd04 	addi	sp,sp,-12
  802038:	dc000015 	stw	r16,0(sp)
  80203c:	04002074 	movhi	r16,129
  802040:	dc400115 	stw	r17,4(sp)
  802044:	84235a04 	addi	r16,r16,-29336
  802048:	2023883a 	mov	r17,r4
  80204c:	2809883a 	mov	r4,r5
  802050:	dfc00215 	stw	ra,8(sp)
  802054:	80000015 	stw	zero,0(r16)
  802058:	08037ec0 	call	8037ec <sbrk>
  80205c:	00ffffc4 	movi	r3,-1
  802060:	10c00526 	beq	r2,r3,802078 <_sbrk_r+0x44>
  802064:	dfc00217 	ldw	ra,8(sp)
  802068:	dc400117 	ldw	r17,4(sp)
  80206c:	dc000017 	ldw	r16,0(sp)
  802070:	dec00304 	addi	sp,sp,12
  802074:	f800283a 	ret
  802078:	80c00017 	ldw	r3,0(r16)
  80207c:	183ff926 	beq	r3,zero,802064 <__alt_data_end+0xff802064>
  802080:	88c00015 	stw	r3,0(r17)
  802084:	003ff706 	br	802064 <__alt_data_end+0xff802064>

00802088 <__sread>:
  802088:	defffe04 	addi	sp,sp,-8
  80208c:	dc000015 	stw	r16,0(sp)
  802090:	2821883a 	mov	r16,r5
  802094:	2940038f 	ldh	r5,14(r5)
  802098:	dfc00115 	stw	ra,4(sp)
  80209c:	0802dc80 	call	802dc8 <_read_r>
  8020a0:	10000716 	blt	r2,zero,8020c0 <__sread+0x38>
  8020a4:	80c01417 	ldw	r3,80(r16)
  8020a8:	1887883a 	add	r3,r3,r2
  8020ac:	80c01415 	stw	r3,80(r16)
  8020b0:	dfc00117 	ldw	ra,4(sp)
  8020b4:	dc000017 	ldw	r16,0(sp)
  8020b8:	dec00204 	addi	sp,sp,8
  8020bc:	f800283a 	ret
  8020c0:	80c0030b 	ldhu	r3,12(r16)
  8020c4:	18fbffcc 	andi	r3,r3,61439
  8020c8:	80c0030d 	sth	r3,12(r16)
  8020cc:	dfc00117 	ldw	ra,4(sp)
  8020d0:	dc000017 	ldw	r16,0(sp)
  8020d4:	dec00204 	addi	sp,sp,8
  8020d8:	f800283a 	ret

008020dc <__seofread>:
  8020dc:	0005883a 	mov	r2,zero
  8020e0:	f800283a 	ret

008020e4 <__swrite>:
  8020e4:	2880030b 	ldhu	r2,12(r5)
  8020e8:	defffb04 	addi	sp,sp,-20
  8020ec:	dcc00315 	stw	r19,12(sp)
  8020f0:	dc800215 	stw	r18,8(sp)
  8020f4:	dc400115 	stw	r17,4(sp)
  8020f8:	dc000015 	stw	r16,0(sp)
  8020fc:	dfc00415 	stw	ra,16(sp)
  802100:	10c0400c 	andi	r3,r2,256
  802104:	2821883a 	mov	r16,r5
  802108:	2023883a 	mov	r17,r4
  80210c:	3025883a 	mov	r18,r6
  802110:	3827883a 	mov	r19,r7
  802114:	18000526 	beq	r3,zero,80212c <__swrite+0x48>
  802118:	2940038f 	ldh	r5,14(r5)
  80211c:	01c00084 	movi	r7,2
  802120:	000d883a 	mov	r6,zero
  802124:	0802bac0 	call	802bac <_lseek_r>
  802128:	8080030b 	ldhu	r2,12(r16)
  80212c:	8140038f 	ldh	r5,14(r16)
  802130:	10bbffcc 	andi	r2,r2,61439
  802134:	980f883a 	mov	r7,r19
  802138:	900d883a 	mov	r6,r18
  80213c:	8809883a 	mov	r4,r17
  802140:	8080030d 	sth	r2,12(r16)
  802144:	dfc00417 	ldw	ra,16(sp)
  802148:	dcc00317 	ldw	r19,12(sp)
  80214c:	dc800217 	ldw	r18,8(sp)
  802150:	dc400117 	ldw	r17,4(sp)
  802154:	dc000017 	ldw	r16,0(sp)
  802158:	dec00504 	addi	sp,sp,20
  80215c:	08021c41 	jmpi	8021c4 <_write_r>

00802160 <__sseek>:
  802160:	defffe04 	addi	sp,sp,-8
  802164:	dc000015 	stw	r16,0(sp)
  802168:	2821883a 	mov	r16,r5
  80216c:	2940038f 	ldh	r5,14(r5)
  802170:	dfc00115 	stw	ra,4(sp)
  802174:	0802bac0 	call	802bac <_lseek_r>
  802178:	00ffffc4 	movi	r3,-1
  80217c:	10c00826 	beq	r2,r3,8021a0 <__sseek+0x40>
  802180:	80c0030b 	ldhu	r3,12(r16)
  802184:	80801415 	stw	r2,80(r16)
  802188:	18c40014 	ori	r3,r3,4096
  80218c:	80c0030d 	sth	r3,12(r16)
  802190:	dfc00117 	ldw	ra,4(sp)
  802194:	dc000017 	ldw	r16,0(sp)
  802198:	dec00204 	addi	sp,sp,8
  80219c:	f800283a 	ret
  8021a0:	80c0030b 	ldhu	r3,12(r16)
  8021a4:	18fbffcc 	andi	r3,r3,61439
  8021a8:	80c0030d 	sth	r3,12(r16)
  8021ac:	dfc00117 	ldw	ra,4(sp)
  8021b0:	dc000017 	ldw	r16,0(sp)
  8021b4:	dec00204 	addi	sp,sp,8
  8021b8:	f800283a 	ret

008021bc <__sclose>:
  8021bc:	2940038f 	ldh	r5,14(r5)
  8021c0:	08023781 	jmpi	802378 <_close_r>

008021c4 <_write_r>:
  8021c4:	defffd04 	addi	sp,sp,-12
  8021c8:	2805883a 	mov	r2,r5
  8021cc:	dc000015 	stw	r16,0(sp)
  8021d0:	04002074 	movhi	r16,129
  8021d4:	dc400115 	stw	r17,4(sp)
  8021d8:	300b883a 	mov	r5,r6
  8021dc:	84235a04 	addi	r16,r16,-29336
  8021e0:	2023883a 	mov	r17,r4
  8021e4:	380d883a 	mov	r6,r7
  8021e8:	1009883a 	mov	r4,r2
  8021ec:	dfc00215 	stw	ra,8(sp)
  8021f0:	80000015 	stw	zero,0(r16)
  8021f4:	08038d80 	call	8038d8 <write>
  8021f8:	00ffffc4 	movi	r3,-1
  8021fc:	10c00526 	beq	r2,r3,802214 <_write_r+0x50>
  802200:	dfc00217 	ldw	ra,8(sp)
  802204:	dc400117 	ldw	r17,4(sp)
  802208:	dc000017 	ldw	r16,0(sp)
  80220c:	dec00304 	addi	sp,sp,12
  802210:	f800283a 	ret
  802214:	80c00017 	ldw	r3,0(r16)
  802218:	183ff926 	beq	r3,zero,802200 <__alt_data_end+0xff802200>
  80221c:	88c00015 	stw	r3,0(r17)
  802220:	003ff706 	br	802200 <__alt_data_end+0xff802200>

00802224 <__swsetup_r>:
  802224:	00802034 	movhi	r2,128
  802228:	defffd04 	addi	sp,sp,-12
  80222c:	109caf04 	addi	r2,r2,29372
  802230:	dc400115 	stw	r17,4(sp)
  802234:	2023883a 	mov	r17,r4
  802238:	11000017 	ldw	r4,0(r2)
  80223c:	dc000015 	stw	r16,0(sp)
  802240:	dfc00215 	stw	ra,8(sp)
  802244:	2821883a 	mov	r16,r5
  802248:	20000226 	beq	r4,zero,802254 <__swsetup_r+0x30>
  80224c:	20800e17 	ldw	r2,56(r4)
  802250:	10003126 	beq	r2,zero,802318 <__swsetup_r+0xf4>
  802254:	8080030b 	ldhu	r2,12(r16)
  802258:	10c0020c 	andi	r3,r2,8
  80225c:	1009883a 	mov	r4,r2
  802260:	18000f26 	beq	r3,zero,8022a0 <__swsetup_r+0x7c>
  802264:	80c00417 	ldw	r3,16(r16)
  802268:	18001526 	beq	r3,zero,8022c0 <__swsetup_r+0x9c>
  80226c:	1100004c 	andi	r4,r2,1
  802270:	20001c1e 	bne	r4,zero,8022e4 <__swsetup_r+0xc0>
  802274:	1080008c 	andi	r2,r2,2
  802278:	1000291e 	bne	r2,zero,802320 <__swsetup_r+0xfc>
  80227c:	80800517 	ldw	r2,20(r16)
  802280:	80800215 	stw	r2,8(r16)
  802284:	18001c26 	beq	r3,zero,8022f8 <__swsetup_r+0xd4>
  802288:	0005883a 	mov	r2,zero
  80228c:	dfc00217 	ldw	ra,8(sp)
  802290:	dc400117 	ldw	r17,4(sp)
  802294:	dc000017 	ldw	r16,0(sp)
  802298:	dec00304 	addi	sp,sp,12
  80229c:	f800283a 	ret
  8022a0:	2080040c 	andi	r2,r4,16
  8022a4:	10002e26 	beq	r2,zero,802360 <__swsetup_r+0x13c>
  8022a8:	2080010c 	andi	r2,r4,4
  8022ac:	10001e1e 	bne	r2,zero,802328 <__swsetup_r+0x104>
  8022b0:	80c00417 	ldw	r3,16(r16)
  8022b4:	20800214 	ori	r2,r4,8
  8022b8:	8080030d 	sth	r2,12(r16)
  8022bc:	183feb1e 	bne	r3,zero,80226c <__alt_data_end+0xff80226c>
  8022c0:	1100a00c 	andi	r4,r2,640
  8022c4:	01408004 	movi	r5,512
  8022c8:	217fe826 	beq	r4,r5,80226c <__alt_data_end+0xff80226c>
  8022cc:	800b883a 	mov	r5,r16
  8022d0:	8809883a 	mov	r4,r17
  8022d4:	0802c0c0 	call	802c0c <__smakebuf_r>
  8022d8:	8080030b 	ldhu	r2,12(r16)
  8022dc:	80c00417 	ldw	r3,16(r16)
  8022e0:	003fe206 	br	80226c <__alt_data_end+0xff80226c>
  8022e4:	80800517 	ldw	r2,20(r16)
  8022e8:	80000215 	stw	zero,8(r16)
  8022ec:	0085c83a 	sub	r2,zero,r2
  8022f0:	80800615 	stw	r2,24(r16)
  8022f4:	183fe41e 	bne	r3,zero,802288 <__alt_data_end+0xff802288>
  8022f8:	80c0030b 	ldhu	r3,12(r16)
  8022fc:	0005883a 	mov	r2,zero
  802300:	1900200c 	andi	r4,r3,128
  802304:	203fe126 	beq	r4,zero,80228c <__alt_data_end+0xff80228c>
  802308:	18c01014 	ori	r3,r3,64
  80230c:	80c0030d 	sth	r3,12(r16)
  802310:	00bfffc4 	movi	r2,-1
  802314:	003fdd06 	br	80228c <__alt_data_end+0xff80228c>
  802318:	08007800 	call	800780 <__sinit>
  80231c:	003fcd06 	br	802254 <__alt_data_end+0xff802254>
  802320:	0005883a 	mov	r2,zero
  802324:	003fd606 	br	802280 <__alt_data_end+0xff802280>
  802328:	81400c17 	ldw	r5,48(r16)
  80232c:	28000626 	beq	r5,zero,802348 <__swsetup_r+0x124>
  802330:	80801004 	addi	r2,r16,64
  802334:	28800326 	beq	r5,r2,802344 <__swsetup_r+0x120>
  802338:	8809883a 	mov	r4,r17
  80233c:	080289c0 	call	80289c <_free_r>
  802340:	8100030b 	ldhu	r4,12(r16)
  802344:	80000c15 	stw	zero,48(r16)
  802348:	80c00417 	ldw	r3,16(r16)
  80234c:	00bff6c4 	movi	r2,-37
  802350:	1108703a 	and	r4,r2,r4
  802354:	80000115 	stw	zero,4(r16)
  802358:	80c00015 	stw	r3,0(r16)
  80235c:	003fd506 	br	8022b4 <__alt_data_end+0xff8022b4>
  802360:	00800244 	movi	r2,9
  802364:	88800015 	stw	r2,0(r17)
  802368:	20801014 	ori	r2,r4,64
  80236c:	8080030d 	sth	r2,12(r16)
  802370:	00bfffc4 	movi	r2,-1
  802374:	003fc506 	br	80228c <__alt_data_end+0xff80228c>

00802378 <_close_r>:
  802378:	defffd04 	addi	sp,sp,-12
  80237c:	dc000015 	stw	r16,0(sp)
  802380:	04002074 	movhi	r16,129
  802384:	dc400115 	stw	r17,4(sp)
  802388:	84235a04 	addi	r16,r16,-29336
  80238c:	2023883a 	mov	r17,r4
  802390:	2809883a 	mov	r4,r5
  802394:	dfc00215 	stw	ra,8(sp)
  802398:	80000015 	stw	zero,0(r16)
  80239c:	08030c80 	call	8030c8 <close>
  8023a0:	00ffffc4 	movi	r3,-1
  8023a4:	10c00526 	beq	r2,r3,8023bc <_close_r+0x44>
  8023a8:	dfc00217 	ldw	ra,8(sp)
  8023ac:	dc400117 	ldw	r17,4(sp)
  8023b0:	dc000017 	ldw	r16,0(sp)
  8023b4:	dec00304 	addi	sp,sp,12
  8023b8:	f800283a 	ret
  8023bc:	80c00017 	ldw	r3,0(r16)
  8023c0:	183ff926 	beq	r3,zero,8023a8 <__alt_data_end+0xff8023a8>
  8023c4:	88c00015 	stw	r3,0(r17)
  8023c8:	003ff706 	br	8023a8 <__alt_data_end+0xff8023a8>

008023cc <_fclose_r>:
  8023cc:	28003926 	beq	r5,zero,8024b4 <_fclose_r+0xe8>
  8023d0:	defffc04 	addi	sp,sp,-16
  8023d4:	dc400115 	stw	r17,4(sp)
  8023d8:	dc000015 	stw	r16,0(sp)
  8023dc:	dfc00315 	stw	ra,12(sp)
  8023e0:	dc800215 	stw	r18,8(sp)
  8023e4:	2023883a 	mov	r17,r4
  8023e8:	2821883a 	mov	r16,r5
  8023ec:	20000226 	beq	r4,zero,8023f8 <_fclose_r+0x2c>
  8023f0:	20800e17 	ldw	r2,56(r4)
  8023f4:	10002726 	beq	r2,zero,802494 <_fclose_r+0xc8>
  8023f8:	8080030f 	ldh	r2,12(r16)
  8023fc:	1000071e 	bne	r2,zero,80241c <_fclose_r+0x50>
  802400:	0005883a 	mov	r2,zero
  802404:	dfc00317 	ldw	ra,12(sp)
  802408:	dc800217 	ldw	r18,8(sp)
  80240c:	dc400117 	ldw	r17,4(sp)
  802410:	dc000017 	ldw	r16,0(sp)
  802414:	dec00404 	addi	sp,sp,16
  802418:	f800283a 	ret
  80241c:	800b883a 	mov	r5,r16
  802420:	8809883a 	mov	r4,r17
  802424:	08024d00 	call	8024d0 <__sflush_r>
  802428:	1025883a 	mov	r18,r2
  80242c:	80800b17 	ldw	r2,44(r16)
  802430:	10000426 	beq	r2,zero,802444 <_fclose_r+0x78>
  802434:	81400717 	ldw	r5,28(r16)
  802438:	8809883a 	mov	r4,r17
  80243c:	103ee83a 	callr	r2
  802440:	10001616 	blt	r2,zero,80249c <_fclose_r+0xd0>
  802444:	8080030b 	ldhu	r2,12(r16)
  802448:	1080200c 	andi	r2,r2,128
  80244c:	1000151e 	bne	r2,zero,8024a4 <_fclose_r+0xd8>
  802450:	81400c17 	ldw	r5,48(r16)
  802454:	28000526 	beq	r5,zero,80246c <_fclose_r+0xa0>
  802458:	80801004 	addi	r2,r16,64
  80245c:	28800226 	beq	r5,r2,802468 <_fclose_r+0x9c>
  802460:	8809883a 	mov	r4,r17
  802464:	080289c0 	call	80289c <_free_r>
  802468:	80000c15 	stw	zero,48(r16)
  80246c:	81401117 	ldw	r5,68(r16)
  802470:	28000326 	beq	r5,zero,802480 <_fclose_r+0xb4>
  802474:	8809883a 	mov	r4,r17
  802478:	080289c0 	call	80289c <_free_r>
  80247c:	80001115 	stw	zero,68(r16)
  802480:	08007900 	call	800790 <__sfp_lock_acquire>
  802484:	8000030d 	sth	zero,12(r16)
  802488:	08007940 	call	800794 <__sfp_lock_release>
  80248c:	9005883a 	mov	r2,r18
  802490:	003fdc06 	br	802404 <__alt_data_end+0xff802404>
  802494:	08007800 	call	800780 <__sinit>
  802498:	003fd706 	br	8023f8 <__alt_data_end+0xff8023f8>
  80249c:	04bfffc4 	movi	r18,-1
  8024a0:	003fe806 	br	802444 <__alt_data_end+0xff802444>
  8024a4:	81400417 	ldw	r5,16(r16)
  8024a8:	8809883a 	mov	r4,r17
  8024ac:	080289c0 	call	80289c <_free_r>
  8024b0:	003fe706 	br	802450 <__alt_data_end+0xff802450>
  8024b4:	0005883a 	mov	r2,zero
  8024b8:	f800283a 	ret

008024bc <fclose>:
  8024bc:	00802034 	movhi	r2,128
  8024c0:	109caf04 	addi	r2,r2,29372
  8024c4:	200b883a 	mov	r5,r4
  8024c8:	11000017 	ldw	r4,0(r2)
  8024cc:	08023cc1 	jmpi	8023cc <_fclose_r>

008024d0 <__sflush_r>:
  8024d0:	2880030b 	ldhu	r2,12(r5)
  8024d4:	defffb04 	addi	sp,sp,-20
  8024d8:	dcc00315 	stw	r19,12(sp)
  8024dc:	dc400115 	stw	r17,4(sp)
  8024e0:	dfc00415 	stw	ra,16(sp)
  8024e4:	dc800215 	stw	r18,8(sp)
  8024e8:	dc000015 	stw	r16,0(sp)
  8024ec:	10c0020c 	andi	r3,r2,8
  8024f0:	2823883a 	mov	r17,r5
  8024f4:	2027883a 	mov	r19,r4
  8024f8:	1800311e 	bne	r3,zero,8025c0 <__sflush_r+0xf0>
  8024fc:	28c00117 	ldw	r3,4(r5)
  802500:	10820014 	ori	r2,r2,2048
  802504:	2880030d 	sth	r2,12(r5)
  802508:	00c04b0e 	bge	zero,r3,802638 <__sflush_r+0x168>
  80250c:	8a000a17 	ldw	r8,40(r17)
  802510:	40002326 	beq	r8,zero,8025a0 <__sflush_r+0xd0>
  802514:	9c000017 	ldw	r16,0(r19)
  802518:	10c4000c 	andi	r3,r2,4096
  80251c:	98000015 	stw	zero,0(r19)
  802520:	18004826 	beq	r3,zero,802644 <__sflush_r+0x174>
  802524:	89801417 	ldw	r6,80(r17)
  802528:	10c0010c 	andi	r3,r2,4
  80252c:	18000626 	beq	r3,zero,802548 <__sflush_r+0x78>
  802530:	88c00117 	ldw	r3,4(r17)
  802534:	88800c17 	ldw	r2,48(r17)
  802538:	30cdc83a 	sub	r6,r6,r3
  80253c:	10000226 	beq	r2,zero,802548 <__sflush_r+0x78>
  802540:	88800f17 	ldw	r2,60(r17)
  802544:	308dc83a 	sub	r6,r6,r2
  802548:	89400717 	ldw	r5,28(r17)
  80254c:	000f883a 	mov	r7,zero
  802550:	9809883a 	mov	r4,r19
  802554:	403ee83a 	callr	r8
  802558:	00ffffc4 	movi	r3,-1
  80255c:	10c04426 	beq	r2,r3,802670 <__sflush_r+0x1a0>
  802560:	88c0030b 	ldhu	r3,12(r17)
  802564:	89000417 	ldw	r4,16(r17)
  802568:	88000115 	stw	zero,4(r17)
  80256c:	197dffcc 	andi	r5,r3,63487
  802570:	8940030d 	sth	r5,12(r17)
  802574:	89000015 	stw	r4,0(r17)
  802578:	18c4000c 	andi	r3,r3,4096
  80257c:	18002c1e 	bne	r3,zero,802630 <__sflush_r+0x160>
  802580:	89400c17 	ldw	r5,48(r17)
  802584:	9c000015 	stw	r16,0(r19)
  802588:	28000526 	beq	r5,zero,8025a0 <__sflush_r+0xd0>
  80258c:	88801004 	addi	r2,r17,64
  802590:	28800226 	beq	r5,r2,80259c <__sflush_r+0xcc>
  802594:	9809883a 	mov	r4,r19
  802598:	080289c0 	call	80289c <_free_r>
  80259c:	88000c15 	stw	zero,48(r17)
  8025a0:	0005883a 	mov	r2,zero
  8025a4:	dfc00417 	ldw	ra,16(sp)
  8025a8:	dcc00317 	ldw	r19,12(sp)
  8025ac:	dc800217 	ldw	r18,8(sp)
  8025b0:	dc400117 	ldw	r17,4(sp)
  8025b4:	dc000017 	ldw	r16,0(sp)
  8025b8:	dec00504 	addi	sp,sp,20
  8025bc:	f800283a 	ret
  8025c0:	2c800417 	ldw	r18,16(r5)
  8025c4:	903ff626 	beq	r18,zero,8025a0 <__alt_data_end+0xff8025a0>
  8025c8:	2c000017 	ldw	r16,0(r5)
  8025cc:	108000cc 	andi	r2,r2,3
  8025d0:	2c800015 	stw	r18,0(r5)
  8025d4:	84a1c83a 	sub	r16,r16,r18
  8025d8:	1000131e 	bne	r2,zero,802628 <__sflush_r+0x158>
  8025dc:	28800517 	ldw	r2,20(r5)
  8025e0:	88800215 	stw	r2,8(r17)
  8025e4:	04000316 	blt	zero,r16,8025f4 <__sflush_r+0x124>
  8025e8:	003fed06 	br	8025a0 <__alt_data_end+0xff8025a0>
  8025ec:	90a5883a 	add	r18,r18,r2
  8025f0:	043feb0e 	bge	zero,r16,8025a0 <__alt_data_end+0xff8025a0>
  8025f4:	88800917 	ldw	r2,36(r17)
  8025f8:	89400717 	ldw	r5,28(r17)
  8025fc:	800f883a 	mov	r7,r16
  802600:	900d883a 	mov	r6,r18
  802604:	9809883a 	mov	r4,r19
  802608:	103ee83a 	callr	r2
  80260c:	80a1c83a 	sub	r16,r16,r2
  802610:	00bff616 	blt	zero,r2,8025ec <__alt_data_end+0xff8025ec>
  802614:	88c0030b 	ldhu	r3,12(r17)
  802618:	00bfffc4 	movi	r2,-1
  80261c:	18c01014 	ori	r3,r3,64
  802620:	88c0030d 	sth	r3,12(r17)
  802624:	003fdf06 	br	8025a4 <__alt_data_end+0xff8025a4>
  802628:	0005883a 	mov	r2,zero
  80262c:	003fec06 	br	8025e0 <__alt_data_end+0xff8025e0>
  802630:	88801415 	stw	r2,80(r17)
  802634:	003fd206 	br	802580 <__alt_data_end+0xff802580>
  802638:	28c00f17 	ldw	r3,60(r5)
  80263c:	00ffb316 	blt	zero,r3,80250c <__alt_data_end+0xff80250c>
  802640:	003fd706 	br	8025a0 <__alt_data_end+0xff8025a0>
  802644:	89400717 	ldw	r5,28(r17)
  802648:	000d883a 	mov	r6,zero
  80264c:	01c00044 	movi	r7,1
  802650:	9809883a 	mov	r4,r19
  802654:	403ee83a 	callr	r8
  802658:	100d883a 	mov	r6,r2
  80265c:	00bfffc4 	movi	r2,-1
  802660:	30801426 	beq	r6,r2,8026b4 <__sflush_r+0x1e4>
  802664:	8880030b 	ldhu	r2,12(r17)
  802668:	8a000a17 	ldw	r8,40(r17)
  80266c:	003fae06 	br	802528 <__alt_data_end+0xff802528>
  802670:	98c00017 	ldw	r3,0(r19)
  802674:	183fba26 	beq	r3,zero,802560 <__alt_data_end+0xff802560>
  802678:	01000744 	movi	r4,29
  80267c:	19000626 	beq	r3,r4,802698 <__sflush_r+0x1c8>
  802680:	01000584 	movi	r4,22
  802684:	19000426 	beq	r3,r4,802698 <__sflush_r+0x1c8>
  802688:	88c0030b 	ldhu	r3,12(r17)
  80268c:	18c01014 	ori	r3,r3,64
  802690:	88c0030d 	sth	r3,12(r17)
  802694:	003fc306 	br	8025a4 <__alt_data_end+0xff8025a4>
  802698:	8880030b 	ldhu	r2,12(r17)
  80269c:	88c00417 	ldw	r3,16(r17)
  8026a0:	88000115 	stw	zero,4(r17)
  8026a4:	10bdffcc 	andi	r2,r2,63487
  8026a8:	8880030d 	sth	r2,12(r17)
  8026ac:	88c00015 	stw	r3,0(r17)
  8026b0:	003fb306 	br	802580 <__alt_data_end+0xff802580>
  8026b4:	98800017 	ldw	r2,0(r19)
  8026b8:	103fea26 	beq	r2,zero,802664 <__alt_data_end+0xff802664>
  8026bc:	00c00744 	movi	r3,29
  8026c0:	10c00226 	beq	r2,r3,8026cc <__sflush_r+0x1fc>
  8026c4:	00c00584 	movi	r3,22
  8026c8:	10c0031e 	bne	r2,r3,8026d8 <__sflush_r+0x208>
  8026cc:	9c000015 	stw	r16,0(r19)
  8026d0:	0005883a 	mov	r2,zero
  8026d4:	003fb306 	br	8025a4 <__alt_data_end+0xff8025a4>
  8026d8:	88c0030b 	ldhu	r3,12(r17)
  8026dc:	3005883a 	mov	r2,r6
  8026e0:	18c01014 	ori	r3,r3,64
  8026e4:	88c0030d 	sth	r3,12(r17)
  8026e8:	003fae06 	br	8025a4 <__alt_data_end+0xff8025a4>

008026ec <_fflush_r>:
  8026ec:	defffd04 	addi	sp,sp,-12
  8026f0:	dc000115 	stw	r16,4(sp)
  8026f4:	dfc00215 	stw	ra,8(sp)
  8026f8:	2021883a 	mov	r16,r4
  8026fc:	20000226 	beq	r4,zero,802708 <_fflush_r+0x1c>
  802700:	20800e17 	ldw	r2,56(r4)
  802704:	10000c26 	beq	r2,zero,802738 <_fflush_r+0x4c>
  802708:	2880030f 	ldh	r2,12(r5)
  80270c:	1000051e 	bne	r2,zero,802724 <_fflush_r+0x38>
  802710:	0005883a 	mov	r2,zero
  802714:	dfc00217 	ldw	ra,8(sp)
  802718:	dc000117 	ldw	r16,4(sp)
  80271c:	dec00304 	addi	sp,sp,12
  802720:	f800283a 	ret
  802724:	8009883a 	mov	r4,r16
  802728:	dfc00217 	ldw	ra,8(sp)
  80272c:	dc000117 	ldw	r16,4(sp)
  802730:	dec00304 	addi	sp,sp,12
  802734:	08024d01 	jmpi	8024d0 <__sflush_r>
  802738:	d9400015 	stw	r5,0(sp)
  80273c:	08007800 	call	800780 <__sinit>
  802740:	d9400017 	ldw	r5,0(sp)
  802744:	003ff006 	br	802708 <__alt_data_end+0xff802708>

00802748 <fflush>:
  802748:	20000526 	beq	r4,zero,802760 <fflush+0x18>
  80274c:	00802034 	movhi	r2,128
  802750:	109caf04 	addi	r2,r2,29372
  802754:	200b883a 	mov	r5,r4
  802758:	11000017 	ldw	r4,0(r2)
  80275c:	08026ec1 	jmpi	8026ec <_fflush_r>
  802760:	00802034 	movhi	r2,128
  802764:	109cae04 	addi	r2,r2,29368
  802768:	11000017 	ldw	r4,0(r2)
  80276c:	01402034 	movhi	r5,128
  802770:	2949bb04 	addi	r5,r5,9964
  802774:	0800d501 	jmpi	800d50 <_fwalk_reent>

00802778 <_malloc_trim_r>:
  802778:	defffb04 	addi	sp,sp,-20
  80277c:	dcc00315 	stw	r19,12(sp)
  802780:	04c02034 	movhi	r19,128
  802784:	dc800215 	stw	r18,8(sp)
  802788:	dc400115 	stw	r17,4(sp)
  80278c:	dc000015 	stw	r16,0(sp)
  802790:	dfc00415 	stw	ra,16(sp)
  802794:	2821883a 	mov	r16,r5
  802798:	9cd72a04 	addi	r19,r19,23720
  80279c:	2025883a 	mov	r18,r4
  8027a0:	08036080 	call	803608 <__malloc_lock>
  8027a4:	98800217 	ldw	r2,8(r19)
  8027a8:	14400117 	ldw	r17,4(r2)
  8027ac:	00bfff04 	movi	r2,-4
  8027b0:	88a2703a 	and	r17,r17,r2
  8027b4:	8c21c83a 	sub	r16,r17,r16
  8027b8:	8403fbc4 	addi	r16,r16,4079
  8027bc:	8020d33a 	srli	r16,r16,12
  8027c0:	0083ffc4 	movi	r2,4095
  8027c4:	843fffc4 	addi	r16,r16,-1
  8027c8:	8020933a 	slli	r16,r16,12
  8027cc:	1400060e 	bge	r2,r16,8027e8 <_malloc_trim_r+0x70>
  8027d0:	000b883a 	mov	r5,zero
  8027d4:	9009883a 	mov	r4,r18
  8027d8:	08020340 	call	802034 <_sbrk_r>
  8027dc:	98c00217 	ldw	r3,8(r19)
  8027e0:	1c47883a 	add	r3,r3,r17
  8027e4:	10c00a26 	beq	r2,r3,802810 <_malloc_trim_r+0x98>
  8027e8:	9009883a 	mov	r4,r18
  8027ec:	080362c0 	call	80362c <__malloc_unlock>
  8027f0:	0005883a 	mov	r2,zero
  8027f4:	dfc00417 	ldw	ra,16(sp)
  8027f8:	dcc00317 	ldw	r19,12(sp)
  8027fc:	dc800217 	ldw	r18,8(sp)
  802800:	dc400117 	ldw	r17,4(sp)
  802804:	dc000017 	ldw	r16,0(sp)
  802808:	dec00504 	addi	sp,sp,20
  80280c:	f800283a 	ret
  802810:	040bc83a 	sub	r5,zero,r16
  802814:	9009883a 	mov	r4,r18
  802818:	08020340 	call	802034 <_sbrk_r>
  80281c:	00ffffc4 	movi	r3,-1
  802820:	10c00d26 	beq	r2,r3,802858 <_malloc_trim_r+0xe0>
  802824:	00c02074 	movhi	r3,129
  802828:	18e36204 	addi	r3,r3,-29304
  80282c:	18800017 	ldw	r2,0(r3)
  802830:	99000217 	ldw	r4,8(r19)
  802834:	8c23c83a 	sub	r17,r17,r16
  802838:	8c400054 	ori	r17,r17,1
  80283c:	1421c83a 	sub	r16,r2,r16
  802840:	24400115 	stw	r17,4(r4)
  802844:	9009883a 	mov	r4,r18
  802848:	1c000015 	stw	r16,0(r3)
  80284c:	080362c0 	call	80362c <__malloc_unlock>
  802850:	00800044 	movi	r2,1
  802854:	003fe706 	br	8027f4 <__alt_data_end+0xff8027f4>
  802858:	000b883a 	mov	r5,zero
  80285c:	9009883a 	mov	r4,r18
  802860:	08020340 	call	802034 <_sbrk_r>
  802864:	99000217 	ldw	r4,8(r19)
  802868:	014003c4 	movi	r5,15
  80286c:	1107c83a 	sub	r3,r2,r4
  802870:	28ffdd0e 	bge	r5,r3,8027e8 <__alt_data_end+0xff8027e8>
  802874:	01402034 	movhi	r5,128
  802878:	295cb004 	addi	r5,r5,29376
  80287c:	29400017 	ldw	r5,0(r5)
  802880:	18c00054 	ori	r3,r3,1
  802884:	20c00115 	stw	r3,4(r4)
  802888:	00c02074 	movhi	r3,129
  80288c:	1145c83a 	sub	r2,r2,r5
  802890:	18e36204 	addi	r3,r3,-29304
  802894:	18800015 	stw	r2,0(r3)
  802898:	003fd306 	br	8027e8 <__alt_data_end+0xff8027e8>

0080289c <_free_r>:
  80289c:	28004126 	beq	r5,zero,8029a4 <_free_r+0x108>
  8028a0:	defffd04 	addi	sp,sp,-12
  8028a4:	dc400115 	stw	r17,4(sp)
  8028a8:	dc000015 	stw	r16,0(sp)
  8028ac:	2023883a 	mov	r17,r4
  8028b0:	2821883a 	mov	r16,r5
  8028b4:	dfc00215 	stw	ra,8(sp)
  8028b8:	08036080 	call	803608 <__malloc_lock>
  8028bc:	81ffff17 	ldw	r7,-4(r16)
  8028c0:	00bfff84 	movi	r2,-2
  8028c4:	01002034 	movhi	r4,128
  8028c8:	81bffe04 	addi	r6,r16,-8
  8028cc:	3884703a 	and	r2,r7,r2
  8028d0:	21172a04 	addi	r4,r4,23720
  8028d4:	308b883a 	add	r5,r6,r2
  8028d8:	2a400117 	ldw	r9,4(r5)
  8028dc:	22000217 	ldw	r8,8(r4)
  8028e0:	00ffff04 	movi	r3,-4
  8028e4:	48c6703a 	and	r3,r9,r3
  8028e8:	2a005726 	beq	r5,r8,802a48 <_free_r+0x1ac>
  8028ec:	28c00115 	stw	r3,4(r5)
  8028f0:	39c0004c 	andi	r7,r7,1
  8028f4:	3800091e 	bne	r7,zero,80291c <_free_r+0x80>
  8028f8:	823ffe17 	ldw	r8,-8(r16)
  8028fc:	22400204 	addi	r9,r4,8
  802900:	320dc83a 	sub	r6,r6,r8
  802904:	31c00217 	ldw	r7,8(r6)
  802908:	1205883a 	add	r2,r2,r8
  80290c:	3a406526 	beq	r7,r9,802aa4 <_free_r+0x208>
  802910:	32000317 	ldw	r8,12(r6)
  802914:	3a000315 	stw	r8,12(r7)
  802918:	41c00215 	stw	r7,8(r8)
  80291c:	28cf883a 	add	r7,r5,r3
  802920:	39c00117 	ldw	r7,4(r7)
  802924:	39c0004c 	andi	r7,r7,1
  802928:	38003a26 	beq	r7,zero,802a14 <_free_r+0x178>
  80292c:	10c00054 	ori	r3,r2,1
  802930:	30c00115 	stw	r3,4(r6)
  802934:	3087883a 	add	r3,r6,r2
  802938:	18800015 	stw	r2,0(r3)
  80293c:	00c07fc4 	movi	r3,511
  802940:	18801936 	bltu	r3,r2,8029a8 <_free_r+0x10c>
  802944:	1004d0fa 	srli	r2,r2,3
  802948:	01c00044 	movi	r7,1
  80294c:	21400117 	ldw	r5,4(r4)
  802950:	10c00044 	addi	r3,r2,1
  802954:	18c7883a 	add	r3,r3,r3
  802958:	1005d0ba 	srai	r2,r2,2
  80295c:	18c7883a 	add	r3,r3,r3
  802960:	18c7883a 	add	r3,r3,r3
  802964:	1907883a 	add	r3,r3,r4
  802968:	3884983a 	sll	r2,r7,r2
  80296c:	19c00017 	ldw	r7,0(r3)
  802970:	1a3ffe04 	addi	r8,r3,-8
  802974:	1144b03a 	or	r2,r2,r5
  802978:	32000315 	stw	r8,12(r6)
  80297c:	31c00215 	stw	r7,8(r6)
  802980:	20800115 	stw	r2,4(r4)
  802984:	19800015 	stw	r6,0(r3)
  802988:	39800315 	stw	r6,12(r7)
  80298c:	8809883a 	mov	r4,r17
  802990:	dfc00217 	ldw	ra,8(sp)
  802994:	dc400117 	ldw	r17,4(sp)
  802998:	dc000017 	ldw	r16,0(sp)
  80299c:	dec00304 	addi	sp,sp,12
  8029a0:	080362c1 	jmpi	80362c <__malloc_unlock>
  8029a4:	f800283a 	ret
  8029a8:	100ad27a 	srli	r5,r2,9
  8029ac:	00c00104 	movi	r3,4
  8029b0:	19404a36 	bltu	r3,r5,802adc <_free_r+0x240>
  8029b4:	100ad1ba 	srli	r5,r2,6
  8029b8:	28c00e44 	addi	r3,r5,57
  8029bc:	18c7883a 	add	r3,r3,r3
  8029c0:	29400e04 	addi	r5,r5,56
  8029c4:	18c7883a 	add	r3,r3,r3
  8029c8:	18c7883a 	add	r3,r3,r3
  8029cc:	1909883a 	add	r4,r3,r4
  8029d0:	20c00017 	ldw	r3,0(r4)
  8029d4:	01c02034 	movhi	r7,128
  8029d8:	213ffe04 	addi	r4,r4,-8
  8029dc:	39d72a04 	addi	r7,r7,23720
  8029e0:	20c04426 	beq	r4,r3,802af4 <_free_r+0x258>
  8029e4:	01ffff04 	movi	r7,-4
  8029e8:	19400117 	ldw	r5,4(r3)
  8029ec:	29ca703a 	and	r5,r5,r7
  8029f0:	1140022e 	bgeu	r2,r5,8029fc <_free_r+0x160>
  8029f4:	18c00217 	ldw	r3,8(r3)
  8029f8:	20fffb1e 	bne	r4,r3,8029e8 <__alt_data_end+0xff8029e8>
  8029fc:	19000317 	ldw	r4,12(r3)
  802a00:	31000315 	stw	r4,12(r6)
  802a04:	30c00215 	stw	r3,8(r6)
  802a08:	21800215 	stw	r6,8(r4)
  802a0c:	19800315 	stw	r6,12(r3)
  802a10:	003fde06 	br	80298c <__alt_data_end+0xff80298c>
  802a14:	29c00217 	ldw	r7,8(r5)
  802a18:	10c5883a 	add	r2,r2,r3
  802a1c:	00c02034 	movhi	r3,128
  802a20:	18d72c04 	addi	r3,r3,23728
  802a24:	38c03b26 	beq	r7,r3,802b14 <_free_r+0x278>
  802a28:	2a000317 	ldw	r8,12(r5)
  802a2c:	11400054 	ori	r5,r2,1
  802a30:	3087883a 	add	r3,r6,r2
  802a34:	3a000315 	stw	r8,12(r7)
  802a38:	41c00215 	stw	r7,8(r8)
  802a3c:	31400115 	stw	r5,4(r6)
  802a40:	18800015 	stw	r2,0(r3)
  802a44:	003fbd06 	br	80293c <__alt_data_end+0xff80293c>
  802a48:	39c0004c 	andi	r7,r7,1
  802a4c:	10c5883a 	add	r2,r2,r3
  802a50:	3800071e 	bne	r7,zero,802a70 <_free_r+0x1d4>
  802a54:	81fffe17 	ldw	r7,-8(r16)
  802a58:	31cdc83a 	sub	r6,r6,r7
  802a5c:	30c00317 	ldw	r3,12(r6)
  802a60:	31400217 	ldw	r5,8(r6)
  802a64:	11c5883a 	add	r2,r2,r7
  802a68:	28c00315 	stw	r3,12(r5)
  802a6c:	19400215 	stw	r5,8(r3)
  802a70:	10c00054 	ori	r3,r2,1
  802a74:	30c00115 	stw	r3,4(r6)
  802a78:	00c02034 	movhi	r3,128
  802a7c:	18dcb104 	addi	r3,r3,29380
  802a80:	18c00017 	ldw	r3,0(r3)
  802a84:	21800215 	stw	r6,8(r4)
  802a88:	10ffc036 	bltu	r2,r3,80298c <__alt_data_end+0xff80298c>
  802a8c:	00802074 	movhi	r2,129
  802a90:	10a35904 	addi	r2,r2,-29340
  802a94:	11400017 	ldw	r5,0(r2)
  802a98:	8809883a 	mov	r4,r17
  802a9c:	08027780 	call	802778 <_malloc_trim_r>
  802aa0:	003fba06 	br	80298c <__alt_data_end+0xff80298c>
  802aa4:	28c9883a 	add	r4,r5,r3
  802aa8:	21000117 	ldw	r4,4(r4)
  802aac:	2100004c 	andi	r4,r4,1
  802ab0:	2000391e 	bne	r4,zero,802b98 <_free_r+0x2fc>
  802ab4:	29c00217 	ldw	r7,8(r5)
  802ab8:	29000317 	ldw	r4,12(r5)
  802abc:	1885883a 	add	r2,r3,r2
  802ac0:	10c00054 	ori	r3,r2,1
  802ac4:	39000315 	stw	r4,12(r7)
  802ac8:	21c00215 	stw	r7,8(r4)
  802acc:	30c00115 	stw	r3,4(r6)
  802ad0:	308d883a 	add	r6,r6,r2
  802ad4:	30800015 	stw	r2,0(r6)
  802ad8:	003fac06 	br	80298c <__alt_data_end+0xff80298c>
  802adc:	00c00504 	movi	r3,20
  802ae0:	19401536 	bltu	r3,r5,802b38 <_free_r+0x29c>
  802ae4:	28c01704 	addi	r3,r5,92
  802ae8:	18c7883a 	add	r3,r3,r3
  802aec:	294016c4 	addi	r5,r5,91
  802af0:	003fb406 	br	8029c4 <__alt_data_end+0xff8029c4>
  802af4:	280bd0ba 	srai	r5,r5,2
  802af8:	00c00044 	movi	r3,1
  802afc:	38800117 	ldw	r2,4(r7)
  802b00:	194a983a 	sll	r5,r3,r5
  802b04:	2007883a 	mov	r3,r4
  802b08:	2884b03a 	or	r2,r5,r2
  802b0c:	38800115 	stw	r2,4(r7)
  802b10:	003fbb06 	br	802a00 <__alt_data_end+0xff802a00>
  802b14:	21800515 	stw	r6,20(r4)
  802b18:	21800415 	stw	r6,16(r4)
  802b1c:	10c00054 	ori	r3,r2,1
  802b20:	31c00315 	stw	r7,12(r6)
  802b24:	31c00215 	stw	r7,8(r6)
  802b28:	30c00115 	stw	r3,4(r6)
  802b2c:	308d883a 	add	r6,r6,r2
  802b30:	30800015 	stw	r2,0(r6)
  802b34:	003f9506 	br	80298c <__alt_data_end+0xff80298c>
  802b38:	00c01504 	movi	r3,84
  802b3c:	19400536 	bltu	r3,r5,802b54 <_free_r+0x2b8>
  802b40:	100ad33a 	srli	r5,r2,12
  802b44:	28c01bc4 	addi	r3,r5,111
  802b48:	18c7883a 	add	r3,r3,r3
  802b4c:	29401b84 	addi	r5,r5,110
  802b50:	003f9c06 	br	8029c4 <__alt_data_end+0xff8029c4>
  802b54:	00c05504 	movi	r3,340
  802b58:	19400536 	bltu	r3,r5,802b70 <_free_r+0x2d4>
  802b5c:	100ad3fa 	srli	r5,r2,15
  802b60:	28c01e04 	addi	r3,r5,120
  802b64:	18c7883a 	add	r3,r3,r3
  802b68:	29401dc4 	addi	r5,r5,119
  802b6c:	003f9506 	br	8029c4 <__alt_data_end+0xff8029c4>
  802b70:	00c15504 	movi	r3,1364
  802b74:	19400536 	bltu	r3,r5,802b8c <_free_r+0x2f0>
  802b78:	100ad4ba 	srli	r5,r2,18
  802b7c:	28c01f44 	addi	r3,r5,125
  802b80:	18c7883a 	add	r3,r3,r3
  802b84:	29401f04 	addi	r5,r5,124
  802b88:	003f8e06 	br	8029c4 <__alt_data_end+0xff8029c4>
  802b8c:	00c03f84 	movi	r3,254
  802b90:	01401f84 	movi	r5,126
  802b94:	003f8b06 	br	8029c4 <__alt_data_end+0xff8029c4>
  802b98:	10c00054 	ori	r3,r2,1
  802b9c:	30c00115 	stw	r3,4(r6)
  802ba0:	308d883a 	add	r6,r6,r2
  802ba4:	30800015 	stw	r2,0(r6)
  802ba8:	003f7806 	br	80298c <__alt_data_end+0xff80298c>

00802bac <_lseek_r>:
  802bac:	defffd04 	addi	sp,sp,-12
  802bb0:	2805883a 	mov	r2,r5
  802bb4:	dc000015 	stw	r16,0(sp)
  802bb8:	04002074 	movhi	r16,129
  802bbc:	dc400115 	stw	r17,4(sp)
  802bc0:	300b883a 	mov	r5,r6
  802bc4:	84235a04 	addi	r16,r16,-29336
  802bc8:	2023883a 	mov	r17,r4
  802bcc:	380d883a 	mov	r6,r7
  802bd0:	1009883a 	mov	r4,r2
  802bd4:	dfc00215 	stw	ra,8(sp)
  802bd8:	80000015 	stw	zero,0(r16)
  802bdc:	08034b80 	call	8034b8 <lseek>
  802be0:	00ffffc4 	movi	r3,-1
  802be4:	10c00526 	beq	r2,r3,802bfc <_lseek_r+0x50>
  802be8:	dfc00217 	ldw	ra,8(sp)
  802bec:	dc400117 	ldw	r17,4(sp)
  802bf0:	dc000017 	ldw	r16,0(sp)
  802bf4:	dec00304 	addi	sp,sp,12
  802bf8:	f800283a 	ret
  802bfc:	80c00017 	ldw	r3,0(r16)
  802c00:	183ff926 	beq	r3,zero,802be8 <__alt_data_end+0xff802be8>
  802c04:	88c00015 	stw	r3,0(r17)
  802c08:	003ff706 	br	802be8 <__alt_data_end+0xff802be8>

00802c0c <__smakebuf_r>:
  802c0c:	2880030b 	ldhu	r2,12(r5)
  802c10:	10c0008c 	andi	r3,r2,2
  802c14:	1800411e 	bne	r3,zero,802d1c <__smakebuf_r+0x110>
  802c18:	deffec04 	addi	sp,sp,-80
  802c1c:	dc000f15 	stw	r16,60(sp)
  802c20:	2821883a 	mov	r16,r5
  802c24:	2940038f 	ldh	r5,14(r5)
  802c28:	dc401015 	stw	r17,64(sp)
  802c2c:	dfc01315 	stw	ra,76(sp)
  802c30:	dcc01215 	stw	r19,72(sp)
  802c34:	dc801115 	stw	r18,68(sp)
  802c38:	2023883a 	mov	r17,r4
  802c3c:	28001c16 	blt	r5,zero,802cb0 <__smakebuf_r+0xa4>
  802c40:	d80d883a 	mov	r6,sp
  802c44:	0802e280 	call	802e28 <_fstat_r>
  802c48:	10001816 	blt	r2,zero,802cac <__smakebuf_r+0xa0>
  802c4c:	d8800117 	ldw	r2,4(sp)
  802c50:	00e00014 	movui	r3,32768
  802c54:	10bc000c 	andi	r2,r2,61440
  802c58:	14c80020 	cmpeqi	r19,r2,8192
  802c5c:	10c03726 	beq	r2,r3,802d3c <__smakebuf_r+0x130>
  802c60:	80c0030b 	ldhu	r3,12(r16)
  802c64:	18c20014 	ori	r3,r3,2048
  802c68:	80c0030d 	sth	r3,12(r16)
  802c6c:	00c80004 	movi	r3,8192
  802c70:	10c0521e 	bne	r2,r3,802dbc <__smakebuf_r+0x1b0>
  802c74:	8140038f 	ldh	r5,14(r16)
  802c78:	8809883a 	mov	r4,r17
  802c7c:	0802e840 	call	802e84 <_isatty_r>
  802c80:	10004c26 	beq	r2,zero,802db4 <__smakebuf_r+0x1a8>
  802c84:	8080030b 	ldhu	r2,12(r16)
  802c88:	80c010c4 	addi	r3,r16,67
  802c8c:	80c00015 	stw	r3,0(r16)
  802c90:	10800054 	ori	r2,r2,1
  802c94:	8080030d 	sth	r2,12(r16)
  802c98:	00800044 	movi	r2,1
  802c9c:	80c00415 	stw	r3,16(r16)
  802ca0:	80800515 	stw	r2,20(r16)
  802ca4:	04810004 	movi	r18,1024
  802ca8:	00000706 	br	802cc8 <__smakebuf_r+0xbc>
  802cac:	8080030b 	ldhu	r2,12(r16)
  802cb0:	10c0200c 	andi	r3,r2,128
  802cb4:	18001f1e 	bne	r3,zero,802d34 <__smakebuf_r+0x128>
  802cb8:	04810004 	movi	r18,1024
  802cbc:	10820014 	ori	r2,r2,2048
  802cc0:	8080030d 	sth	r2,12(r16)
  802cc4:	0027883a 	mov	r19,zero
  802cc8:	900b883a 	mov	r5,r18
  802ccc:	8809883a 	mov	r4,r17
  802cd0:	0800e140 	call	800e14 <_malloc_r>
  802cd4:	10002c26 	beq	r2,zero,802d88 <__smakebuf_r+0x17c>
  802cd8:	80c0030b 	ldhu	r3,12(r16)
  802cdc:	01002034 	movhi	r4,128
  802ce0:	21010e04 	addi	r4,r4,1080
  802ce4:	89000f15 	stw	r4,60(r17)
  802ce8:	18c02014 	ori	r3,r3,128
  802cec:	80c0030d 	sth	r3,12(r16)
  802cf0:	80800015 	stw	r2,0(r16)
  802cf4:	80800415 	stw	r2,16(r16)
  802cf8:	84800515 	stw	r18,20(r16)
  802cfc:	98001a1e 	bne	r19,zero,802d68 <__smakebuf_r+0x15c>
  802d00:	dfc01317 	ldw	ra,76(sp)
  802d04:	dcc01217 	ldw	r19,72(sp)
  802d08:	dc801117 	ldw	r18,68(sp)
  802d0c:	dc401017 	ldw	r17,64(sp)
  802d10:	dc000f17 	ldw	r16,60(sp)
  802d14:	dec01404 	addi	sp,sp,80
  802d18:	f800283a 	ret
  802d1c:	288010c4 	addi	r2,r5,67
  802d20:	28800015 	stw	r2,0(r5)
  802d24:	28800415 	stw	r2,16(r5)
  802d28:	00800044 	movi	r2,1
  802d2c:	28800515 	stw	r2,20(r5)
  802d30:	f800283a 	ret
  802d34:	04801004 	movi	r18,64
  802d38:	003fe006 	br	802cbc <__alt_data_end+0xff802cbc>
  802d3c:	81000a17 	ldw	r4,40(r16)
  802d40:	00c02034 	movhi	r3,128
  802d44:	18c85804 	addi	r3,r3,8544
  802d48:	20ffc51e 	bne	r4,r3,802c60 <__alt_data_end+0xff802c60>
  802d4c:	8080030b 	ldhu	r2,12(r16)
  802d50:	04810004 	movi	r18,1024
  802d54:	84801315 	stw	r18,76(r16)
  802d58:	1484b03a 	or	r2,r2,r18
  802d5c:	8080030d 	sth	r2,12(r16)
  802d60:	0027883a 	mov	r19,zero
  802d64:	003fd806 	br	802cc8 <__alt_data_end+0xff802cc8>
  802d68:	8140038f 	ldh	r5,14(r16)
  802d6c:	8809883a 	mov	r4,r17
  802d70:	0802e840 	call	802e84 <_isatty_r>
  802d74:	103fe226 	beq	r2,zero,802d00 <__alt_data_end+0xff802d00>
  802d78:	8080030b 	ldhu	r2,12(r16)
  802d7c:	10800054 	ori	r2,r2,1
  802d80:	8080030d 	sth	r2,12(r16)
  802d84:	003fde06 	br	802d00 <__alt_data_end+0xff802d00>
  802d88:	8080030b 	ldhu	r2,12(r16)
  802d8c:	10c0800c 	andi	r3,r2,512
  802d90:	183fdb1e 	bne	r3,zero,802d00 <__alt_data_end+0xff802d00>
  802d94:	10800094 	ori	r2,r2,2
  802d98:	80c010c4 	addi	r3,r16,67
  802d9c:	8080030d 	sth	r2,12(r16)
  802da0:	00800044 	movi	r2,1
  802da4:	80c00015 	stw	r3,0(r16)
  802da8:	80c00415 	stw	r3,16(r16)
  802dac:	80800515 	stw	r2,20(r16)
  802db0:	003fd306 	br	802d00 <__alt_data_end+0xff802d00>
  802db4:	04810004 	movi	r18,1024
  802db8:	003fc306 	br	802cc8 <__alt_data_end+0xff802cc8>
  802dbc:	0027883a 	mov	r19,zero
  802dc0:	04810004 	movi	r18,1024
  802dc4:	003fc006 	br	802cc8 <__alt_data_end+0xff802cc8>

00802dc8 <_read_r>:
  802dc8:	defffd04 	addi	sp,sp,-12
  802dcc:	2805883a 	mov	r2,r5
  802dd0:	dc000015 	stw	r16,0(sp)
  802dd4:	04002074 	movhi	r16,129
  802dd8:	dc400115 	stw	r17,4(sp)
  802ddc:	300b883a 	mov	r5,r6
  802de0:	84235a04 	addi	r16,r16,-29336
  802de4:	2023883a 	mov	r17,r4
  802de8:	380d883a 	mov	r6,r7
  802dec:	1009883a 	mov	r4,r2
  802df0:	dfc00215 	stw	ra,8(sp)
  802df4:	80000015 	stw	zero,0(r16)
  802df8:	080368c0 	call	80368c <read>
  802dfc:	00ffffc4 	movi	r3,-1
  802e00:	10c00526 	beq	r2,r3,802e18 <_read_r+0x50>
  802e04:	dfc00217 	ldw	ra,8(sp)
  802e08:	dc400117 	ldw	r17,4(sp)
  802e0c:	dc000017 	ldw	r16,0(sp)
  802e10:	dec00304 	addi	sp,sp,12
  802e14:	f800283a 	ret
  802e18:	80c00017 	ldw	r3,0(r16)
  802e1c:	183ff926 	beq	r3,zero,802e04 <__alt_data_end+0xff802e04>
  802e20:	88c00015 	stw	r3,0(r17)
  802e24:	003ff706 	br	802e04 <__alt_data_end+0xff802e04>

00802e28 <_fstat_r>:
  802e28:	defffd04 	addi	sp,sp,-12
  802e2c:	2805883a 	mov	r2,r5
  802e30:	dc000015 	stw	r16,0(sp)
  802e34:	04002074 	movhi	r16,129
  802e38:	dc400115 	stw	r17,4(sp)
  802e3c:	84235a04 	addi	r16,r16,-29336
  802e40:	2023883a 	mov	r17,r4
  802e44:	300b883a 	mov	r5,r6
  802e48:	1009883a 	mov	r4,r2
  802e4c:	dfc00215 	stw	ra,8(sp)
  802e50:	80000015 	stw	zero,0(r16)
  802e54:	08032000 	call	803200 <fstat>
  802e58:	00ffffc4 	movi	r3,-1
  802e5c:	10c00526 	beq	r2,r3,802e74 <_fstat_r+0x4c>
  802e60:	dfc00217 	ldw	ra,8(sp)
  802e64:	dc400117 	ldw	r17,4(sp)
  802e68:	dc000017 	ldw	r16,0(sp)
  802e6c:	dec00304 	addi	sp,sp,12
  802e70:	f800283a 	ret
  802e74:	80c00017 	ldw	r3,0(r16)
  802e78:	183ff926 	beq	r3,zero,802e60 <__alt_data_end+0xff802e60>
  802e7c:	88c00015 	stw	r3,0(r17)
  802e80:	003ff706 	br	802e60 <__alt_data_end+0xff802e60>

00802e84 <_isatty_r>:
  802e84:	defffd04 	addi	sp,sp,-12
  802e88:	dc000015 	stw	r16,0(sp)
  802e8c:	04002074 	movhi	r16,129
  802e90:	dc400115 	stw	r17,4(sp)
  802e94:	84235a04 	addi	r16,r16,-29336
  802e98:	2023883a 	mov	r17,r4
  802e9c:	2809883a 	mov	r4,r5
  802ea0:	dfc00215 	stw	ra,8(sp)
  802ea4:	80000015 	stw	zero,0(r16)
  802ea8:	08032ec0 	call	8032ec <isatty>
  802eac:	00ffffc4 	movi	r3,-1
  802eb0:	10c00526 	beq	r2,r3,802ec8 <_isatty_r+0x44>
  802eb4:	dfc00217 	ldw	ra,8(sp)
  802eb8:	dc400117 	ldw	r17,4(sp)
  802ebc:	dc000017 	ldw	r16,0(sp)
  802ec0:	dec00304 	addi	sp,sp,12
  802ec4:	f800283a 	ret
  802ec8:	80c00017 	ldw	r3,0(r16)
  802ecc:	183ff926 	beq	r3,zero,802eb4 <__alt_data_end+0xff802eb4>
  802ed0:	88c00015 	stw	r3,0(r17)
  802ed4:	003ff706 	br	802eb4 <__alt_data_end+0xff802eb4>

00802ed8 <__divsi3>:
  802ed8:	20001b16 	blt	r4,zero,802f48 <__divsi3+0x70>
  802edc:	000f883a 	mov	r7,zero
  802ee0:	28001616 	blt	r5,zero,802f3c <__divsi3+0x64>
  802ee4:	200d883a 	mov	r6,r4
  802ee8:	29001a2e 	bgeu	r5,r4,802f54 <__divsi3+0x7c>
  802eec:	00800804 	movi	r2,32
  802ef0:	00c00044 	movi	r3,1
  802ef4:	00000106 	br	802efc <__divsi3+0x24>
  802ef8:	10000d26 	beq	r2,zero,802f30 <__divsi3+0x58>
  802efc:	294b883a 	add	r5,r5,r5
  802f00:	10bfffc4 	addi	r2,r2,-1
  802f04:	18c7883a 	add	r3,r3,r3
  802f08:	293ffb36 	bltu	r5,r4,802ef8 <__alt_data_end+0xff802ef8>
  802f0c:	0005883a 	mov	r2,zero
  802f10:	18000726 	beq	r3,zero,802f30 <__divsi3+0x58>
  802f14:	0005883a 	mov	r2,zero
  802f18:	31400236 	bltu	r6,r5,802f24 <__divsi3+0x4c>
  802f1c:	314dc83a 	sub	r6,r6,r5
  802f20:	10c4b03a 	or	r2,r2,r3
  802f24:	1806d07a 	srli	r3,r3,1
  802f28:	280ad07a 	srli	r5,r5,1
  802f2c:	183ffa1e 	bne	r3,zero,802f18 <__alt_data_end+0xff802f18>
  802f30:	38000126 	beq	r7,zero,802f38 <__divsi3+0x60>
  802f34:	0085c83a 	sub	r2,zero,r2
  802f38:	f800283a 	ret
  802f3c:	014bc83a 	sub	r5,zero,r5
  802f40:	39c0005c 	xori	r7,r7,1
  802f44:	003fe706 	br	802ee4 <__alt_data_end+0xff802ee4>
  802f48:	0109c83a 	sub	r4,zero,r4
  802f4c:	01c00044 	movi	r7,1
  802f50:	003fe306 	br	802ee0 <__alt_data_end+0xff802ee0>
  802f54:	00c00044 	movi	r3,1
  802f58:	003fee06 	br	802f14 <__alt_data_end+0xff802f14>

00802f5c <__modsi3>:
  802f5c:	20001716 	blt	r4,zero,802fbc <__modsi3+0x60>
  802f60:	000f883a 	mov	r7,zero
  802f64:	2005883a 	mov	r2,r4
  802f68:	28001216 	blt	r5,zero,802fb4 <__modsi3+0x58>
  802f6c:	2900162e 	bgeu	r5,r4,802fc8 <__modsi3+0x6c>
  802f70:	01800804 	movi	r6,32
  802f74:	00c00044 	movi	r3,1
  802f78:	00000106 	br	802f80 <__modsi3+0x24>
  802f7c:	30000a26 	beq	r6,zero,802fa8 <__modsi3+0x4c>
  802f80:	294b883a 	add	r5,r5,r5
  802f84:	31bfffc4 	addi	r6,r6,-1
  802f88:	18c7883a 	add	r3,r3,r3
  802f8c:	293ffb36 	bltu	r5,r4,802f7c <__alt_data_end+0xff802f7c>
  802f90:	18000526 	beq	r3,zero,802fa8 <__modsi3+0x4c>
  802f94:	1806d07a 	srli	r3,r3,1
  802f98:	11400136 	bltu	r2,r5,802fa0 <__modsi3+0x44>
  802f9c:	1145c83a 	sub	r2,r2,r5
  802fa0:	280ad07a 	srli	r5,r5,1
  802fa4:	183ffb1e 	bne	r3,zero,802f94 <__alt_data_end+0xff802f94>
  802fa8:	38000126 	beq	r7,zero,802fb0 <__modsi3+0x54>
  802fac:	0085c83a 	sub	r2,zero,r2
  802fb0:	f800283a 	ret
  802fb4:	014bc83a 	sub	r5,zero,r5
  802fb8:	003fec06 	br	802f6c <__alt_data_end+0xff802f6c>
  802fbc:	0109c83a 	sub	r4,zero,r4
  802fc0:	01c00044 	movi	r7,1
  802fc4:	003fe706 	br	802f64 <__alt_data_end+0xff802f64>
  802fc8:	00c00044 	movi	r3,1
  802fcc:	003ff106 	br	802f94 <__alt_data_end+0xff802f94>

00802fd0 <__udivsi3>:
  802fd0:	200d883a 	mov	r6,r4
  802fd4:	2900152e 	bgeu	r5,r4,80302c <__udivsi3+0x5c>
  802fd8:	28001416 	blt	r5,zero,80302c <__udivsi3+0x5c>
  802fdc:	00800804 	movi	r2,32
  802fe0:	00c00044 	movi	r3,1
  802fe4:	00000206 	br	802ff0 <__udivsi3+0x20>
  802fe8:	10000e26 	beq	r2,zero,803024 <__udivsi3+0x54>
  802fec:	28000516 	blt	r5,zero,803004 <__udivsi3+0x34>
  802ff0:	294b883a 	add	r5,r5,r5
  802ff4:	10bfffc4 	addi	r2,r2,-1
  802ff8:	18c7883a 	add	r3,r3,r3
  802ffc:	293ffa36 	bltu	r5,r4,802fe8 <__alt_data_end+0xff802fe8>
  803000:	18000826 	beq	r3,zero,803024 <__udivsi3+0x54>
  803004:	0005883a 	mov	r2,zero
  803008:	31400236 	bltu	r6,r5,803014 <__udivsi3+0x44>
  80300c:	314dc83a 	sub	r6,r6,r5
  803010:	10c4b03a 	or	r2,r2,r3
  803014:	1806d07a 	srli	r3,r3,1
  803018:	280ad07a 	srli	r5,r5,1
  80301c:	183ffa1e 	bne	r3,zero,803008 <__alt_data_end+0xff803008>
  803020:	f800283a 	ret
  803024:	0005883a 	mov	r2,zero
  803028:	f800283a 	ret
  80302c:	00c00044 	movi	r3,1
  803030:	003ff406 	br	803004 <__alt_data_end+0xff803004>

00803034 <__umodsi3>:
  803034:	2005883a 	mov	r2,r4
  803038:	2900122e 	bgeu	r5,r4,803084 <__umodsi3+0x50>
  80303c:	28001116 	blt	r5,zero,803084 <__umodsi3+0x50>
  803040:	01800804 	movi	r6,32
  803044:	00c00044 	movi	r3,1
  803048:	00000206 	br	803054 <__umodsi3+0x20>
  80304c:	30000c26 	beq	r6,zero,803080 <__umodsi3+0x4c>
  803050:	28000516 	blt	r5,zero,803068 <__umodsi3+0x34>
  803054:	294b883a 	add	r5,r5,r5
  803058:	31bfffc4 	addi	r6,r6,-1
  80305c:	18c7883a 	add	r3,r3,r3
  803060:	293ffa36 	bltu	r5,r4,80304c <__alt_data_end+0xff80304c>
  803064:	18000626 	beq	r3,zero,803080 <__umodsi3+0x4c>
  803068:	1806d07a 	srli	r3,r3,1
  80306c:	11400136 	bltu	r2,r5,803074 <__umodsi3+0x40>
  803070:	1145c83a 	sub	r2,r2,r5
  803074:	280ad07a 	srli	r5,r5,1
  803078:	183ffb1e 	bne	r3,zero,803068 <__alt_data_end+0xff803068>
  80307c:	f800283a 	ret
  803080:	f800283a 	ret
  803084:	00c00044 	movi	r3,1
  803088:	003ff706 	br	803068 <__alt_data_end+0xff803068>

0080308c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80308c:	defffe04 	addi	sp,sp,-8
  803090:	dfc00115 	stw	ra,4(sp)
  803094:	df000015 	stw	fp,0(sp)
  803098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80309c:	d0a00917 	ldw	r2,-32732(gp)
  8030a0:	10000326 	beq	r2,zero,8030b0 <alt_get_errno+0x24>
  8030a4:	d0a00917 	ldw	r2,-32732(gp)
  8030a8:	103ee83a 	callr	r2
  8030ac:	00000106 	br	8030b4 <alt_get_errno+0x28>
  8030b0:	d0a6ac04 	addi	r2,gp,-25936
}
  8030b4:	e037883a 	mov	sp,fp
  8030b8:	dfc00117 	ldw	ra,4(sp)
  8030bc:	df000017 	ldw	fp,0(sp)
  8030c0:	dec00204 	addi	sp,sp,8
  8030c4:	f800283a 	ret

008030c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8030c8:	defffb04 	addi	sp,sp,-20
  8030cc:	dfc00415 	stw	ra,16(sp)
  8030d0:	df000315 	stw	fp,12(sp)
  8030d4:	df000304 	addi	fp,sp,12
  8030d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8030dc:	e0bfff17 	ldw	r2,-4(fp)
  8030e0:	10000616 	blt	r2,zero,8030fc <close+0x34>
  8030e4:	e0bfff17 	ldw	r2,-4(fp)
  8030e8:	10c00324 	muli	r3,r2,12
  8030ec:	00802034 	movhi	r2,128
  8030f0:	10983604 	addi	r2,r2,24792
  8030f4:	1885883a 	add	r2,r3,r2
  8030f8:	00000106 	br	803100 <close+0x38>
  8030fc:	0005883a 	mov	r2,zero
  803100:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  803104:	e0bffd17 	ldw	r2,-12(fp)
  803108:	10001926 	beq	r2,zero,803170 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80310c:	e0bffd17 	ldw	r2,-12(fp)
  803110:	10800017 	ldw	r2,0(r2)
  803114:	10800417 	ldw	r2,16(r2)
  803118:	10000626 	beq	r2,zero,803134 <close+0x6c>
  80311c:	e0bffd17 	ldw	r2,-12(fp)
  803120:	10800017 	ldw	r2,0(r2)
  803124:	10800417 	ldw	r2,16(r2)
  803128:	e13ffd17 	ldw	r4,-12(fp)
  80312c:	103ee83a 	callr	r2
  803130:	00000106 	br	803138 <close+0x70>
  803134:	0005883a 	mov	r2,zero
  803138:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80313c:	e13fff17 	ldw	r4,-4(fp)
  803140:	08037880 	call	803788 <alt_release_fd>
    if (rval < 0)
  803144:	e0bffe17 	ldw	r2,-8(fp)
  803148:	1000070e 	bge	r2,zero,803168 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80314c:	080308c0 	call	80308c <alt_get_errno>
  803150:	1007883a 	mov	r3,r2
  803154:	e0bffe17 	ldw	r2,-8(fp)
  803158:	0085c83a 	sub	r2,zero,r2
  80315c:	18800015 	stw	r2,0(r3)
      return -1;
  803160:	00bfffc4 	movi	r2,-1
  803164:	00000706 	br	803184 <close+0xbc>
    }
    return 0;
  803168:	0005883a 	mov	r2,zero
  80316c:	00000506 	br	803184 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803170:	080308c0 	call	80308c <alt_get_errno>
  803174:	1007883a 	mov	r3,r2
  803178:	00801444 	movi	r2,81
  80317c:	18800015 	stw	r2,0(r3)
    return -1;
  803180:	00bfffc4 	movi	r2,-1
  }
}
  803184:	e037883a 	mov	sp,fp
  803188:	dfc00117 	ldw	ra,4(sp)
  80318c:	df000017 	ldw	fp,0(sp)
  803190:	dec00204 	addi	sp,sp,8
  803194:	f800283a 	ret

00803198 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803198:	defffc04 	addi	sp,sp,-16
  80319c:	df000315 	stw	fp,12(sp)
  8031a0:	df000304 	addi	fp,sp,12
  8031a4:	e13ffd15 	stw	r4,-12(fp)
  8031a8:	e17ffe15 	stw	r5,-8(fp)
  8031ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8031b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8031b4:	e037883a 	mov	sp,fp
  8031b8:	df000017 	ldw	fp,0(sp)
  8031bc:	dec00104 	addi	sp,sp,4
  8031c0:	f800283a 	ret

008031c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8031c4:	defffe04 	addi	sp,sp,-8
  8031c8:	dfc00115 	stw	ra,4(sp)
  8031cc:	df000015 	stw	fp,0(sp)
  8031d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8031d4:	d0a00917 	ldw	r2,-32732(gp)
  8031d8:	10000326 	beq	r2,zero,8031e8 <alt_get_errno+0x24>
  8031dc:	d0a00917 	ldw	r2,-32732(gp)
  8031e0:	103ee83a 	callr	r2
  8031e4:	00000106 	br	8031ec <alt_get_errno+0x28>
  8031e8:	d0a6ac04 	addi	r2,gp,-25936
}
  8031ec:	e037883a 	mov	sp,fp
  8031f0:	dfc00117 	ldw	ra,4(sp)
  8031f4:	df000017 	ldw	fp,0(sp)
  8031f8:	dec00204 	addi	sp,sp,8
  8031fc:	f800283a 	ret

00803200 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  803200:	defffb04 	addi	sp,sp,-20
  803204:	dfc00415 	stw	ra,16(sp)
  803208:	df000315 	stw	fp,12(sp)
  80320c:	df000304 	addi	fp,sp,12
  803210:	e13ffe15 	stw	r4,-8(fp)
  803214:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803218:	e0bffe17 	ldw	r2,-8(fp)
  80321c:	10000616 	blt	r2,zero,803238 <fstat+0x38>
  803220:	e0bffe17 	ldw	r2,-8(fp)
  803224:	10c00324 	muli	r3,r2,12
  803228:	00802034 	movhi	r2,128
  80322c:	10983604 	addi	r2,r2,24792
  803230:	1885883a 	add	r2,r3,r2
  803234:	00000106 	br	80323c <fstat+0x3c>
  803238:	0005883a 	mov	r2,zero
  80323c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  803240:	e0bffd17 	ldw	r2,-12(fp)
  803244:	10001026 	beq	r2,zero,803288 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  803248:	e0bffd17 	ldw	r2,-12(fp)
  80324c:	10800017 	ldw	r2,0(r2)
  803250:	10800817 	ldw	r2,32(r2)
  803254:	10000726 	beq	r2,zero,803274 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  803258:	e0bffd17 	ldw	r2,-12(fp)
  80325c:	10800017 	ldw	r2,0(r2)
  803260:	10800817 	ldw	r2,32(r2)
  803264:	e17fff17 	ldw	r5,-4(fp)
  803268:	e13ffd17 	ldw	r4,-12(fp)
  80326c:	103ee83a 	callr	r2
  803270:	00000a06 	br	80329c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  803274:	e0bfff17 	ldw	r2,-4(fp)
  803278:	00c80004 	movi	r3,8192
  80327c:	10c00115 	stw	r3,4(r2)
      return 0;
  803280:	0005883a 	mov	r2,zero
  803284:	00000506 	br	80329c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803288:	08031c40 	call	8031c4 <alt_get_errno>
  80328c:	1007883a 	mov	r3,r2
  803290:	00801444 	movi	r2,81
  803294:	18800015 	stw	r2,0(r3)
    return -1;
  803298:	00bfffc4 	movi	r2,-1
  }
}
  80329c:	e037883a 	mov	sp,fp
  8032a0:	dfc00117 	ldw	ra,4(sp)
  8032a4:	df000017 	ldw	fp,0(sp)
  8032a8:	dec00204 	addi	sp,sp,8
  8032ac:	f800283a 	ret

008032b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8032b0:	defffe04 	addi	sp,sp,-8
  8032b4:	dfc00115 	stw	ra,4(sp)
  8032b8:	df000015 	stw	fp,0(sp)
  8032bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8032c0:	d0a00917 	ldw	r2,-32732(gp)
  8032c4:	10000326 	beq	r2,zero,8032d4 <alt_get_errno+0x24>
  8032c8:	d0a00917 	ldw	r2,-32732(gp)
  8032cc:	103ee83a 	callr	r2
  8032d0:	00000106 	br	8032d8 <alt_get_errno+0x28>
  8032d4:	d0a6ac04 	addi	r2,gp,-25936
}
  8032d8:	e037883a 	mov	sp,fp
  8032dc:	dfc00117 	ldw	ra,4(sp)
  8032e0:	df000017 	ldw	fp,0(sp)
  8032e4:	dec00204 	addi	sp,sp,8
  8032e8:	f800283a 	ret

008032ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8032ec:	deffed04 	addi	sp,sp,-76
  8032f0:	dfc01215 	stw	ra,72(sp)
  8032f4:	df001115 	stw	fp,68(sp)
  8032f8:	df001104 	addi	fp,sp,68
  8032fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803300:	e0bfff17 	ldw	r2,-4(fp)
  803304:	10000616 	blt	r2,zero,803320 <isatty+0x34>
  803308:	e0bfff17 	ldw	r2,-4(fp)
  80330c:	10c00324 	muli	r3,r2,12
  803310:	00802034 	movhi	r2,128
  803314:	10983604 	addi	r2,r2,24792
  803318:	1885883a 	add	r2,r3,r2
  80331c:	00000106 	br	803324 <isatty+0x38>
  803320:	0005883a 	mov	r2,zero
  803324:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  803328:	e0bfef17 	ldw	r2,-68(fp)
  80332c:	10000e26 	beq	r2,zero,803368 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  803330:	e0bfef17 	ldw	r2,-68(fp)
  803334:	10800017 	ldw	r2,0(r2)
  803338:	10800817 	ldw	r2,32(r2)
  80333c:	1000021e 	bne	r2,zero,803348 <isatty+0x5c>
    {
      return 1;
  803340:	00800044 	movi	r2,1
  803344:	00000d06 	br	80337c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803348:	e0bff004 	addi	r2,fp,-64
  80334c:	100b883a 	mov	r5,r2
  803350:	e13fff17 	ldw	r4,-4(fp)
  803354:	08032000 	call	803200 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803358:	e0bff117 	ldw	r2,-60(fp)
  80335c:	10880020 	cmpeqi	r2,r2,8192
  803360:	10803fcc 	andi	r2,r2,255
  803364:	00000506 	br	80337c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803368:	08032b00 	call	8032b0 <alt_get_errno>
  80336c:	1007883a 	mov	r3,r2
  803370:	00801444 	movi	r2,81
  803374:	18800015 	stw	r2,0(r3)
    return 0;
  803378:	0005883a 	mov	r2,zero
  }
}
  80337c:	e037883a 	mov	sp,fp
  803380:	dfc00117 	ldw	ra,4(sp)
  803384:	df000017 	ldw	fp,0(sp)
  803388:	dec00204 	addi	sp,sp,8
  80338c:	f800283a 	ret

00803390 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  803390:	defffc04 	addi	sp,sp,-16
  803394:	df000315 	stw	fp,12(sp)
  803398:	df000304 	addi	fp,sp,12
  80339c:	e13ffd15 	stw	r4,-12(fp)
  8033a0:	e17ffe15 	stw	r5,-8(fp)
  8033a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8033a8:	e0fffe17 	ldw	r3,-8(fp)
  8033ac:	e0bffd17 	ldw	r2,-12(fp)
  8033b0:	18800c26 	beq	r3,r2,8033e4 <alt_load_section+0x54>
  {
    while( to != end )
  8033b4:	00000806 	br	8033d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
  8033b8:	e0bffe17 	ldw	r2,-8(fp)
  8033bc:	10c00104 	addi	r3,r2,4
  8033c0:	e0fffe15 	stw	r3,-8(fp)
  8033c4:	e0fffd17 	ldw	r3,-12(fp)
  8033c8:	19000104 	addi	r4,r3,4
  8033cc:	e13ffd15 	stw	r4,-12(fp)
  8033d0:	18c00017 	ldw	r3,0(r3)
  8033d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8033d8:	e0fffe17 	ldw	r3,-8(fp)
  8033dc:	e0bfff17 	ldw	r2,-4(fp)
  8033e0:	18bff51e 	bne	r3,r2,8033b8 <__alt_data_end+0xff8033b8>
    {
      *to++ = *from++;
    }
  }
}
  8033e4:	0001883a 	nop
  8033e8:	e037883a 	mov	sp,fp
  8033ec:	df000017 	ldw	fp,0(sp)
  8033f0:	dec00104 	addi	sp,sp,4
  8033f4:	f800283a 	ret

008033f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8033f8:	defffe04 	addi	sp,sp,-8
  8033fc:	dfc00115 	stw	ra,4(sp)
  803400:	df000015 	stw	fp,0(sp)
  803404:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  803408:	01802034 	movhi	r6,128
  80340c:	319cbc04 	addi	r6,r6,29424
  803410:	01402034 	movhi	r5,128
  803414:	29562104 	addi	r5,r5,22660
  803418:	01002034 	movhi	r4,128
  80341c:	211cbc04 	addi	r4,r4,29424
  803420:	08033900 	call	803390 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  803424:	01802034 	movhi	r6,128
  803428:	31809104 	addi	r6,r6,580
  80342c:	01402034 	movhi	r5,128
  803430:	29400804 	addi	r5,r5,32
  803434:	01002034 	movhi	r4,128
  803438:	21000804 	addi	r4,r4,32
  80343c:	08033900 	call	803390 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  803440:	01802034 	movhi	r6,128
  803444:	31962104 	addi	r6,r6,22660
  803448:	01402034 	movhi	r5,128
  80344c:	29560f04 	addi	r5,r5,22588
  803450:	01002034 	movhi	r4,128
  803454:	21160f04 	addi	r4,r4,22588
  803458:	08033900 	call	803390 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80345c:	08047280 	call	804728 <alt_dcache_flush_all>
  alt_icache_flush_all();
  803460:	08049100 	call	804910 <alt_icache_flush_all>
}
  803464:	0001883a 	nop
  803468:	e037883a 	mov	sp,fp
  80346c:	dfc00117 	ldw	ra,4(sp)
  803470:	df000017 	ldw	fp,0(sp)
  803474:	dec00204 	addi	sp,sp,8
  803478:	f800283a 	ret

0080347c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80347c:	defffe04 	addi	sp,sp,-8
  803480:	dfc00115 	stw	ra,4(sp)
  803484:	df000015 	stw	fp,0(sp)
  803488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80348c:	d0a00917 	ldw	r2,-32732(gp)
  803490:	10000326 	beq	r2,zero,8034a0 <alt_get_errno+0x24>
  803494:	d0a00917 	ldw	r2,-32732(gp)
  803498:	103ee83a 	callr	r2
  80349c:	00000106 	br	8034a4 <alt_get_errno+0x28>
  8034a0:	d0a6ac04 	addi	r2,gp,-25936
}
  8034a4:	e037883a 	mov	sp,fp
  8034a8:	dfc00117 	ldw	ra,4(sp)
  8034ac:	df000017 	ldw	fp,0(sp)
  8034b0:	dec00204 	addi	sp,sp,8
  8034b4:	f800283a 	ret

008034b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8034b8:	defff904 	addi	sp,sp,-28
  8034bc:	dfc00615 	stw	ra,24(sp)
  8034c0:	df000515 	stw	fp,20(sp)
  8034c4:	df000504 	addi	fp,sp,20
  8034c8:	e13ffd15 	stw	r4,-12(fp)
  8034cc:	e17ffe15 	stw	r5,-8(fp)
  8034d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8034d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8034d8:	e0bffd17 	ldw	r2,-12(fp)
  8034dc:	10000616 	blt	r2,zero,8034f8 <lseek+0x40>
  8034e0:	e0bffd17 	ldw	r2,-12(fp)
  8034e4:	10c00324 	muli	r3,r2,12
  8034e8:	00802034 	movhi	r2,128
  8034ec:	10983604 	addi	r2,r2,24792
  8034f0:	1885883a 	add	r2,r3,r2
  8034f4:	00000106 	br	8034fc <lseek+0x44>
  8034f8:	0005883a 	mov	r2,zero
  8034fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  803500:	e0bffc17 	ldw	r2,-16(fp)
  803504:	10001026 	beq	r2,zero,803548 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803508:	e0bffc17 	ldw	r2,-16(fp)
  80350c:	10800017 	ldw	r2,0(r2)
  803510:	10800717 	ldw	r2,28(r2)
  803514:	10000926 	beq	r2,zero,80353c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803518:	e0bffc17 	ldw	r2,-16(fp)
  80351c:	10800017 	ldw	r2,0(r2)
  803520:	10800717 	ldw	r2,28(r2)
  803524:	e1bfff17 	ldw	r6,-4(fp)
  803528:	e17ffe17 	ldw	r5,-8(fp)
  80352c:	e13ffc17 	ldw	r4,-16(fp)
  803530:	103ee83a 	callr	r2
  803534:	e0bffb15 	stw	r2,-20(fp)
  803538:	00000506 	br	803550 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80353c:	00bfde84 	movi	r2,-134
  803540:	e0bffb15 	stw	r2,-20(fp)
  803544:	00000206 	br	803550 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  803548:	00bfebc4 	movi	r2,-81
  80354c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  803550:	e0bffb17 	ldw	r2,-20(fp)
  803554:	1000070e 	bge	r2,zero,803574 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  803558:	080347c0 	call	80347c <alt_get_errno>
  80355c:	1007883a 	mov	r3,r2
  803560:	e0bffb17 	ldw	r2,-20(fp)
  803564:	0085c83a 	sub	r2,zero,r2
  803568:	18800015 	stw	r2,0(r3)
    rc = -1;
  80356c:	00bfffc4 	movi	r2,-1
  803570:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  803574:	e0bffb17 	ldw	r2,-20(fp)
}
  803578:	e037883a 	mov	sp,fp
  80357c:	dfc00117 	ldw	ra,4(sp)
  803580:	df000017 	ldw	fp,0(sp)
  803584:	dec00204 	addi	sp,sp,8
  803588:	f800283a 	ret

0080358c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80358c:	defffd04 	addi	sp,sp,-12
  803590:	dfc00215 	stw	ra,8(sp)
  803594:	df000115 	stw	fp,4(sp)
  803598:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80359c:	0009883a 	mov	r4,zero
  8035a0:	0803a040 	call	803a04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8035a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8035a8:	0803a3c0 	call	803a3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8035ac:	01802034 	movhi	r6,128
  8035b0:	31961904 	addi	r6,r6,22628
  8035b4:	01402034 	movhi	r5,128
  8035b8:	29561904 	addi	r5,r5,22628
  8035bc:	01002034 	movhi	r4,128
  8035c0:	21161904 	addi	r4,r4,22628
  8035c4:	0804ca80 	call	804ca8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8035c8:	08048500 	call	804850 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8035cc:	01002034 	movhi	r4,128
  8035d0:	21122c04 	addi	r4,r4,18608
  8035d4:	08054a80 	call	8054a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8035d8:	d0a6ad17 	ldw	r2,-25932(gp)
  8035dc:	d0e6ae17 	ldw	r3,-25928(gp)
  8035e0:	d126af17 	ldw	r4,-25924(gp)
  8035e4:	200d883a 	mov	r6,r4
  8035e8:	180b883a 	mov	r5,r3
  8035ec:	1009883a 	mov	r4,r2
  8035f0:	08002900 	call	800290 <main>
  8035f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8035f8:	01000044 	movi	r4,1
  8035fc:	08030c80 	call	8030c8 <close>
  exit (result);
  803600:	e13fff17 	ldw	r4,-4(fp)
  803604:	08054bc0 	call	8054bc <exit>

00803608 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  803608:	defffe04 	addi	sp,sp,-8
  80360c:	df000115 	stw	fp,4(sp)
  803610:	df000104 	addi	fp,sp,4
  803614:	e13fff15 	stw	r4,-4(fp)
}
  803618:	0001883a 	nop
  80361c:	e037883a 	mov	sp,fp
  803620:	df000017 	ldw	fp,0(sp)
  803624:	dec00104 	addi	sp,sp,4
  803628:	f800283a 	ret

0080362c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80362c:	defffe04 	addi	sp,sp,-8
  803630:	df000115 	stw	fp,4(sp)
  803634:	df000104 	addi	fp,sp,4
  803638:	e13fff15 	stw	r4,-4(fp)
}
  80363c:	0001883a 	nop
  803640:	e037883a 	mov	sp,fp
  803644:	df000017 	ldw	fp,0(sp)
  803648:	dec00104 	addi	sp,sp,4
  80364c:	f800283a 	ret

00803650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803650:	defffe04 	addi	sp,sp,-8
  803654:	dfc00115 	stw	ra,4(sp)
  803658:	df000015 	stw	fp,0(sp)
  80365c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803660:	d0a00917 	ldw	r2,-32732(gp)
  803664:	10000326 	beq	r2,zero,803674 <alt_get_errno+0x24>
  803668:	d0a00917 	ldw	r2,-32732(gp)
  80366c:	103ee83a 	callr	r2
  803670:	00000106 	br	803678 <alt_get_errno+0x28>
  803674:	d0a6ac04 	addi	r2,gp,-25936
}
  803678:	e037883a 	mov	sp,fp
  80367c:	dfc00117 	ldw	ra,4(sp)
  803680:	df000017 	ldw	fp,0(sp)
  803684:	dec00204 	addi	sp,sp,8
  803688:	f800283a 	ret

0080368c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80368c:	defff904 	addi	sp,sp,-28
  803690:	dfc00615 	stw	ra,24(sp)
  803694:	df000515 	stw	fp,20(sp)
  803698:	df000504 	addi	fp,sp,20
  80369c:	e13ffd15 	stw	r4,-12(fp)
  8036a0:	e17ffe15 	stw	r5,-8(fp)
  8036a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8036a8:	e0bffd17 	ldw	r2,-12(fp)
  8036ac:	10000616 	blt	r2,zero,8036c8 <read+0x3c>
  8036b0:	e0bffd17 	ldw	r2,-12(fp)
  8036b4:	10c00324 	muli	r3,r2,12
  8036b8:	00802034 	movhi	r2,128
  8036bc:	10983604 	addi	r2,r2,24792
  8036c0:	1885883a 	add	r2,r3,r2
  8036c4:	00000106 	br	8036cc <read+0x40>
  8036c8:	0005883a 	mov	r2,zero
  8036cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8036d0:	e0bffb17 	ldw	r2,-20(fp)
  8036d4:	10002226 	beq	r2,zero,803760 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8036d8:	e0bffb17 	ldw	r2,-20(fp)
  8036dc:	10800217 	ldw	r2,8(r2)
  8036e0:	108000cc 	andi	r2,r2,3
  8036e4:	10800060 	cmpeqi	r2,r2,1
  8036e8:	1000181e 	bne	r2,zero,80374c <read+0xc0>
        (fd->dev->read))
  8036ec:	e0bffb17 	ldw	r2,-20(fp)
  8036f0:	10800017 	ldw	r2,0(r2)
  8036f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8036f8:	10001426 	beq	r2,zero,80374c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8036fc:	e0bffb17 	ldw	r2,-20(fp)
  803700:	10800017 	ldw	r2,0(r2)
  803704:	10800517 	ldw	r2,20(r2)
  803708:	e0ffff17 	ldw	r3,-4(fp)
  80370c:	180d883a 	mov	r6,r3
  803710:	e17ffe17 	ldw	r5,-8(fp)
  803714:	e13ffb17 	ldw	r4,-20(fp)
  803718:	103ee83a 	callr	r2
  80371c:	e0bffc15 	stw	r2,-16(fp)
  803720:	e0bffc17 	ldw	r2,-16(fp)
  803724:	1000070e 	bge	r2,zero,803744 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  803728:	08036500 	call	803650 <alt_get_errno>
  80372c:	1007883a 	mov	r3,r2
  803730:	e0bffc17 	ldw	r2,-16(fp)
  803734:	0085c83a 	sub	r2,zero,r2
  803738:	18800015 	stw	r2,0(r3)
          return -1;
  80373c:	00bfffc4 	movi	r2,-1
  803740:	00000c06 	br	803774 <read+0xe8>
        }
        return rval;
  803744:	e0bffc17 	ldw	r2,-16(fp)
  803748:	00000a06 	br	803774 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80374c:	08036500 	call	803650 <alt_get_errno>
  803750:	1007883a 	mov	r3,r2
  803754:	00800344 	movi	r2,13
  803758:	18800015 	stw	r2,0(r3)
  80375c:	00000406 	br	803770 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  803760:	08036500 	call	803650 <alt_get_errno>
  803764:	1007883a 	mov	r3,r2
  803768:	00801444 	movi	r2,81
  80376c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803770:	00bfffc4 	movi	r2,-1
}
  803774:	e037883a 	mov	sp,fp
  803778:	dfc00117 	ldw	ra,4(sp)
  80377c:	df000017 	ldw	fp,0(sp)
  803780:	dec00204 	addi	sp,sp,8
  803784:	f800283a 	ret

00803788 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803788:	defffe04 	addi	sp,sp,-8
  80378c:	df000115 	stw	fp,4(sp)
  803790:	df000104 	addi	fp,sp,4
  803794:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803798:	e0bfff17 	ldw	r2,-4(fp)
  80379c:	108000d0 	cmplti	r2,r2,3
  8037a0:	10000d1e 	bne	r2,zero,8037d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8037a4:	00802034 	movhi	r2,128
  8037a8:	10983604 	addi	r2,r2,24792
  8037ac:	e0ffff17 	ldw	r3,-4(fp)
  8037b0:	18c00324 	muli	r3,r3,12
  8037b4:	10c5883a 	add	r2,r2,r3
  8037b8:	10800204 	addi	r2,r2,8
  8037bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8037c0:	00802034 	movhi	r2,128
  8037c4:	10983604 	addi	r2,r2,24792
  8037c8:	e0ffff17 	ldw	r3,-4(fp)
  8037cc:	18c00324 	muli	r3,r3,12
  8037d0:	10c5883a 	add	r2,r2,r3
  8037d4:	10000015 	stw	zero,0(r2)
  }
}
  8037d8:	0001883a 	nop
  8037dc:	e037883a 	mov	sp,fp
  8037e0:	df000017 	ldw	fp,0(sp)
  8037e4:	dec00104 	addi	sp,sp,4
  8037e8:	f800283a 	ret

008037ec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8037ec:	defff904 	addi	sp,sp,-28
  8037f0:	df000615 	stw	fp,24(sp)
  8037f4:	df000604 	addi	fp,sp,24
  8037f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8037fc:	0005303a 	rdctl	r2,status
  803800:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803804:	e0fffe17 	ldw	r3,-8(fp)
  803808:	00bfff84 	movi	r2,-2
  80380c:	1884703a 	and	r2,r3,r2
  803810:	1001703a 	wrctl	status,r2
  
  return context;
  803814:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803818:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80381c:	d0a00a17 	ldw	r2,-32728(gp)
  803820:	10c000c4 	addi	r3,r2,3
  803824:	00bfff04 	movi	r2,-4
  803828:	1884703a 	and	r2,r3,r2
  80382c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  803830:	d0e00a17 	ldw	r3,-32728(gp)
  803834:	e0bfff17 	ldw	r2,-4(fp)
  803838:	1887883a 	add	r3,r3,r2
  80383c:	00804034 	movhi	r2,256
  803840:	10800004 	addi	r2,r2,0
  803844:	10c0062e 	bgeu	r2,r3,803860 <sbrk+0x74>
  803848:	e0bffb17 	ldw	r2,-20(fp)
  80384c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803850:	e0bffa17 	ldw	r2,-24(fp)
  803854:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803858:	00bfffc4 	movi	r2,-1
  80385c:	00000b06 	br	80388c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  803860:	d0a00a17 	ldw	r2,-32728(gp)
  803864:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  803868:	d0e00a17 	ldw	r3,-32728(gp)
  80386c:	e0bfff17 	ldw	r2,-4(fp)
  803870:	1885883a 	add	r2,r3,r2
  803874:	d0a00a15 	stw	r2,-32728(gp)
  803878:	e0bffb17 	ldw	r2,-20(fp)
  80387c:	e0bffc15 	stw	r2,-16(fp)
  803880:	e0bffc17 	ldw	r2,-16(fp)
  803884:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  803888:	e0bffd17 	ldw	r2,-12(fp)
} 
  80388c:	e037883a 	mov	sp,fp
  803890:	df000017 	ldw	fp,0(sp)
  803894:	dec00104 	addi	sp,sp,4
  803898:	f800283a 	ret

0080389c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80389c:	defffe04 	addi	sp,sp,-8
  8038a0:	dfc00115 	stw	ra,4(sp)
  8038a4:	df000015 	stw	fp,0(sp)
  8038a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8038ac:	d0a00917 	ldw	r2,-32732(gp)
  8038b0:	10000326 	beq	r2,zero,8038c0 <alt_get_errno+0x24>
  8038b4:	d0a00917 	ldw	r2,-32732(gp)
  8038b8:	103ee83a 	callr	r2
  8038bc:	00000106 	br	8038c4 <alt_get_errno+0x28>
  8038c0:	d0a6ac04 	addi	r2,gp,-25936
}
  8038c4:	e037883a 	mov	sp,fp
  8038c8:	dfc00117 	ldw	ra,4(sp)
  8038cc:	df000017 	ldw	fp,0(sp)
  8038d0:	dec00204 	addi	sp,sp,8
  8038d4:	f800283a 	ret

008038d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8038d8:	defff904 	addi	sp,sp,-28
  8038dc:	dfc00615 	stw	ra,24(sp)
  8038e0:	df000515 	stw	fp,20(sp)
  8038e4:	df000504 	addi	fp,sp,20
  8038e8:	e13ffd15 	stw	r4,-12(fp)
  8038ec:	e17ffe15 	stw	r5,-8(fp)
  8038f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8038f4:	e0bffd17 	ldw	r2,-12(fp)
  8038f8:	10000616 	blt	r2,zero,803914 <write+0x3c>
  8038fc:	e0bffd17 	ldw	r2,-12(fp)
  803900:	10c00324 	muli	r3,r2,12
  803904:	00802034 	movhi	r2,128
  803908:	10983604 	addi	r2,r2,24792
  80390c:	1885883a 	add	r2,r3,r2
  803910:	00000106 	br	803918 <write+0x40>
  803914:	0005883a 	mov	r2,zero
  803918:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80391c:	e0bffb17 	ldw	r2,-20(fp)
  803920:	10002126 	beq	r2,zero,8039a8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803924:	e0bffb17 	ldw	r2,-20(fp)
  803928:	10800217 	ldw	r2,8(r2)
  80392c:	108000cc 	andi	r2,r2,3
  803930:	10001826 	beq	r2,zero,803994 <write+0xbc>
  803934:	e0bffb17 	ldw	r2,-20(fp)
  803938:	10800017 	ldw	r2,0(r2)
  80393c:	10800617 	ldw	r2,24(r2)
  803940:	10001426 	beq	r2,zero,803994 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  803944:	e0bffb17 	ldw	r2,-20(fp)
  803948:	10800017 	ldw	r2,0(r2)
  80394c:	10800617 	ldw	r2,24(r2)
  803950:	e0ffff17 	ldw	r3,-4(fp)
  803954:	180d883a 	mov	r6,r3
  803958:	e17ffe17 	ldw	r5,-8(fp)
  80395c:	e13ffb17 	ldw	r4,-20(fp)
  803960:	103ee83a 	callr	r2
  803964:	e0bffc15 	stw	r2,-16(fp)
  803968:	e0bffc17 	ldw	r2,-16(fp)
  80396c:	1000070e 	bge	r2,zero,80398c <write+0xb4>
      {
        ALT_ERRNO = -rval;
  803970:	080389c0 	call	80389c <alt_get_errno>
  803974:	1007883a 	mov	r3,r2
  803978:	e0bffc17 	ldw	r2,-16(fp)
  80397c:	0085c83a 	sub	r2,zero,r2
  803980:	18800015 	stw	r2,0(r3)
        return -1;
  803984:	00bfffc4 	movi	r2,-1
  803988:	00000c06 	br	8039bc <write+0xe4>
      }
      return rval;
  80398c:	e0bffc17 	ldw	r2,-16(fp)
  803990:	00000a06 	br	8039bc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  803994:	080389c0 	call	80389c <alt_get_errno>
  803998:	1007883a 	mov	r3,r2
  80399c:	00800344 	movi	r2,13
  8039a0:	18800015 	stw	r2,0(r3)
  8039a4:	00000406 	br	8039b8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8039a8:	080389c0 	call	80389c <alt_get_errno>
  8039ac:	1007883a 	mov	r3,r2
  8039b0:	00801444 	movi	r2,81
  8039b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8039b8:	00bfffc4 	movi	r2,-1
}
  8039bc:	e037883a 	mov	sp,fp
  8039c0:	dfc00117 	ldw	ra,4(sp)
  8039c4:	df000017 	ldw	fp,0(sp)
  8039c8:	dec00204 	addi	sp,sp,8
  8039cc:	f800283a 	ret

008039d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8039d0:	defffd04 	addi	sp,sp,-12
  8039d4:	dfc00215 	stw	ra,8(sp)
  8039d8:	df000115 	stw	fp,4(sp)
  8039dc:	df000104 	addi	fp,sp,4
  8039e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8039e4:	d1600604 	addi	r5,gp,-32744
  8039e8:	e13fff17 	ldw	r4,-4(fp)
  8039ec:	08047ac0 	call	8047ac <alt_dev_llist_insert>
}
  8039f0:	e037883a 	mov	sp,fp
  8039f4:	dfc00117 	ldw	ra,4(sp)
  8039f8:	df000017 	ldw	fp,0(sp)
  8039fc:	dec00204 	addi	sp,sp,8
  803a00:	f800283a 	ret

00803a04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  803a04:	defffd04 	addi	sp,sp,-12
  803a08:	dfc00215 	stw	ra,8(sp)
  803a0c:	df000115 	stw	fp,4(sp)
  803a10:	df000104 	addi	fp,sp,4
  803a14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  803a18:	080511c0 	call	80511c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  803a1c:	00800044 	movi	r2,1
  803a20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  803a24:	0001883a 	nop
  803a28:	e037883a 	mov	sp,fp
  803a2c:	dfc00117 	ldw	ra,4(sp)
  803a30:	df000017 	ldw	fp,0(sp)
  803a34:	dec00204 	addi	sp,sp,8
  803a38:	f800283a 	ret

00803a3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  803a3c:	defffe04 	addi	sp,sp,-8
  803a40:	dfc00115 	stw	ra,4(sp)
  803a44:	df000015 	stw	fp,0(sp)
  803a48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  803a4c:	01c0fa04 	movi	r7,1000
  803a50:	01800044 	movi	r6,1
  803a54:	000b883a 	mov	r5,zero
  803a58:	01004034 	movhi	r4,256
  803a5c:	21040004 	addi	r4,r4,4096
  803a60:	08045800 	call	804580 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  803a64:	01800404 	movi	r6,16
  803a68:	000b883a 	mov	r5,zero
  803a6c:	01002034 	movhi	r4,128
  803a70:	2118a004 	addi	r4,r4,25216
  803a74:	0803c040 	call	803c04 <altera_avalon_jtag_uart_init>
  803a78:	01002034 	movhi	r4,128
  803a7c:	21189604 	addi	r4,r4,25176
  803a80:	08039d00 	call	8039d0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  803a84:	0001883a 	nop
}
  803a88:	0001883a 	nop
  803a8c:	e037883a 	mov	sp,fp
  803a90:	dfc00117 	ldw	ra,4(sp)
  803a94:	df000017 	ldw	fp,0(sp)
  803a98:	dec00204 	addi	sp,sp,8
  803a9c:	f800283a 	ret

00803aa0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  803aa0:	defffa04 	addi	sp,sp,-24
  803aa4:	dfc00515 	stw	ra,20(sp)
  803aa8:	df000415 	stw	fp,16(sp)
  803aac:	df000404 	addi	fp,sp,16
  803ab0:	e13ffd15 	stw	r4,-12(fp)
  803ab4:	e17ffe15 	stw	r5,-8(fp)
  803ab8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803abc:	e0bffd17 	ldw	r2,-12(fp)
  803ac0:	10800017 	ldw	r2,0(r2)
  803ac4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  803ac8:	e0bffc17 	ldw	r2,-16(fp)
  803acc:	10c00a04 	addi	r3,r2,40
  803ad0:	e0bffd17 	ldw	r2,-12(fp)
  803ad4:	10800217 	ldw	r2,8(r2)
  803ad8:	100f883a 	mov	r7,r2
  803adc:	e1bfff17 	ldw	r6,-4(fp)
  803ae0:	e17ffe17 	ldw	r5,-8(fp)
  803ae4:	1809883a 	mov	r4,r3
  803ae8:	08040c80 	call	8040c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  803aec:	e037883a 	mov	sp,fp
  803af0:	dfc00117 	ldw	ra,4(sp)
  803af4:	df000017 	ldw	fp,0(sp)
  803af8:	dec00204 	addi	sp,sp,8
  803afc:	f800283a 	ret

00803b00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  803b00:	defffa04 	addi	sp,sp,-24
  803b04:	dfc00515 	stw	ra,20(sp)
  803b08:	df000415 	stw	fp,16(sp)
  803b0c:	df000404 	addi	fp,sp,16
  803b10:	e13ffd15 	stw	r4,-12(fp)
  803b14:	e17ffe15 	stw	r5,-8(fp)
  803b18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803b1c:	e0bffd17 	ldw	r2,-12(fp)
  803b20:	10800017 	ldw	r2,0(r2)
  803b24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  803b28:	e0bffc17 	ldw	r2,-16(fp)
  803b2c:	10c00a04 	addi	r3,r2,40
  803b30:	e0bffd17 	ldw	r2,-12(fp)
  803b34:	10800217 	ldw	r2,8(r2)
  803b38:	100f883a 	mov	r7,r2
  803b3c:	e1bfff17 	ldw	r6,-4(fp)
  803b40:	e17ffe17 	ldw	r5,-8(fp)
  803b44:	1809883a 	mov	r4,r3
  803b48:	08042e40 	call	8042e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  803b4c:	e037883a 	mov	sp,fp
  803b50:	dfc00117 	ldw	ra,4(sp)
  803b54:	df000017 	ldw	fp,0(sp)
  803b58:	dec00204 	addi	sp,sp,8
  803b5c:	f800283a 	ret

00803b60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  803b60:	defffc04 	addi	sp,sp,-16
  803b64:	dfc00315 	stw	ra,12(sp)
  803b68:	df000215 	stw	fp,8(sp)
  803b6c:	df000204 	addi	fp,sp,8
  803b70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803b74:	e0bfff17 	ldw	r2,-4(fp)
  803b78:	10800017 	ldw	r2,0(r2)
  803b7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  803b80:	e0bffe17 	ldw	r2,-8(fp)
  803b84:	10c00a04 	addi	r3,r2,40
  803b88:	e0bfff17 	ldw	r2,-4(fp)
  803b8c:	10800217 	ldw	r2,8(r2)
  803b90:	100b883a 	mov	r5,r2
  803b94:	1809883a 	mov	r4,r3
  803b98:	0803f700 	call	803f70 <altera_avalon_jtag_uart_close>
}
  803b9c:	e037883a 	mov	sp,fp
  803ba0:	dfc00117 	ldw	ra,4(sp)
  803ba4:	df000017 	ldw	fp,0(sp)
  803ba8:	dec00204 	addi	sp,sp,8
  803bac:	f800283a 	ret

00803bb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  803bb0:	defffa04 	addi	sp,sp,-24
  803bb4:	dfc00515 	stw	ra,20(sp)
  803bb8:	df000415 	stw	fp,16(sp)
  803bbc:	df000404 	addi	fp,sp,16
  803bc0:	e13ffd15 	stw	r4,-12(fp)
  803bc4:	e17ffe15 	stw	r5,-8(fp)
  803bc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  803bcc:	e0bffd17 	ldw	r2,-12(fp)
  803bd0:	10800017 	ldw	r2,0(r2)
  803bd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  803bd8:	e0bffc17 	ldw	r2,-16(fp)
  803bdc:	10800a04 	addi	r2,r2,40
  803be0:	e1bfff17 	ldw	r6,-4(fp)
  803be4:	e17ffe17 	ldw	r5,-8(fp)
  803be8:	1009883a 	mov	r4,r2
  803bec:	0803fd80 	call	803fd8 <altera_avalon_jtag_uart_ioctl>
}
  803bf0:	e037883a 	mov	sp,fp
  803bf4:	dfc00117 	ldw	ra,4(sp)
  803bf8:	df000017 	ldw	fp,0(sp)
  803bfc:	dec00204 	addi	sp,sp,8
  803c00:	f800283a 	ret

00803c04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  803c04:	defffa04 	addi	sp,sp,-24
  803c08:	dfc00515 	stw	ra,20(sp)
  803c0c:	df000415 	stw	fp,16(sp)
  803c10:	df000404 	addi	fp,sp,16
  803c14:	e13ffd15 	stw	r4,-12(fp)
  803c18:	e17ffe15 	stw	r5,-8(fp)
  803c1c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803c20:	e0bffd17 	ldw	r2,-12(fp)
  803c24:	00c00044 	movi	r3,1
  803c28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  803c2c:	e0bffd17 	ldw	r2,-12(fp)
  803c30:	10800017 	ldw	r2,0(r2)
  803c34:	10800104 	addi	r2,r2,4
  803c38:	1007883a 	mov	r3,r2
  803c3c:	e0bffd17 	ldw	r2,-12(fp)
  803c40:	10800817 	ldw	r2,32(r2)
  803c44:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  803c48:	e0bffe17 	ldw	r2,-8(fp)
  803c4c:	e0ffff17 	ldw	r3,-4(fp)
  803c50:	d8000015 	stw	zero,0(sp)
  803c54:	e1fffd17 	ldw	r7,-12(fp)
  803c58:	01802034 	movhi	r6,128
  803c5c:	318f3104 	addi	r6,r6,15556
  803c60:	180b883a 	mov	r5,r3
  803c64:	1009883a 	mov	r4,r2
  803c68:	08049440 	call	804944 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  803c6c:	e0bffd17 	ldw	r2,-12(fp)
  803c70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  803c74:	e0bffd17 	ldw	r2,-12(fp)
  803c78:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  803c7c:	d0e6b117 	ldw	r3,-25916(gp)
  803c80:	e1fffd17 	ldw	r7,-12(fp)
  803c84:	01802034 	movhi	r6,128
  803c88:	318fb404 	addi	r6,r6,16080
  803c8c:	180b883a 	mov	r5,r3
  803c90:	1009883a 	mov	r4,r2
  803c94:	08045fc0 	call	8045fc <alt_alarm_start>
  803c98:	1000040e 	bge	r2,zero,803cac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  803c9c:	e0fffd17 	ldw	r3,-12(fp)
  803ca0:	00a00034 	movhi	r2,32768
  803ca4:	10bfffc4 	addi	r2,r2,-1
  803ca8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  803cac:	0001883a 	nop
  803cb0:	e037883a 	mov	sp,fp
  803cb4:	dfc00117 	ldw	ra,4(sp)
  803cb8:	df000017 	ldw	fp,0(sp)
  803cbc:	dec00204 	addi	sp,sp,8
  803cc0:	f800283a 	ret

00803cc4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  803cc4:	defff804 	addi	sp,sp,-32
  803cc8:	df000715 	stw	fp,28(sp)
  803ccc:	df000704 	addi	fp,sp,28
  803cd0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  803cd4:	e0bfff17 	ldw	r2,-4(fp)
  803cd8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  803cdc:	e0bffb17 	ldw	r2,-20(fp)
  803ce0:	10800017 	ldw	r2,0(r2)
  803ce4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803ce8:	e0bffc17 	ldw	r2,-16(fp)
  803cec:	10800104 	addi	r2,r2,4
  803cf0:	10800037 	ldwio	r2,0(r2)
  803cf4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  803cf8:	e0bffd17 	ldw	r2,-12(fp)
  803cfc:	1080c00c 	andi	r2,r2,768
  803d00:	10006d26 	beq	r2,zero,803eb8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  803d04:	e0bffd17 	ldw	r2,-12(fp)
  803d08:	1080400c 	andi	r2,r2,256
  803d0c:	10003526 	beq	r2,zero,803de4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  803d10:	00800074 	movhi	r2,1
  803d14:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803d18:	e0bffb17 	ldw	r2,-20(fp)
  803d1c:	10800a17 	ldw	r2,40(r2)
  803d20:	10800044 	addi	r2,r2,1
  803d24:	1081ffcc 	andi	r2,r2,2047
  803d28:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  803d2c:	e0bffb17 	ldw	r2,-20(fp)
  803d30:	10c00b17 	ldw	r3,44(r2)
  803d34:	e0bffe17 	ldw	r2,-8(fp)
  803d38:	18801526 	beq	r3,r2,803d90 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  803d3c:	e0bffc17 	ldw	r2,-16(fp)
  803d40:	10800037 	ldwio	r2,0(r2)
  803d44:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  803d48:	e0bff917 	ldw	r2,-28(fp)
  803d4c:	10a0000c 	andi	r2,r2,32768
  803d50:	10001126 	beq	r2,zero,803d98 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  803d54:	e0bffb17 	ldw	r2,-20(fp)
  803d58:	10800a17 	ldw	r2,40(r2)
  803d5c:	e0fff917 	ldw	r3,-28(fp)
  803d60:	1809883a 	mov	r4,r3
  803d64:	e0fffb17 	ldw	r3,-20(fp)
  803d68:	1885883a 	add	r2,r3,r2
  803d6c:	10800e04 	addi	r2,r2,56
  803d70:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803d74:	e0bffb17 	ldw	r2,-20(fp)
  803d78:	10800a17 	ldw	r2,40(r2)
  803d7c:	10800044 	addi	r2,r2,1
  803d80:	10c1ffcc 	andi	r3,r2,2047
  803d84:	e0bffb17 	ldw	r2,-20(fp)
  803d88:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  803d8c:	003fe206 	br	803d18 <__alt_data_end+0xff803d18>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  803d90:	0001883a 	nop
  803d94:	00000106 	br	803d9c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  803d98:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  803d9c:	e0bff917 	ldw	r2,-28(fp)
  803da0:	10bfffec 	andhi	r2,r2,65535
  803da4:	10000f26 	beq	r2,zero,803de4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803da8:	e0bffb17 	ldw	r2,-20(fp)
  803dac:	10c00817 	ldw	r3,32(r2)
  803db0:	00bfff84 	movi	r2,-2
  803db4:	1886703a 	and	r3,r3,r2
  803db8:	e0bffb17 	ldw	r2,-20(fp)
  803dbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  803dc0:	e0bffc17 	ldw	r2,-16(fp)
  803dc4:	10800104 	addi	r2,r2,4
  803dc8:	1007883a 	mov	r3,r2
  803dcc:	e0bffb17 	ldw	r2,-20(fp)
  803dd0:	10800817 	ldw	r2,32(r2)
  803dd4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803dd8:	e0bffc17 	ldw	r2,-16(fp)
  803ddc:	10800104 	addi	r2,r2,4
  803de0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  803de4:	e0bffd17 	ldw	r2,-12(fp)
  803de8:	1080800c 	andi	r2,r2,512
  803dec:	103fbe26 	beq	r2,zero,803ce8 <__alt_data_end+0xff803ce8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  803df0:	e0bffd17 	ldw	r2,-12(fp)
  803df4:	1004d43a 	srli	r2,r2,16
  803df8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  803dfc:	00001406 	br	803e50 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  803e00:	e0bffc17 	ldw	r2,-16(fp)
  803e04:	e0fffb17 	ldw	r3,-20(fp)
  803e08:	18c00d17 	ldw	r3,52(r3)
  803e0c:	e13ffb17 	ldw	r4,-20(fp)
  803e10:	20c7883a 	add	r3,r4,r3
  803e14:	18c20e04 	addi	r3,r3,2104
  803e18:	18c00003 	ldbu	r3,0(r3)
  803e1c:	18c03fcc 	andi	r3,r3,255
  803e20:	18c0201c 	xori	r3,r3,128
  803e24:	18ffe004 	addi	r3,r3,-128
  803e28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803e2c:	e0bffb17 	ldw	r2,-20(fp)
  803e30:	10800d17 	ldw	r2,52(r2)
  803e34:	10800044 	addi	r2,r2,1
  803e38:	10c1ffcc 	andi	r3,r2,2047
  803e3c:	e0bffb17 	ldw	r2,-20(fp)
  803e40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  803e44:	e0bffa17 	ldw	r2,-24(fp)
  803e48:	10bfffc4 	addi	r2,r2,-1
  803e4c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  803e50:	e0bffa17 	ldw	r2,-24(fp)
  803e54:	10000526 	beq	r2,zero,803e6c <altera_avalon_jtag_uart_irq+0x1a8>
  803e58:	e0bffb17 	ldw	r2,-20(fp)
  803e5c:	10c00d17 	ldw	r3,52(r2)
  803e60:	e0bffb17 	ldw	r2,-20(fp)
  803e64:	10800c17 	ldw	r2,48(r2)
  803e68:	18bfe51e 	bne	r3,r2,803e00 <__alt_data_end+0xff803e00>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  803e6c:	e0bffa17 	ldw	r2,-24(fp)
  803e70:	103f9d26 	beq	r2,zero,803ce8 <__alt_data_end+0xff803ce8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  803e74:	e0bffb17 	ldw	r2,-20(fp)
  803e78:	10c00817 	ldw	r3,32(r2)
  803e7c:	00bfff44 	movi	r2,-3
  803e80:	1886703a 	and	r3,r3,r2
  803e84:	e0bffb17 	ldw	r2,-20(fp)
  803e88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  803e8c:	e0bffb17 	ldw	r2,-20(fp)
  803e90:	10800017 	ldw	r2,0(r2)
  803e94:	10800104 	addi	r2,r2,4
  803e98:	1007883a 	mov	r3,r2
  803e9c:	e0bffb17 	ldw	r2,-20(fp)
  803ea0:	10800817 	ldw	r2,32(r2)
  803ea4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803ea8:	e0bffc17 	ldw	r2,-16(fp)
  803eac:	10800104 	addi	r2,r2,4
  803eb0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  803eb4:	003f8c06 	br	803ce8 <__alt_data_end+0xff803ce8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  803eb8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  803ebc:	0001883a 	nop
  803ec0:	e037883a 	mov	sp,fp
  803ec4:	df000017 	ldw	fp,0(sp)
  803ec8:	dec00104 	addi	sp,sp,4
  803ecc:	f800283a 	ret

00803ed0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  803ed0:	defff804 	addi	sp,sp,-32
  803ed4:	df000715 	stw	fp,28(sp)
  803ed8:	df000704 	addi	fp,sp,28
  803edc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  803ee0:	e0bffb17 	ldw	r2,-20(fp)
  803ee4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  803ee8:	e0bff917 	ldw	r2,-28(fp)
  803eec:	10800017 	ldw	r2,0(r2)
  803ef0:	10800104 	addi	r2,r2,4
  803ef4:	10800037 	ldwio	r2,0(r2)
  803ef8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  803efc:	e0bffa17 	ldw	r2,-24(fp)
  803f00:	1081000c 	andi	r2,r2,1024
  803f04:	10000b26 	beq	r2,zero,803f34 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  803f08:	e0bff917 	ldw	r2,-28(fp)
  803f0c:	10800017 	ldw	r2,0(r2)
  803f10:	10800104 	addi	r2,r2,4
  803f14:	1007883a 	mov	r3,r2
  803f18:	e0bff917 	ldw	r2,-28(fp)
  803f1c:	10800817 	ldw	r2,32(r2)
  803f20:	10810014 	ori	r2,r2,1024
  803f24:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  803f28:	e0bff917 	ldw	r2,-28(fp)
  803f2c:	10000915 	stw	zero,36(r2)
  803f30:	00000a06 	br	803f5c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  803f34:	e0bff917 	ldw	r2,-28(fp)
  803f38:	10c00917 	ldw	r3,36(r2)
  803f3c:	00a00034 	movhi	r2,32768
  803f40:	10bfff04 	addi	r2,r2,-4
  803f44:	10c00536 	bltu	r2,r3,803f5c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  803f48:	e0bff917 	ldw	r2,-28(fp)
  803f4c:	10800917 	ldw	r2,36(r2)
  803f50:	10c00044 	addi	r3,r2,1
  803f54:	e0bff917 	ldw	r2,-28(fp)
  803f58:	10c00915 	stw	r3,36(r2)
  803f5c:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  803f60:	e037883a 	mov	sp,fp
  803f64:	df000017 	ldw	fp,0(sp)
  803f68:	dec00104 	addi	sp,sp,4
  803f6c:	f800283a 	ret

00803f70 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  803f70:	defffd04 	addi	sp,sp,-12
  803f74:	df000215 	stw	fp,8(sp)
  803f78:	df000204 	addi	fp,sp,8
  803f7c:	e13ffe15 	stw	r4,-8(fp)
  803f80:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  803f84:	00000506 	br	803f9c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  803f88:	e0bfff17 	ldw	r2,-4(fp)
  803f8c:	1090000c 	andi	r2,r2,16384
  803f90:	10000226 	beq	r2,zero,803f9c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  803f94:	00bffd44 	movi	r2,-11
  803f98:	00000b06 	br	803fc8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  803f9c:	e0bffe17 	ldw	r2,-8(fp)
  803fa0:	10c00d17 	ldw	r3,52(r2)
  803fa4:	e0bffe17 	ldw	r2,-8(fp)
  803fa8:	10800c17 	ldw	r2,48(r2)
  803fac:	18800526 	beq	r3,r2,803fc4 <altera_avalon_jtag_uart_close+0x54>
  803fb0:	e0bffe17 	ldw	r2,-8(fp)
  803fb4:	10c00917 	ldw	r3,36(r2)
  803fb8:	e0bffe17 	ldw	r2,-8(fp)
  803fbc:	10800117 	ldw	r2,4(r2)
  803fc0:	18bff136 	bltu	r3,r2,803f88 <__alt_data_end+0xff803f88>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  803fc4:	0005883a 	mov	r2,zero
}
  803fc8:	e037883a 	mov	sp,fp
  803fcc:	df000017 	ldw	fp,0(sp)
  803fd0:	dec00104 	addi	sp,sp,4
  803fd4:	f800283a 	ret

00803fd8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  803fd8:	defffa04 	addi	sp,sp,-24
  803fdc:	df000515 	stw	fp,20(sp)
  803fe0:	df000504 	addi	fp,sp,20
  803fe4:	e13ffd15 	stw	r4,-12(fp)
  803fe8:	e17ffe15 	stw	r5,-8(fp)
  803fec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  803ff0:	00bff9c4 	movi	r2,-25
  803ff4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  803ff8:	e0bffe17 	ldw	r2,-8(fp)
  803ffc:	10da8060 	cmpeqi	r3,r2,27137
  804000:	1800031e 	bne	r3,zero,804010 <altera_avalon_jtag_uart_ioctl+0x38>
  804004:	109a80a0 	cmpeqi	r2,r2,27138
  804008:	1000181e 	bne	r2,zero,80406c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80400c:	00002906 	br	8040b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  804010:	e0bffd17 	ldw	r2,-12(fp)
  804014:	10c00117 	ldw	r3,4(r2)
  804018:	00a00034 	movhi	r2,32768
  80401c:	10bfffc4 	addi	r2,r2,-1
  804020:	18802126 	beq	r3,r2,8040a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  804024:	e0bfff17 	ldw	r2,-4(fp)
  804028:	10800017 	ldw	r2,0(r2)
  80402c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  804030:	e0bffc17 	ldw	r2,-16(fp)
  804034:	10800090 	cmplti	r2,r2,2
  804038:	1000061e 	bne	r2,zero,804054 <altera_avalon_jtag_uart_ioctl+0x7c>
  80403c:	e0fffc17 	ldw	r3,-16(fp)
  804040:	00a00034 	movhi	r2,32768
  804044:	10bfffc4 	addi	r2,r2,-1
  804048:	18800226 	beq	r3,r2,804054 <altera_avalon_jtag_uart_ioctl+0x7c>
  80404c:	e0bffc17 	ldw	r2,-16(fp)
  804050:	00000206 	br	80405c <altera_avalon_jtag_uart_ioctl+0x84>
  804054:	00a00034 	movhi	r2,32768
  804058:	10bfff84 	addi	r2,r2,-2
  80405c:	e0fffd17 	ldw	r3,-12(fp)
  804060:	18800115 	stw	r2,4(r3)
      rc = 0;
  804064:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  804068:	00000f06 	br	8040a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80406c:	e0bffd17 	ldw	r2,-12(fp)
  804070:	10c00117 	ldw	r3,4(r2)
  804074:	00a00034 	movhi	r2,32768
  804078:	10bfffc4 	addi	r2,r2,-1
  80407c:	18800c26 	beq	r3,r2,8040b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  804080:	e0bffd17 	ldw	r2,-12(fp)
  804084:	10c00917 	ldw	r3,36(r2)
  804088:	e0bffd17 	ldw	r2,-12(fp)
  80408c:	10800117 	ldw	r2,4(r2)
  804090:	1885803a 	cmpltu	r2,r3,r2
  804094:	10c03fcc 	andi	r3,r2,255
  804098:	e0bfff17 	ldw	r2,-4(fp)
  80409c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8040a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8040a4:	00000206 	br	8040b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8040a8:	0001883a 	nop
  8040ac:	00000106 	br	8040b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  8040b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8040b4:	e0bffb17 	ldw	r2,-20(fp)
}
  8040b8:	e037883a 	mov	sp,fp
  8040bc:	df000017 	ldw	fp,0(sp)
  8040c0:	dec00104 	addi	sp,sp,4
  8040c4:	f800283a 	ret

008040c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8040c8:	defff304 	addi	sp,sp,-52
  8040cc:	dfc00c15 	stw	ra,48(sp)
  8040d0:	df000b15 	stw	fp,44(sp)
  8040d4:	df000b04 	addi	fp,sp,44
  8040d8:	e13ffc15 	stw	r4,-16(fp)
  8040dc:	e17ffd15 	stw	r5,-12(fp)
  8040e0:	e1bffe15 	stw	r6,-8(fp)
  8040e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  8040e8:	e0bffd17 	ldw	r2,-12(fp)
  8040ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8040f0:	00004706 	br	804210 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8040f4:	e0bffc17 	ldw	r2,-16(fp)
  8040f8:	10800a17 	ldw	r2,40(r2)
  8040fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  804100:	e0bffc17 	ldw	r2,-16(fp)
  804104:	10800b17 	ldw	r2,44(r2)
  804108:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80410c:	e0fff717 	ldw	r3,-36(fp)
  804110:	e0bff817 	ldw	r2,-32(fp)
  804114:	18800536 	bltu	r3,r2,80412c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  804118:	e0fff717 	ldw	r3,-36(fp)
  80411c:	e0bff817 	ldw	r2,-32(fp)
  804120:	1885c83a 	sub	r2,r3,r2
  804124:	e0bff615 	stw	r2,-40(fp)
  804128:	00000406 	br	80413c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80412c:	00c20004 	movi	r3,2048
  804130:	e0bff817 	ldw	r2,-32(fp)
  804134:	1885c83a 	sub	r2,r3,r2
  804138:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80413c:	e0bff617 	ldw	r2,-40(fp)
  804140:	10001e26 	beq	r2,zero,8041bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  804144:	e0fffe17 	ldw	r3,-8(fp)
  804148:	e0bff617 	ldw	r2,-40(fp)
  80414c:	1880022e 	bgeu	r3,r2,804158 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  804150:	e0bffe17 	ldw	r2,-8(fp)
  804154:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  804158:	e0bffc17 	ldw	r2,-16(fp)
  80415c:	10c00e04 	addi	r3,r2,56
  804160:	e0bff817 	ldw	r2,-32(fp)
  804164:	1885883a 	add	r2,r3,r2
  804168:	e1bff617 	ldw	r6,-40(fp)
  80416c:	100b883a 	mov	r5,r2
  804170:	e13ff517 	ldw	r4,-44(fp)
  804174:	08017040 	call	801704 <memcpy>
      ptr   += n;
  804178:	e0fff517 	ldw	r3,-44(fp)
  80417c:	e0bff617 	ldw	r2,-40(fp)
  804180:	1885883a 	add	r2,r3,r2
  804184:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  804188:	e0fffe17 	ldw	r3,-8(fp)
  80418c:	e0bff617 	ldw	r2,-40(fp)
  804190:	1885c83a 	sub	r2,r3,r2
  804194:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  804198:	e0fff817 	ldw	r3,-32(fp)
  80419c:	e0bff617 	ldw	r2,-40(fp)
  8041a0:	1885883a 	add	r2,r3,r2
  8041a4:	10c1ffcc 	andi	r3,r2,2047
  8041a8:	e0bffc17 	ldw	r2,-16(fp)
  8041ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8041b0:	e0bffe17 	ldw	r2,-8(fp)
  8041b4:	00bfcf16 	blt	zero,r2,8040f4 <__alt_data_end+0xff8040f4>
  8041b8:	00000106 	br	8041c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8041bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8041c0:	e0fff517 	ldw	r3,-44(fp)
  8041c4:	e0bffd17 	ldw	r2,-12(fp)
  8041c8:	1880141e 	bne	r3,r2,80421c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8041cc:	e0bfff17 	ldw	r2,-4(fp)
  8041d0:	1090000c 	andi	r2,r2,16384
  8041d4:	1000131e 	bne	r2,zero,804224 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8041d8:	0001883a 	nop
  8041dc:	e0bffc17 	ldw	r2,-16(fp)
  8041e0:	10c00a17 	ldw	r3,40(r2)
  8041e4:	e0bff717 	ldw	r2,-36(fp)
  8041e8:	1880051e 	bne	r3,r2,804200 <altera_avalon_jtag_uart_read+0x138>
  8041ec:	e0bffc17 	ldw	r2,-16(fp)
  8041f0:	10c00917 	ldw	r3,36(r2)
  8041f4:	e0bffc17 	ldw	r2,-16(fp)
  8041f8:	10800117 	ldw	r2,4(r2)
  8041fc:	18bff736 	bltu	r3,r2,8041dc <__alt_data_end+0xff8041dc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  804200:	e0bffc17 	ldw	r2,-16(fp)
  804204:	10c00a17 	ldw	r3,40(r2)
  804208:	e0bff717 	ldw	r2,-36(fp)
  80420c:	18800726 	beq	r3,r2,80422c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804210:	e0bffe17 	ldw	r2,-8(fp)
  804214:	00bfb716 	blt	zero,r2,8040f4 <__alt_data_end+0xff8040f4>
  804218:	00000506 	br	804230 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80421c:	0001883a 	nop
  804220:	00000306 	br	804230 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  804224:	0001883a 	nop
  804228:	00000106 	br	804230 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80422c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  804230:	e0fff517 	ldw	r3,-44(fp)
  804234:	e0bffd17 	ldw	r2,-12(fp)
  804238:	18801826 	beq	r3,r2,80429c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80423c:	0005303a 	rdctl	r2,status
  804240:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804244:	e0fffb17 	ldw	r3,-20(fp)
  804248:	00bfff84 	movi	r2,-2
  80424c:	1884703a 	and	r2,r3,r2
  804250:	1001703a 	wrctl	status,r2
  
  return context;
  804254:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  804258:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80425c:	e0bffc17 	ldw	r2,-16(fp)
  804260:	10800817 	ldw	r2,32(r2)
  804264:	10c00054 	ori	r3,r2,1
  804268:	e0bffc17 	ldw	r2,-16(fp)
  80426c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804270:	e0bffc17 	ldw	r2,-16(fp)
  804274:	10800017 	ldw	r2,0(r2)
  804278:	10800104 	addi	r2,r2,4
  80427c:	1007883a 	mov	r3,r2
  804280:	e0bffc17 	ldw	r2,-16(fp)
  804284:	10800817 	ldw	r2,32(r2)
  804288:	18800035 	stwio	r2,0(r3)
  80428c:	e0bffa17 	ldw	r2,-24(fp)
  804290:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804294:	e0bff917 	ldw	r2,-28(fp)
  804298:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80429c:	e0fff517 	ldw	r3,-44(fp)
  8042a0:	e0bffd17 	ldw	r2,-12(fp)
  8042a4:	18800426 	beq	r3,r2,8042b8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  8042a8:	e0fff517 	ldw	r3,-44(fp)
  8042ac:	e0bffd17 	ldw	r2,-12(fp)
  8042b0:	1885c83a 	sub	r2,r3,r2
  8042b4:	00000606 	br	8042d0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8042b8:	e0bfff17 	ldw	r2,-4(fp)
  8042bc:	1090000c 	andi	r2,r2,16384
  8042c0:	10000226 	beq	r2,zero,8042cc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8042c4:	00bffd44 	movi	r2,-11
  8042c8:	00000106 	br	8042d0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  8042cc:	00bffec4 	movi	r2,-5
}
  8042d0:	e037883a 	mov	sp,fp
  8042d4:	dfc00117 	ldw	ra,4(sp)
  8042d8:	df000017 	ldw	fp,0(sp)
  8042dc:	dec00204 	addi	sp,sp,8
  8042e0:	f800283a 	ret

008042e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8042e4:	defff304 	addi	sp,sp,-52
  8042e8:	dfc00c15 	stw	ra,48(sp)
  8042ec:	df000b15 	stw	fp,44(sp)
  8042f0:	df000b04 	addi	fp,sp,44
  8042f4:	e13ffc15 	stw	r4,-16(fp)
  8042f8:	e17ffd15 	stw	r5,-12(fp)
  8042fc:	e1bffe15 	stw	r6,-8(fp)
  804300:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  804304:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  804308:	e0bffd17 	ldw	r2,-12(fp)
  80430c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804310:	00003706 	br	8043f0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  804314:	e0bffc17 	ldw	r2,-16(fp)
  804318:	10800c17 	ldw	r2,48(r2)
  80431c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  804320:	e0bffc17 	ldw	r2,-16(fp)
  804324:	10800d17 	ldw	r2,52(r2)
  804328:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80432c:	e0fff917 	ldw	r3,-28(fp)
  804330:	e0bff517 	ldw	r2,-44(fp)
  804334:	1880062e 	bgeu	r3,r2,804350 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  804338:	e0fff517 	ldw	r3,-44(fp)
  80433c:	e0bff917 	ldw	r2,-28(fp)
  804340:	1885c83a 	sub	r2,r3,r2
  804344:	10bfffc4 	addi	r2,r2,-1
  804348:	e0bff615 	stw	r2,-40(fp)
  80434c:	00000b06 	br	80437c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  804350:	e0bff517 	ldw	r2,-44(fp)
  804354:	10000526 	beq	r2,zero,80436c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  804358:	00c20004 	movi	r3,2048
  80435c:	e0bff917 	ldw	r2,-28(fp)
  804360:	1885c83a 	sub	r2,r3,r2
  804364:	e0bff615 	stw	r2,-40(fp)
  804368:	00000406 	br	80437c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80436c:	00c1ffc4 	movi	r3,2047
  804370:	e0bff917 	ldw	r2,-28(fp)
  804374:	1885c83a 	sub	r2,r3,r2
  804378:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80437c:	e0bff617 	ldw	r2,-40(fp)
  804380:	10001e26 	beq	r2,zero,8043fc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  804384:	e0fffe17 	ldw	r3,-8(fp)
  804388:	e0bff617 	ldw	r2,-40(fp)
  80438c:	1880022e 	bgeu	r3,r2,804398 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  804390:	e0bffe17 	ldw	r2,-8(fp)
  804394:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  804398:	e0bffc17 	ldw	r2,-16(fp)
  80439c:	10c20e04 	addi	r3,r2,2104
  8043a0:	e0bff917 	ldw	r2,-28(fp)
  8043a4:	1885883a 	add	r2,r3,r2
  8043a8:	e1bff617 	ldw	r6,-40(fp)
  8043ac:	e17ffd17 	ldw	r5,-12(fp)
  8043b0:	1009883a 	mov	r4,r2
  8043b4:	08017040 	call	801704 <memcpy>
      ptr   += n;
  8043b8:	e0fffd17 	ldw	r3,-12(fp)
  8043bc:	e0bff617 	ldw	r2,-40(fp)
  8043c0:	1885883a 	add	r2,r3,r2
  8043c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8043c8:	e0fffe17 	ldw	r3,-8(fp)
  8043cc:	e0bff617 	ldw	r2,-40(fp)
  8043d0:	1885c83a 	sub	r2,r3,r2
  8043d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8043d8:	e0fff917 	ldw	r3,-28(fp)
  8043dc:	e0bff617 	ldw	r2,-40(fp)
  8043e0:	1885883a 	add	r2,r3,r2
  8043e4:	10c1ffcc 	andi	r3,r2,2047
  8043e8:	e0bffc17 	ldw	r2,-16(fp)
  8043ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8043f0:	e0bffe17 	ldw	r2,-8(fp)
  8043f4:	00bfc716 	blt	zero,r2,804314 <__alt_data_end+0xff804314>
  8043f8:	00000106 	br	804400 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8043fc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804400:	0005303a 	rdctl	r2,status
  804404:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804408:	e0fffb17 	ldw	r3,-20(fp)
  80440c:	00bfff84 	movi	r2,-2
  804410:	1884703a 	and	r2,r3,r2
  804414:	1001703a 	wrctl	status,r2
  
  return context;
  804418:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80441c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  804420:	e0bffc17 	ldw	r2,-16(fp)
  804424:	10800817 	ldw	r2,32(r2)
  804428:	10c00094 	ori	r3,r2,2
  80442c:	e0bffc17 	ldw	r2,-16(fp)
  804430:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804434:	e0bffc17 	ldw	r2,-16(fp)
  804438:	10800017 	ldw	r2,0(r2)
  80443c:	10800104 	addi	r2,r2,4
  804440:	1007883a 	mov	r3,r2
  804444:	e0bffc17 	ldw	r2,-16(fp)
  804448:	10800817 	ldw	r2,32(r2)
  80444c:	18800035 	stwio	r2,0(r3)
  804450:	e0bffa17 	ldw	r2,-24(fp)
  804454:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804458:	e0bff817 	ldw	r2,-32(fp)
  80445c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  804460:	e0bffe17 	ldw	r2,-8(fp)
  804464:	0080100e 	bge	zero,r2,8044a8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  804468:	e0bfff17 	ldw	r2,-4(fp)
  80446c:	1090000c 	andi	r2,r2,16384
  804470:	1000101e 	bne	r2,zero,8044b4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  804474:	0001883a 	nop
  804478:	e0bffc17 	ldw	r2,-16(fp)
  80447c:	10c00d17 	ldw	r3,52(r2)
  804480:	e0bff517 	ldw	r2,-44(fp)
  804484:	1880051e 	bne	r3,r2,80449c <altera_avalon_jtag_uart_write+0x1b8>
  804488:	e0bffc17 	ldw	r2,-16(fp)
  80448c:	10c00917 	ldw	r3,36(r2)
  804490:	e0bffc17 	ldw	r2,-16(fp)
  804494:	10800117 	ldw	r2,4(r2)
  804498:	18bff736 	bltu	r3,r2,804478 <__alt_data_end+0xff804478>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80449c:	e0bffc17 	ldw	r2,-16(fp)
  8044a0:	10800917 	ldw	r2,36(r2)
  8044a4:	1000051e 	bne	r2,zero,8044bc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8044a8:	e0bffe17 	ldw	r2,-8(fp)
  8044ac:	00bfd016 	blt	zero,r2,8043f0 <__alt_data_end+0xff8043f0>
  8044b0:	00000306 	br	8044c0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8044b4:	0001883a 	nop
  8044b8:	00000106 	br	8044c0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8044bc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8044c0:	e0fffd17 	ldw	r3,-12(fp)
  8044c4:	e0bff717 	ldw	r2,-36(fp)
  8044c8:	18800426 	beq	r3,r2,8044dc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8044cc:	e0fffd17 	ldw	r3,-12(fp)
  8044d0:	e0bff717 	ldw	r2,-36(fp)
  8044d4:	1885c83a 	sub	r2,r3,r2
  8044d8:	00000606 	br	8044f4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8044dc:	e0bfff17 	ldw	r2,-4(fp)
  8044e0:	1090000c 	andi	r2,r2,16384
  8044e4:	10000226 	beq	r2,zero,8044f0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  8044e8:	00bffd44 	movi	r2,-11
  8044ec:	00000106 	br	8044f4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8044f0:	00bffec4 	movi	r2,-5
}
  8044f4:	e037883a 	mov	sp,fp
  8044f8:	dfc00117 	ldw	ra,4(sp)
  8044fc:	df000017 	ldw	fp,0(sp)
  804500:	dec00204 	addi	sp,sp,8
  804504:	f800283a 	ret

00804508 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  804508:	defffa04 	addi	sp,sp,-24
  80450c:	dfc00515 	stw	ra,20(sp)
  804510:	df000415 	stw	fp,16(sp)
  804514:	df000404 	addi	fp,sp,16
  804518:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80451c:	0007883a 	mov	r3,zero
  804520:	e0bfff17 	ldw	r2,-4(fp)
  804524:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  804528:	e0bfff17 	ldw	r2,-4(fp)
  80452c:	10800104 	addi	r2,r2,4
  804530:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804534:	0005303a 	rdctl	r2,status
  804538:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80453c:	e0fffd17 	ldw	r3,-12(fp)
  804540:	00bfff84 	movi	r2,-2
  804544:	1884703a 	and	r2,r3,r2
  804548:	1001703a 	wrctl	status,r2
  
  return context;
  80454c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  804550:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  804554:	08050140 	call	805014 <alt_tick>
  804558:	e0bffc17 	ldw	r2,-16(fp)
  80455c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804560:	e0bffe17 	ldw	r2,-8(fp)
  804564:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  804568:	0001883a 	nop
  80456c:	e037883a 	mov	sp,fp
  804570:	dfc00117 	ldw	ra,4(sp)
  804574:	df000017 	ldw	fp,0(sp)
  804578:	dec00204 	addi	sp,sp,8
  80457c:	f800283a 	ret

00804580 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  804580:	defff804 	addi	sp,sp,-32
  804584:	dfc00715 	stw	ra,28(sp)
  804588:	df000615 	stw	fp,24(sp)
  80458c:	df000604 	addi	fp,sp,24
  804590:	e13ffc15 	stw	r4,-16(fp)
  804594:	e17ffd15 	stw	r5,-12(fp)
  804598:	e1bffe15 	stw	r6,-8(fp)
  80459c:	e1ffff15 	stw	r7,-4(fp)
  8045a0:	e0bfff17 	ldw	r2,-4(fp)
  8045a4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8045a8:	d0a6b117 	ldw	r2,-25916(gp)
  8045ac:	1000021e 	bne	r2,zero,8045b8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8045b0:	e0bffb17 	ldw	r2,-20(fp)
  8045b4:	d0a6b115 	stw	r2,-25916(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8045b8:	e0bffc17 	ldw	r2,-16(fp)
  8045bc:	10800104 	addi	r2,r2,4
  8045c0:	00c001c4 	movi	r3,7
  8045c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8045c8:	d8000015 	stw	zero,0(sp)
  8045cc:	e1fffc17 	ldw	r7,-16(fp)
  8045d0:	01802034 	movhi	r6,128
  8045d4:	31914204 	addi	r6,r6,17672
  8045d8:	e17ffe17 	ldw	r5,-8(fp)
  8045dc:	e13ffd17 	ldw	r4,-12(fp)
  8045e0:	08049440 	call	804944 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8045e4:	0001883a 	nop
  8045e8:	e037883a 	mov	sp,fp
  8045ec:	dfc00117 	ldw	ra,4(sp)
  8045f0:	df000017 	ldw	fp,0(sp)
  8045f4:	dec00204 	addi	sp,sp,8
  8045f8:	f800283a 	ret

008045fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8045fc:	defff504 	addi	sp,sp,-44
  804600:	df000a15 	stw	fp,40(sp)
  804604:	df000a04 	addi	fp,sp,40
  804608:	e13ffc15 	stw	r4,-16(fp)
  80460c:	e17ffd15 	stw	r5,-12(fp)
  804610:	e1bffe15 	stw	r6,-8(fp)
  804614:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  804618:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80461c:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
  804620:	10003c26 	beq	r2,zero,804714 <alt_alarm_start+0x118>
  {
    if (alarm)
  804624:	e0bffc17 	ldw	r2,-16(fp)
  804628:	10003826 	beq	r2,zero,80470c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80462c:	e0bffc17 	ldw	r2,-16(fp)
  804630:	e0fffe17 	ldw	r3,-8(fp)
  804634:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  804638:	e0bffc17 	ldw	r2,-16(fp)
  80463c:	e0ffff17 	ldw	r3,-4(fp)
  804640:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804644:	0005303a 	rdctl	r2,status
  804648:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80464c:	e0fff917 	ldw	r3,-28(fp)
  804650:	00bfff84 	movi	r2,-2
  804654:	1884703a 	and	r2,r3,r2
  804658:	1001703a 	wrctl	status,r2
  
  return context;
  80465c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  804660:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  804664:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
  804668:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80466c:	e0fffd17 	ldw	r3,-12(fp)
  804670:	e0bff617 	ldw	r2,-40(fp)
  804674:	1885883a 	add	r2,r3,r2
  804678:	10c00044 	addi	r3,r2,1
  80467c:	e0bffc17 	ldw	r2,-16(fp)
  804680:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  804684:	e0bffc17 	ldw	r2,-16(fp)
  804688:	10c00217 	ldw	r3,8(r2)
  80468c:	e0bff617 	ldw	r2,-40(fp)
  804690:	1880042e 	bgeu	r3,r2,8046a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  804694:	e0bffc17 	ldw	r2,-16(fp)
  804698:	00c00044 	movi	r3,1
  80469c:	10c00405 	stb	r3,16(r2)
  8046a0:	00000206 	br	8046ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8046a4:	e0bffc17 	ldw	r2,-16(fp)
  8046a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8046ac:	e0bffc17 	ldw	r2,-16(fp)
  8046b0:	d0e00c04 	addi	r3,gp,-32720
  8046b4:	e0fffa15 	stw	r3,-24(fp)
  8046b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8046bc:	e0bffb17 	ldw	r2,-20(fp)
  8046c0:	e0fffa17 	ldw	r3,-24(fp)
  8046c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8046c8:	e0bffa17 	ldw	r2,-24(fp)
  8046cc:	10c00017 	ldw	r3,0(r2)
  8046d0:	e0bffb17 	ldw	r2,-20(fp)
  8046d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8046d8:	e0bffa17 	ldw	r2,-24(fp)
  8046dc:	10800017 	ldw	r2,0(r2)
  8046e0:	e0fffb17 	ldw	r3,-20(fp)
  8046e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8046e8:	e0bffa17 	ldw	r2,-24(fp)
  8046ec:	e0fffb17 	ldw	r3,-20(fp)
  8046f0:	10c00015 	stw	r3,0(r2)
  8046f4:	e0bff817 	ldw	r2,-32(fp)
  8046f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8046fc:	e0bff717 	ldw	r2,-36(fp)
  804700:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  804704:	0005883a 	mov	r2,zero
  804708:	00000306 	br	804718 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80470c:	00bffa84 	movi	r2,-22
  804710:	00000106 	br	804718 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  804714:	00bfde84 	movi	r2,-134
  }
}
  804718:	e037883a 	mov	sp,fp
  80471c:	df000017 	ldw	fp,0(sp)
  804720:	dec00104 	addi	sp,sp,4
  804724:	f800283a 	ret

00804728 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  804728:	defffe04 	addi	sp,sp,-8
  80472c:	df000115 	stw	fp,4(sp)
  804730:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  804734:	e03fff15 	stw	zero,-4(fp)
  804738:	00000506 	br	804750 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80473c:	e0bfff17 	ldw	r2,-4(fp)
  804740:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  804744:	e0bfff17 	ldw	r2,-4(fp)
  804748:	10800804 	addi	r2,r2,32
  80474c:	e0bfff15 	stw	r2,-4(fp)
  804750:	e0bfff17 	ldw	r2,-4(fp)
  804754:	10810030 	cmpltui	r2,r2,1024
  804758:	103ff81e 	bne	r2,zero,80473c <__alt_data_end+0xff80473c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80475c:	0001883a 	nop
  804760:	e037883a 	mov	sp,fp
  804764:	df000017 	ldw	fp,0(sp)
  804768:	dec00104 	addi	sp,sp,4
  80476c:	f800283a 	ret

00804770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804770:	defffe04 	addi	sp,sp,-8
  804774:	dfc00115 	stw	ra,4(sp)
  804778:	df000015 	stw	fp,0(sp)
  80477c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804780:	d0a00917 	ldw	r2,-32732(gp)
  804784:	10000326 	beq	r2,zero,804794 <alt_get_errno+0x24>
  804788:	d0a00917 	ldw	r2,-32732(gp)
  80478c:	103ee83a 	callr	r2
  804790:	00000106 	br	804798 <alt_get_errno+0x28>
  804794:	d0a6ac04 	addi	r2,gp,-25936
}
  804798:	e037883a 	mov	sp,fp
  80479c:	dfc00117 	ldw	ra,4(sp)
  8047a0:	df000017 	ldw	fp,0(sp)
  8047a4:	dec00204 	addi	sp,sp,8
  8047a8:	f800283a 	ret

008047ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8047ac:	defffa04 	addi	sp,sp,-24
  8047b0:	dfc00515 	stw	ra,20(sp)
  8047b4:	df000415 	stw	fp,16(sp)
  8047b8:	df000404 	addi	fp,sp,16
  8047bc:	e13ffe15 	stw	r4,-8(fp)
  8047c0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8047c4:	e0bffe17 	ldw	r2,-8(fp)
  8047c8:	10000326 	beq	r2,zero,8047d8 <alt_dev_llist_insert+0x2c>
  8047cc:	e0bffe17 	ldw	r2,-8(fp)
  8047d0:	10800217 	ldw	r2,8(r2)
  8047d4:	1000061e 	bne	r2,zero,8047f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8047d8:	08047700 	call	804770 <alt_get_errno>
  8047dc:	1007883a 	mov	r3,r2
  8047e0:	00800584 	movi	r2,22
  8047e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8047e8:	00bffa84 	movi	r2,-22
  8047ec:	00001306 	br	80483c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8047f0:	e0bffe17 	ldw	r2,-8(fp)
  8047f4:	e0ffff17 	ldw	r3,-4(fp)
  8047f8:	e0fffc15 	stw	r3,-16(fp)
  8047fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804800:	e0bffd17 	ldw	r2,-12(fp)
  804804:	e0fffc17 	ldw	r3,-16(fp)
  804808:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80480c:	e0bffc17 	ldw	r2,-16(fp)
  804810:	10c00017 	ldw	r3,0(r2)
  804814:	e0bffd17 	ldw	r2,-12(fp)
  804818:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80481c:	e0bffc17 	ldw	r2,-16(fp)
  804820:	10800017 	ldw	r2,0(r2)
  804824:	e0fffd17 	ldw	r3,-12(fp)
  804828:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80482c:	e0bffc17 	ldw	r2,-16(fp)
  804830:	e0fffd17 	ldw	r3,-12(fp)
  804834:	10c00015 	stw	r3,0(r2)

  return 0;  
  804838:	0005883a 	mov	r2,zero
}
  80483c:	e037883a 	mov	sp,fp
  804840:	dfc00117 	ldw	ra,4(sp)
  804844:	df000017 	ldw	fp,0(sp)
  804848:	dec00204 	addi	sp,sp,8
  80484c:	f800283a 	ret

00804850 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  804850:	defffd04 	addi	sp,sp,-12
  804854:	dfc00215 	stw	ra,8(sp)
  804858:	df000115 	stw	fp,4(sp)
  80485c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  804860:	00802034 	movhi	r2,128
  804864:	10960e04 	addi	r2,r2,22584
  804868:	e0bfff15 	stw	r2,-4(fp)
  80486c:	00000606 	br	804888 <_do_ctors+0x38>
        (*ctor) (); 
  804870:	e0bfff17 	ldw	r2,-4(fp)
  804874:	10800017 	ldw	r2,0(r2)
  804878:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80487c:	e0bfff17 	ldw	r2,-4(fp)
  804880:	10bfff04 	addi	r2,r2,-4
  804884:	e0bfff15 	stw	r2,-4(fp)
  804888:	e0ffff17 	ldw	r3,-4(fp)
  80488c:	00802034 	movhi	r2,128
  804890:	10960f04 	addi	r2,r2,22588
  804894:	18bff62e 	bgeu	r3,r2,804870 <__alt_data_end+0xff804870>
        (*ctor) (); 
}
  804898:	0001883a 	nop
  80489c:	e037883a 	mov	sp,fp
  8048a0:	dfc00117 	ldw	ra,4(sp)
  8048a4:	df000017 	ldw	fp,0(sp)
  8048a8:	dec00204 	addi	sp,sp,8
  8048ac:	f800283a 	ret

008048b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8048b0:	defffd04 	addi	sp,sp,-12
  8048b4:	dfc00215 	stw	ra,8(sp)
  8048b8:	df000115 	stw	fp,4(sp)
  8048bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8048c0:	00802034 	movhi	r2,128
  8048c4:	10960e04 	addi	r2,r2,22584
  8048c8:	e0bfff15 	stw	r2,-4(fp)
  8048cc:	00000606 	br	8048e8 <_do_dtors+0x38>
        (*dtor) (); 
  8048d0:	e0bfff17 	ldw	r2,-4(fp)
  8048d4:	10800017 	ldw	r2,0(r2)
  8048d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8048dc:	e0bfff17 	ldw	r2,-4(fp)
  8048e0:	10bfff04 	addi	r2,r2,-4
  8048e4:	e0bfff15 	stw	r2,-4(fp)
  8048e8:	e0ffff17 	ldw	r3,-4(fp)
  8048ec:	00802034 	movhi	r2,128
  8048f0:	10960f04 	addi	r2,r2,22588
  8048f4:	18bff62e 	bgeu	r3,r2,8048d0 <__alt_data_end+0xff8048d0>
        (*dtor) (); 
}
  8048f8:	0001883a 	nop
  8048fc:	e037883a 	mov	sp,fp
  804900:	dfc00117 	ldw	ra,4(sp)
  804904:	df000017 	ldw	fp,0(sp)
  804908:	dec00204 	addi	sp,sp,8
  80490c:	f800283a 	ret

00804910 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  804910:	defffe04 	addi	sp,sp,-8
  804914:	dfc00115 	stw	ra,4(sp)
  804918:	df000015 	stw	fp,0(sp)
  80491c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  804920:	01480004 	movi	r5,8192
  804924:	0009883a 	mov	r4,zero
  804928:	080537c0 	call	80537c <alt_icache_flush>
#endif
}
  80492c:	0001883a 	nop
  804930:	e037883a 	mov	sp,fp
  804934:	dfc00117 	ldw	ra,4(sp)
  804938:	df000017 	ldw	fp,0(sp)
  80493c:	dec00204 	addi	sp,sp,8
  804940:	f800283a 	ret

00804944 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  804944:	defff904 	addi	sp,sp,-28
  804948:	dfc00615 	stw	ra,24(sp)
  80494c:	df000515 	stw	fp,20(sp)
  804950:	df000504 	addi	fp,sp,20
  804954:	e13ffc15 	stw	r4,-16(fp)
  804958:	e17ffd15 	stw	r5,-12(fp)
  80495c:	e1bffe15 	stw	r6,-8(fp)
  804960:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  804964:	e0800217 	ldw	r2,8(fp)
  804968:	d8800015 	stw	r2,0(sp)
  80496c:	e1ffff17 	ldw	r7,-4(fp)
  804970:	e1bffe17 	ldw	r6,-8(fp)
  804974:	e17ffd17 	ldw	r5,-12(fp)
  804978:	e13ffc17 	ldw	r4,-16(fp)
  80497c:	0804af40 	call	804af4 <alt_iic_isr_register>
}  
  804980:	e037883a 	mov	sp,fp
  804984:	dfc00117 	ldw	ra,4(sp)
  804988:	df000017 	ldw	fp,0(sp)
  80498c:	dec00204 	addi	sp,sp,8
  804990:	f800283a 	ret

00804994 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  804994:	defff904 	addi	sp,sp,-28
  804998:	df000615 	stw	fp,24(sp)
  80499c:	df000604 	addi	fp,sp,24
  8049a0:	e13ffe15 	stw	r4,-8(fp)
  8049a4:	e17fff15 	stw	r5,-4(fp)
  8049a8:	e0bfff17 	ldw	r2,-4(fp)
  8049ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8049b0:	0005303a 	rdctl	r2,status
  8049b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8049b8:	e0fffb17 	ldw	r3,-20(fp)
  8049bc:	00bfff84 	movi	r2,-2
  8049c0:	1884703a 	and	r2,r3,r2
  8049c4:	1001703a 	wrctl	status,r2
  
  return context;
  8049c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8049cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8049d0:	00c00044 	movi	r3,1
  8049d4:	e0bffa17 	ldw	r2,-24(fp)
  8049d8:	1884983a 	sll	r2,r3,r2
  8049dc:	1007883a 	mov	r3,r2
  8049e0:	d0a6b017 	ldw	r2,-25920(gp)
  8049e4:	1884b03a 	or	r2,r3,r2
  8049e8:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8049ec:	d0a6b017 	ldw	r2,-25920(gp)
  8049f0:	100170fa 	wrctl	ienable,r2
  8049f4:	e0bffc17 	ldw	r2,-16(fp)
  8049f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8049fc:	e0bffd17 	ldw	r2,-12(fp)
  804a00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  804a04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  804a08:	0001883a 	nop
}
  804a0c:	e037883a 	mov	sp,fp
  804a10:	df000017 	ldw	fp,0(sp)
  804a14:	dec00104 	addi	sp,sp,4
  804a18:	f800283a 	ret

00804a1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  804a1c:	defff904 	addi	sp,sp,-28
  804a20:	df000615 	stw	fp,24(sp)
  804a24:	df000604 	addi	fp,sp,24
  804a28:	e13ffe15 	stw	r4,-8(fp)
  804a2c:	e17fff15 	stw	r5,-4(fp)
  804a30:	e0bfff17 	ldw	r2,-4(fp)
  804a34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804a38:	0005303a 	rdctl	r2,status
  804a3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a40:	e0fffb17 	ldw	r3,-20(fp)
  804a44:	00bfff84 	movi	r2,-2
  804a48:	1884703a 	and	r2,r3,r2
  804a4c:	1001703a 	wrctl	status,r2
  
  return context;
  804a50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  804a54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  804a58:	00c00044 	movi	r3,1
  804a5c:	e0bffa17 	ldw	r2,-24(fp)
  804a60:	1884983a 	sll	r2,r3,r2
  804a64:	0084303a 	nor	r2,zero,r2
  804a68:	1007883a 	mov	r3,r2
  804a6c:	d0a6b017 	ldw	r2,-25920(gp)
  804a70:	1884703a 	and	r2,r3,r2
  804a74:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  804a78:	d0a6b017 	ldw	r2,-25920(gp)
  804a7c:	100170fa 	wrctl	ienable,r2
  804a80:	e0bffc17 	ldw	r2,-16(fp)
  804a84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804a88:	e0bffd17 	ldw	r2,-12(fp)
  804a8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  804a90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  804a94:	0001883a 	nop
}
  804a98:	e037883a 	mov	sp,fp
  804a9c:	df000017 	ldw	fp,0(sp)
  804aa0:	dec00104 	addi	sp,sp,4
  804aa4:	f800283a 	ret

00804aa8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  804aa8:	defffc04 	addi	sp,sp,-16
  804aac:	df000315 	stw	fp,12(sp)
  804ab0:	df000304 	addi	fp,sp,12
  804ab4:	e13ffe15 	stw	r4,-8(fp)
  804ab8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  804abc:	000530fa 	rdctl	r2,ienable
  804ac0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  804ac4:	00c00044 	movi	r3,1
  804ac8:	e0bfff17 	ldw	r2,-4(fp)
  804acc:	1884983a 	sll	r2,r3,r2
  804ad0:	1007883a 	mov	r3,r2
  804ad4:	e0bffd17 	ldw	r2,-12(fp)
  804ad8:	1884703a 	and	r2,r3,r2
  804adc:	1004c03a 	cmpne	r2,r2,zero
  804ae0:	10803fcc 	andi	r2,r2,255
}
  804ae4:	e037883a 	mov	sp,fp
  804ae8:	df000017 	ldw	fp,0(sp)
  804aec:	dec00104 	addi	sp,sp,4
  804af0:	f800283a 	ret

00804af4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  804af4:	defff504 	addi	sp,sp,-44
  804af8:	dfc00a15 	stw	ra,40(sp)
  804afc:	df000915 	stw	fp,36(sp)
  804b00:	df000904 	addi	fp,sp,36
  804b04:	e13ffc15 	stw	r4,-16(fp)
  804b08:	e17ffd15 	stw	r5,-12(fp)
  804b0c:	e1bffe15 	stw	r6,-8(fp)
  804b10:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  804b14:	00bffa84 	movi	r2,-22
  804b18:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  804b1c:	e0bffd17 	ldw	r2,-12(fp)
  804b20:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  804b24:	e0bff817 	ldw	r2,-32(fp)
  804b28:	10800808 	cmpgei	r2,r2,32
  804b2c:	1000271e 	bne	r2,zero,804bcc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804b30:	0005303a 	rdctl	r2,status
  804b34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804b38:	e0fffb17 	ldw	r3,-20(fp)
  804b3c:	00bfff84 	movi	r2,-2
  804b40:	1884703a 	and	r2,r3,r2
  804b44:	1001703a 	wrctl	status,r2
  
  return context;
  804b48:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  804b4c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  804b50:	00802074 	movhi	r2,129
  804b54:	10a36c04 	addi	r2,r2,-29264
  804b58:	e0fff817 	ldw	r3,-32(fp)
  804b5c:	180690fa 	slli	r3,r3,3
  804b60:	10c5883a 	add	r2,r2,r3
  804b64:	e0fffe17 	ldw	r3,-8(fp)
  804b68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  804b6c:	00802074 	movhi	r2,129
  804b70:	10a36c04 	addi	r2,r2,-29264
  804b74:	e0fff817 	ldw	r3,-32(fp)
  804b78:	180690fa 	slli	r3,r3,3
  804b7c:	10c5883a 	add	r2,r2,r3
  804b80:	10800104 	addi	r2,r2,4
  804b84:	e0ffff17 	ldw	r3,-4(fp)
  804b88:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  804b8c:	e0bffe17 	ldw	r2,-8(fp)
  804b90:	10000526 	beq	r2,zero,804ba8 <alt_iic_isr_register+0xb4>
  804b94:	e0bff817 	ldw	r2,-32(fp)
  804b98:	100b883a 	mov	r5,r2
  804b9c:	e13ffc17 	ldw	r4,-16(fp)
  804ba0:	08049940 	call	804994 <alt_ic_irq_enable>
  804ba4:	00000406 	br	804bb8 <alt_iic_isr_register+0xc4>
  804ba8:	e0bff817 	ldw	r2,-32(fp)
  804bac:	100b883a 	mov	r5,r2
  804bb0:	e13ffc17 	ldw	r4,-16(fp)
  804bb4:	0804a1c0 	call	804a1c <alt_ic_irq_disable>
  804bb8:	e0bff715 	stw	r2,-36(fp)
  804bbc:	e0bffa17 	ldw	r2,-24(fp)
  804bc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804bc4:	e0bff917 	ldw	r2,-28(fp)
  804bc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  804bcc:	e0bff717 	ldw	r2,-36(fp)
}
  804bd0:	e037883a 	mov	sp,fp
  804bd4:	dfc00117 	ldw	ra,4(sp)
  804bd8:	df000017 	ldw	fp,0(sp)
  804bdc:	dec00204 	addi	sp,sp,8
  804be0:	f800283a 	ret

00804be4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  804be4:	defff904 	addi	sp,sp,-28
  804be8:	dfc00615 	stw	ra,24(sp)
  804bec:	df000515 	stw	fp,20(sp)
  804bf0:	df000504 	addi	fp,sp,20
  804bf4:	e13ffc15 	stw	r4,-16(fp)
  804bf8:	e17ffd15 	stw	r5,-12(fp)
  804bfc:	e1bffe15 	stw	r6,-8(fp)
  804c00:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  804c04:	e1bfff17 	ldw	r6,-4(fp)
  804c08:	e17ffe17 	ldw	r5,-8(fp)
  804c0c:	e13ffd17 	ldw	r4,-12(fp)
  804c10:	0804e240 	call	804e24 <open>
  804c14:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  804c18:	e0bffb17 	ldw	r2,-20(fp)
  804c1c:	10001c16 	blt	r2,zero,804c90 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  804c20:	00802034 	movhi	r2,128
  804c24:	10983604 	addi	r2,r2,24792
  804c28:	e0fffb17 	ldw	r3,-20(fp)
  804c2c:	18c00324 	muli	r3,r3,12
  804c30:	10c5883a 	add	r2,r2,r3
  804c34:	10c00017 	ldw	r3,0(r2)
  804c38:	e0bffc17 	ldw	r2,-16(fp)
  804c3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  804c40:	00802034 	movhi	r2,128
  804c44:	10983604 	addi	r2,r2,24792
  804c48:	e0fffb17 	ldw	r3,-20(fp)
  804c4c:	18c00324 	muli	r3,r3,12
  804c50:	10c5883a 	add	r2,r2,r3
  804c54:	10800104 	addi	r2,r2,4
  804c58:	10c00017 	ldw	r3,0(r2)
  804c5c:	e0bffc17 	ldw	r2,-16(fp)
  804c60:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  804c64:	00802034 	movhi	r2,128
  804c68:	10983604 	addi	r2,r2,24792
  804c6c:	e0fffb17 	ldw	r3,-20(fp)
  804c70:	18c00324 	muli	r3,r3,12
  804c74:	10c5883a 	add	r2,r2,r3
  804c78:	10800204 	addi	r2,r2,8
  804c7c:	10c00017 	ldw	r3,0(r2)
  804c80:	e0bffc17 	ldw	r2,-16(fp)
  804c84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  804c88:	e13ffb17 	ldw	r4,-20(fp)
  804c8c:	08037880 	call	803788 <alt_release_fd>
  }
} 
  804c90:	0001883a 	nop
  804c94:	e037883a 	mov	sp,fp
  804c98:	dfc00117 	ldw	ra,4(sp)
  804c9c:	df000017 	ldw	fp,0(sp)
  804ca0:	dec00204 	addi	sp,sp,8
  804ca4:	f800283a 	ret

00804ca8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  804ca8:	defffb04 	addi	sp,sp,-20
  804cac:	dfc00415 	stw	ra,16(sp)
  804cb0:	df000315 	stw	fp,12(sp)
  804cb4:	df000304 	addi	fp,sp,12
  804cb8:	e13ffd15 	stw	r4,-12(fp)
  804cbc:	e17ffe15 	stw	r5,-8(fp)
  804cc0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  804cc4:	01c07fc4 	movi	r7,511
  804cc8:	01800044 	movi	r6,1
  804ccc:	e17ffd17 	ldw	r5,-12(fp)
  804cd0:	01002034 	movhi	r4,128
  804cd4:	21183904 	addi	r4,r4,24804
  804cd8:	0804be40 	call	804be4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  804cdc:	01c07fc4 	movi	r7,511
  804ce0:	000d883a 	mov	r6,zero
  804ce4:	e17ffe17 	ldw	r5,-8(fp)
  804ce8:	01002034 	movhi	r4,128
  804cec:	21183604 	addi	r4,r4,24792
  804cf0:	0804be40 	call	804be4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  804cf4:	01c07fc4 	movi	r7,511
  804cf8:	01800044 	movi	r6,1
  804cfc:	e17fff17 	ldw	r5,-4(fp)
  804d00:	01002034 	movhi	r4,128
  804d04:	21183c04 	addi	r4,r4,24816
  804d08:	0804be40 	call	804be4 <alt_open_fd>
}  
  804d0c:	0001883a 	nop
  804d10:	e037883a 	mov	sp,fp
  804d14:	dfc00117 	ldw	ra,4(sp)
  804d18:	df000017 	ldw	fp,0(sp)
  804d1c:	dec00204 	addi	sp,sp,8
  804d20:	f800283a 	ret

00804d24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804d24:	defffe04 	addi	sp,sp,-8
  804d28:	dfc00115 	stw	ra,4(sp)
  804d2c:	df000015 	stw	fp,0(sp)
  804d30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804d34:	d0a00917 	ldw	r2,-32732(gp)
  804d38:	10000326 	beq	r2,zero,804d48 <alt_get_errno+0x24>
  804d3c:	d0a00917 	ldw	r2,-32732(gp)
  804d40:	103ee83a 	callr	r2
  804d44:	00000106 	br	804d4c <alt_get_errno+0x28>
  804d48:	d0a6ac04 	addi	r2,gp,-25936
}
  804d4c:	e037883a 	mov	sp,fp
  804d50:	dfc00117 	ldw	ra,4(sp)
  804d54:	df000017 	ldw	fp,0(sp)
  804d58:	dec00204 	addi	sp,sp,8
  804d5c:	f800283a 	ret

00804d60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  804d60:	defffd04 	addi	sp,sp,-12
  804d64:	df000215 	stw	fp,8(sp)
  804d68:	df000204 	addi	fp,sp,8
  804d6c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  804d70:	e0bfff17 	ldw	r2,-4(fp)
  804d74:	10800217 	ldw	r2,8(r2)
  804d78:	10d00034 	orhi	r3,r2,16384
  804d7c:	e0bfff17 	ldw	r2,-4(fp)
  804d80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804d84:	e03ffe15 	stw	zero,-8(fp)
  804d88:	00001d06 	br	804e00 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804d8c:	00802034 	movhi	r2,128
  804d90:	10983604 	addi	r2,r2,24792
  804d94:	e0fffe17 	ldw	r3,-8(fp)
  804d98:	18c00324 	muli	r3,r3,12
  804d9c:	10c5883a 	add	r2,r2,r3
  804da0:	10c00017 	ldw	r3,0(r2)
  804da4:	e0bfff17 	ldw	r2,-4(fp)
  804da8:	10800017 	ldw	r2,0(r2)
  804dac:	1880111e 	bne	r3,r2,804df4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  804db0:	00802034 	movhi	r2,128
  804db4:	10983604 	addi	r2,r2,24792
  804db8:	e0fffe17 	ldw	r3,-8(fp)
  804dbc:	18c00324 	muli	r3,r3,12
  804dc0:	10c5883a 	add	r2,r2,r3
  804dc4:	10800204 	addi	r2,r2,8
  804dc8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804dcc:	1000090e 	bge	r2,zero,804df4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  804dd0:	e0bffe17 	ldw	r2,-8(fp)
  804dd4:	10c00324 	muli	r3,r2,12
  804dd8:	00802034 	movhi	r2,128
  804ddc:	10983604 	addi	r2,r2,24792
  804de0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  804de4:	e0bfff17 	ldw	r2,-4(fp)
  804de8:	18800226 	beq	r3,r2,804df4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  804dec:	00bffcc4 	movi	r2,-13
  804df0:	00000806 	br	804e14 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804df4:	e0bffe17 	ldw	r2,-8(fp)
  804df8:	10800044 	addi	r2,r2,1
  804dfc:	e0bffe15 	stw	r2,-8(fp)
  804e00:	d0a00817 	ldw	r2,-32736(gp)
  804e04:	1007883a 	mov	r3,r2
  804e08:	e0bffe17 	ldw	r2,-8(fp)
  804e0c:	18bfdf2e 	bgeu	r3,r2,804d8c <__alt_data_end+0xff804d8c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  804e10:	0005883a 	mov	r2,zero
}
  804e14:	e037883a 	mov	sp,fp
  804e18:	df000017 	ldw	fp,0(sp)
  804e1c:	dec00104 	addi	sp,sp,4
  804e20:	f800283a 	ret

00804e24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  804e24:	defff604 	addi	sp,sp,-40
  804e28:	dfc00915 	stw	ra,36(sp)
  804e2c:	df000815 	stw	fp,32(sp)
  804e30:	df000804 	addi	fp,sp,32
  804e34:	e13ffd15 	stw	r4,-12(fp)
  804e38:	e17ffe15 	stw	r5,-8(fp)
  804e3c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  804e40:	00bfffc4 	movi	r2,-1
  804e44:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  804e48:	00bffb44 	movi	r2,-19
  804e4c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  804e50:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  804e54:	d1600604 	addi	r5,gp,-32744
  804e58:	e13ffd17 	ldw	r4,-12(fp)
  804e5c:	08051400 	call	805140 <alt_find_dev>
  804e60:	e0bff815 	stw	r2,-32(fp)
  804e64:	e0bff817 	ldw	r2,-32(fp)
  804e68:	1000051e 	bne	r2,zero,804e80 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  804e6c:	e13ffd17 	ldw	r4,-12(fp)
  804e70:	08051d00 	call	8051d0 <alt_find_file>
  804e74:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  804e78:	00800044 	movi	r2,1
  804e7c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  804e80:	e0bff817 	ldw	r2,-32(fp)
  804e84:	10002926 	beq	r2,zero,804f2c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  804e88:	e13ff817 	ldw	r4,-32(fp)
  804e8c:	08052d80 	call	8052d8 <alt_get_fd>
  804e90:	e0bff915 	stw	r2,-28(fp)
  804e94:	e0bff917 	ldw	r2,-28(fp)
  804e98:	1000030e 	bge	r2,zero,804ea8 <open+0x84>
    {
      status = index;
  804e9c:	e0bff917 	ldw	r2,-28(fp)
  804ea0:	e0bffa15 	stw	r2,-24(fp)
  804ea4:	00002306 	br	804f34 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  804ea8:	e0bff917 	ldw	r2,-28(fp)
  804eac:	10c00324 	muli	r3,r2,12
  804eb0:	00802034 	movhi	r2,128
  804eb4:	10983604 	addi	r2,r2,24792
  804eb8:	1885883a 	add	r2,r3,r2
  804ebc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  804ec0:	e0fffe17 	ldw	r3,-8(fp)
  804ec4:	00900034 	movhi	r2,16384
  804ec8:	10bfffc4 	addi	r2,r2,-1
  804ecc:	1886703a 	and	r3,r3,r2
  804ed0:	e0bffc17 	ldw	r2,-16(fp)
  804ed4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  804ed8:	e0bffb17 	ldw	r2,-20(fp)
  804edc:	1000051e 	bne	r2,zero,804ef4 <open+0xd0>
  804ee0:	e13ffc17 	ldw	r4,-16(fp)
  804ee4:	0804d600 	call	804d60 <alt_file_locked>
  804ee8:	e0bffa15 	stw	r2,-24(fp)
  804eec:	e0bffa17 	ldw	r2,-24(fp)
  804ef0:	10001016 	blt	r2,zero,804f34 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  804ef4:	e0bff817 	ldw	r2,-32(fp)
  804ef8:	10800317 	ldw	r2,12(r2)
  804efc:	10000826 	beq	r2,zero,804f20 <open+0xfc>
  804f00:	e0bff817 	ldw	r2,-32(fp)
  804f04:	10800317 	ldw	r2,12(r2)
  804f08:	e1ffff17 	ldw	r7,-4(fp)
  804f0c:	e1bffe17 	ldw	r6,-8(fp)
  804f10:	e17ffd17 	ldw	r5,-12(fp)
  804f14:	e13ffc17 	ldw	r4,-16(fp)
  804f18:	103ee83a 	callr	r2
  804f1c:	00000106 	br	804f24 <open+0x100>
  804f20:	0005883a 	mov	r2,zero
  804f24:	e0bffa15 	stw	r2,-24(fp)
  804f28:	00000206 	br	804f34 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  804f2c:	00bffb44 	movi	r2,-19
  804f30:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  804f34:	e0bffa17 	ldw	r2,-24(fp)
  804f38:	1000090e 	bge	r2,zero,804f60 <open+0x13c>
  {
    alt_release_fd (index);  
  804f3c:	e13ff917 	ldw	r4,-28(fp)
  804f40:	08037880 	call	803788 <alt_release_fd>
    ALT_ERRNO = -status;
  804f44:	0804d240 	call	804d24 <alt_get_errno>
  804f48:	1007883a 	mov	r3,r2
  804f4c:	e0bffa17 	ldw	r2,-24(fp)
  804f50:	0085c83a 	sub	r2,zero,r2
  804f54:	18800015 	stw	r2,0(r3)
    return -1;
  804f58:	00bfffc4 	movi	r2,-1
  804f5c:	00000106 	br	804f64 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  804f60:	e0bff917 	ldw	r2,-28(fp)
}
  804f64:	e037883a 	mov	sp,fp
  804f68:	dfc00117 	ldw	ra,4(sp)
  804f6c:	df000017 	ldw	fp,0(sp)
  804f70:	dec00204 	addi	sp,sp,8
  804f74:	f800283a 	ret

00804f78 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  804f78:	defffa04 	addi	sp,sp,-24
  804f7c:	df000515 	stw	fp,20(sp)
  804f80:	df000504 	addi	fp,sp,20
  804f84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804f88:	0005303a 	rdctl	r2,status
  804f8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804f90:	e0fffc17 	ldw	r3,-16(fp)
  804f94:	00bfff84 	movi	r2,-2
  804f98:	1884703a 	and	r2,r3,r2
  804f9c:	1001703a 	wrctl	status,r2
  
  return context;
  804fa0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  804fa4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  804fa8:	e0bfff17 	ldw	r2,-4(fp)
  804fac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  804fb0:	e0bffd17 	ldw	r2,-12(fp)
  804fb4:	10800017 	ldw	r2,0(r2)
  804fb8:	e0fffd17 	ldw	r3,-12(fp)
  804fbc:	18c00117 	ldw	r3,4(r3)
  804fc0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  804fc4:	e0bffd17 	ldw	r2,-12(fp)
  804fc8:	10800117 	ldw	r2,4(r2)
  804fcc:	e0fffd17 	ldw	r3,-12(fp)
  804fd0:	18c00017 	ldw	r3,0(r3)
  804fd4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  804fd8:	e0bffd17 	ldw	r2,-12(fp)
  804fdc:	e0fffd17 	ldw	r3,-12(fp)
  804fe0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  804fe4:	e0bffd17 	ldw	r2,-12(fp)
  804fe8:	e0fffd17 	ldw	r3,-12(fp)
  804fec:	10c00015 	stw	r3,0(r2)
  804ff0:	e0bffb17 	ldw	r2,-20(fp)
  804ff4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804ff8:	e0bffe17 	ldw	r2,-8(fp)
  804ffc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  805000:	0001883a 	nop
  805004:	e037883a 	mov	sp,fp
  805008:	df000017 	ldw	fp,0(sp)
  80500c:	dec00104 	addi	sp,sp,4
  805010:	f800283a 	ret

00805014 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  805014:	defffb04 	addi	sp,sp,-20
  805018:	dfc00415 	stw	ra,16(sp)
  80501c:	df000315 	stw	fp,12(sp)
  805020:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  805024:	d0a00c17 	ldw	r2,-32720(gp)
  805028:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80502c:	d0a6b217 	ldw	r2,-25912(gp)
  805030:	10800044 	addi	r2,r2,1
  805034:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805038:	00002e06 	br	8050f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80503c:	e0bffd17 	ldw	r2,-12(fp)
  805040:	10800017 	ldw	r2,0(r2)
  805044:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  805048:	e0bffd17 	ldw	r2,-12(fp)
  80504c:	10800403 	ldbu	r2,16(r2)
  805050:	10803fcc 	andi	r2,r2,255
  805054:	10000426 	beq	r2,zero,805068 <alt_tick+0x54>
  805058:	d0a6b217 	ldw	r2,-25912(gp)
  80505c:	1000021e 	bne	r2,zero,805068 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  805060:	e0bffd17 	ldw	r2,-12(fp)
  805064:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  805068:	e0bffd17 	ldw	r2,-12(fp)
  80506c:	10800217 	ldw	r2,8(r2)
  805070:	d0e6b217 	ldw	r3,-25912(gp)
  805074:	18801d36 	bltu	r3,r2,8050ec <alt_tick+0xd8>
  805078:	e0bffd17 	ldw	r2,-12(fp)
  80507c:	10800403 	ldbu	r2,16(r2)
  805080:	10803fcc 	andi	r2,r2,255
  805084:	1000191e 	bne	r2,zero,8050ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  805088:	e0bffd17 	ldw	r2,-12(fp)
  80508c:	10800317 	ldw	r2,12(r2)
  805090:	e0fffd17 	ldw	r3,-12(fp)
  805094:	18c00517 	ldw	r3,20(r3)
  805098:	1809883a 	mov	r4,r3
  80509c:	103ee83a 	callr	r2
  8050a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8050a4:	e0bfff17 	ldw	r2,-4(fp)
  8050a8:	1000031e 	bne	r2,zero,8050b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8050ac:	e13ffd17 	ldw	r4,-12(fp)
  8050b0:	0804f780 	call	804f78 <alt_alarm_stop>
  8050b4:	00000d06 	br	8050ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8050b8:	e0bffd17 	ldw	r2,-12(fp)
  8050bc:	10c00217 	ldw	r3,8(r2)
  8050c0:	e0bfff17 	ldw	r2,-4(fp)
  8050c4:	1887883a 	add	r3,r3,r2
  8050c8:	e0bffd17 	ldw	r2,-12(fp)
  8050cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8050d0:	e0bffd17 	ldw	r2,-12(fp)
  8050d4:	10c00217 	ldw	r3,8(r2)
  8050d8:	d0a6b217 	ldw	r2,-25912(gp)
  8050dc:	1880032e 	bgeu	r3,r2,8050ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8050e0:	e0bffd17 	ldw	r2,-12(fp)
  8050e4:	00c00044 	movi	r3,1
  8050e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8050ec:	e0bffe17 	ldw	r2,-8(fp)
  8050f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8050f4:	e0fffd17 	ldw	r3,-12(fp)
  8050f8:	d0a00c04 	addi	r2,gp,-32720
  8050fc:	18bfcf1e 	bne	r3,r2,80503c <__alt_data_end+0xff80503c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  805100:	0001883a 	nop
}
  805104:	0001883a 	nop
  805108:	e037883a 	mov	sp,fp
  80510c:	dfc00117 	ldw	ra,4(sp)
  805110:	df000017 	ldw	fp,0(sp)
  805114:	dec00204 	addi	sp,sp,8
  805118:	f800283a 	ret

0080511c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80511c:	deffff04 	addi	sp,sp,-4
  805120:	df000015 	stw	fp,0(sp)
  805124:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  805128:	000170fa 	wrctl	ienable,zero
}
  80512c:	0001883a 	nop
  805130:	e037883a 	mov	sp,fp
  805134:	df000017 	ldw	fp,0(sp)
  805138:	dec00104 	addi	sp,sp,4
  80513c:	f800283a 	ret

00805140 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  805140:	defffa04 	addi	sp,sp,-24
  805144:	dfc00515 	stw	ra,20(sp)
  805148:	df000415 	stw	fp,16(sp)
  80514c:	df000404 	addi	fp,sp,16
  805150:	e13ffe15 	stw	r4,-8(fp)
  805154:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  805158:	e0bfff17 	ldw	r2,-4(fp)
  80515c:	10800017 	ldw	r2,0(r2)
  805160:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  805164:	e13ffe17 	ldw	r4,-8(fp)
  805168:	08003980 	call	800398 <strlen>
  80516c:	10800044 	addi	r2,r2,1
  805170:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  805174:	00000d06 	br	8051ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  805178:	e0bffc17 	ldw	r2,-16(fp)
  80517c:	10800217 	ldw	r2,8(r2)
  805180:	e0fffd17 	ldw	r3,-12(fp)
  805184:	180d883a 	mov	r6,r3
  805188:	e17ffe17 	ldw	r5,-8(fp)
  80518c:	1009883a 	mov	r4,r2
  805190:	08054f40 	call	8054f4 <memcmp>
  805194:	1000021e 	bne	r2,zero,8051a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  805198:	e0bffc17 	ldw	r2,-16(fp)
  80519c:	00000706 	br	8051bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8051a0:	e0bffc17 	ldw	r2,-16(fp)
  8051a4:	10800017 	ldw	r2,0(r2)
  8051a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8051ac:	e0fffc17 	ldw	r3,-16(fp)
  8051b0:	e0bfff17 	ldw	r2,-4(fp)
  8051b4:	18bff01e 	bne	r3,r2,805178 <__alt_data_end+0xff805178>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8051b8:	0005883a 	mov	r2,zero
}
  8051bc:	e037883a 	mov	sp,fp
  8051c0:	dfc00117 	ldw	ra,4(sp)
  8051c4:	df000017 	ldw	fp,0(sp)
  8051c8:	dec00204 	addi	sp,sp,8
  8051cc:	f800283a 	ret

008051d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8051d0:	defffb04 	addi	sp,sp,-20
  8051d4:	dfc00415 	stw	ra,16(sp)
  8051d8:	df000315 	stw	fp,12(sp)
  8051dc:	df000304 	addi	fp,sp,12
  8051e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8051e4:	d0a00417 	ldw	r2,-32752(gp)
  8051e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8051ec:	00003106 	br	8052b4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  8051f0:	e0bffd17 	ldw	r2,-12(fp)
  8051f4:	10800217 	ldw	r2,8(r2)
  8051f8:	1009883a 	mov	r4,r2
  8051fc:	08003980 	call	800398 <strlen>
  805200:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  805204:	e0bffd17 	ldw	r2,-12(fp)
  805208:	10c00217 	ldw	r3,8(r2)
  80520c:	e0bffe17 	ldw	r2,-8(fp)
  805210:	10bfffc4 	addi	r2,r2,-1
  805214:	1885883a 	add	r2,r3,r2
  805218:	10800003 	ldbu	r2,0(r2)
  80521c:	10803fcc 	andi	r2,r2,255
  805220:	1080201c 	xori	r2,r2,128
  805224:	10bfe004 	addi	r2,r2,-128
  805228:	10800bd8 	cmpnei	r2,r2,47
  80522c:	1000031e 	bne	r2,zero,80523c <alt_find_file+0x6c>
    {
      len -= 1;
  805230:	e0bffe17 	ldw	r2,-8(fp)
  805234:	10bfffc4 	addi	r2,r2,-1
  805238:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80523c:	e0bffe17 	ldw	r2,-8(fp)
  805240:	e0ffff17 	ldw	r3,-4(fp)
  805244:	1885883a 	add	r2,r3,r2
  805248:	10800003 	ldbu	r2,0(r2)
  80524c:	10803fcc 	andi	r2,r2,255
  805250:	1080201c 	xori	r2,r2,128
  805254:	10bfe004 	addi	r2,r2,-128
  805258:	10800be0 	cmpeqi	r2,r2,47
  80525c:	1000081e 	bne	r2,zero,805280 <alt_find_file+0xb0>
  805260:	e0bffe17 	ldw	r2,-8(fp)
  805264:	e0ffff17 	ldw	r3,-4(fp)
  805268:	1885883a 	add	r2,r3,r2
  80526c:	10800003 	ldbu	r2,0(r2)
  805270:	10803fcc 	andi	r2,r2,255
  805274:	1080201c 	xori	r2,r2,128
  805278:	10bfe004 	addi	r2,r2,-128
  80527c:	10000a1e 	bne	r2,zero,8052a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  805280:	e0bffd17 	ldw	r2,-12(fp)
  805284:	10800217 	ldw	r2,8(r2)
  805288:	e0fffe17 	ldw	r3,-8(fp)
  80528c:	180d883a 	mov	r6,r3
  805290:	e17fff17 	ldw	r5,-4(fp)
  805294:	1009883a 	mov	r4,r2
  805298:	08054f40 	call	8054f4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80529c:	1000021e 	bne	r2,zero,8052a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8052a0:	e0bffd17 	ldw	r2,-12(fp)
  8052a4:	00000706 	br	8052c4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8052a8:	e0bffd17 	ldw	r2,-12(fp)
  8052ac:	10800017 	ldw	r2,0(r2)
  8052b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8052b4:	e0fffd17 	ldw	r3,-12(fp)
  8052b8:	d0a00404 	addi	r2,gp,-32752
  8052bc:	18bfcc1e 	bne	r3,r2,8051f0 <__alt_data_end+0xff8051f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8052c0:	0005883a 	mov	r2,zero
}
  8052c4:	e037883a 	mov	sp,fp
  8052c8:	dfc00117 	ldw	ra,4(sp)
  8052cc:	df000017 	ldw	fp,0(sp)
  8052d0:	dec00204 	addi	sp,sp,8
  8052d4:	f800283a 	ret

008052d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8052d8:	defffc04 	addi	sp,sp,-16
  8052dc:	df000315 	stw	fp,12(sp)
  8052e0:	df000304 	addi	fp,sp,12
  8052e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8052e8:	00bffa04 	movi	r2,-24
  8052ec:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8052f0:	e03ffd15 	stw	zero,-12(fp)
  8052f4:	00001906 	br	80535c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  8052f8:	00802034 	movhi	r2,128
  8052fc:	10983604 	addi	r2,r2,24792
  805300:	e0fffd17 	ldw	r3,-12(fp)
  805304:	18c00324 	muli	r3,r3,12
  805308:	10c5883a 	add	r2,r2,r3
  80530c:	10800017 	ldw	r2,0(r2)
  805310:	10000f1e 	bne	r2,zero,805350 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  805314:	00802034 	movhi	r2,128
  805318:	10983604 	addi	r2,r2,24792
  80531c:	e0fffd17 	ldw	r3,-12(fp)
  805320:	18c00324 	muli	r3,r3,12
  805324:	10c5883a 	add	r2,r2,r3
  805328:	e0ffff17 	ldw	r3,-4(fp)
  80532c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  805330:	d0e00817 	ldw	r3,-32736(gp)
  805334:	e0bffd17 	ldw	r2,-12(fp)
  805338:	1880020e 	bge	r3,r2,805344 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80533c:	e0bffd17 	ldw	r2,-12(fp)
  805340:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  805344:	e0bffd17 	ldw	r2,-12(fp)
  805348:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80534c:	00000606 	br	805368 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  805350:	e0bffd17 	ldw	r2,-12(fp)
  805354:	10800044 	addi	r2,r2,1
  805358:	e0bffd15 	stw	r2,-12(fp)
  80535c:	e0bffd17 	ldw	r2,-12(fp)
  805360:	10800810 	cmplti	r2,r2,32
  805364:	103fe41e 	bne	r2,zero,8052f8 <__alt_data_end+0xff8052f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  805368:	e0bffe17 	ldw	r2,-8(fp)
}
  80536c:	e037883a 	mov	sp,fp
  805370:	df000017 	ldw	fp,0(sp)
  805374:	dec00104 	addi	sp,sp,4
  805378:	f800283a 	ret

0080537c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80537c:	defffb04 	addi	sp,sp,-20
  805380:	df000415 	stw	fp,16(sp)
  805384:	df000404 	addi	fp,sp,16
  805388:	e13ffe15 	stw	r4,-8(fp)
  80538c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  805390:	e0bfff17 	ldw	r2,-4(fp)
  805394:	10880070 	cmpltui	r2,r2,8193
  805398:	1000021e 	bne	r2,zero,8053a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80539c:	00880004 	movi	r2,8192
  8053a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8053a4:	e0fffe17 	ldw	r3,-8(fp)
  8053a8:	e0bfff17 	ldw	r2,-4(fp)
  8053ac:	1885883a 	add	r2,r3,r2
  8053b0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8053b4:	e0bffe17 	ldw	r2,-8(fp)
  8053b8:	e0bffc15 	stw	r2,-16(fp)
  8053bc:	00000506 	br	8053d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8053c0:	e0bffc17 	ldw	r2,-16(fp)
  8053c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8053c8:	e0bffc17 	ldw	r2,-16(fp)
  8053cc:	10800804 	addi	r2,r2,32
  8053d0:	e0bffc15 	stw	r2,-16(fp)
  8053d4:	e0fffc17 	ldw	r3,-16(fp)
  8053d8:	e0bffd17 	ldw	r2,-12(fp)
  8053dc:	18bff836 	bltu	r3,r2,8053c0 <__alt_data_end+0xff8053c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8053e0:	e0bffe17 	ldw	r2,-8(fp)
  8053e4:	108007cc 	andi	r2,r2,31
  8053e8:	10000226 	beq	r2,zero,8053f4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8053ec:	e0bffc17 	ldw	r2,-16(fp)
  8053f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8053f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8053f8:	0001883a 	nop
  8053fc:	e037883a 	mov	sp,fp
  805400:	df000017 	ldw	fp,0(sp)
  805404:	dec00104 	addi	sp,sp,4
  805408:	f800283a 	ret

0080540c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80540c:	defffe04 	addi	sp,sp,-8
  805410:	df000115 	stw	fp,4(sp)
  805414:	df000104 	addi	fp,sp,4
  805418:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80541c:	e0bfff17 	ldw	r2,-4(fp)
  805420:	10bffe84 	addi	r2,r2,-6
  805424:	10c00428 	cmpgeui	r3,r2,16
  805428:	18001a1e 	bne	r3,zero,805494 <alt_exception_cause_generated_bad_addr+0x88>
  80542c:	100690ba 	slli	r3,r2,2
  805430:	00802034 	movhi	r2,128
  805434:	10951104 	addi	r2,r2,21572
  805438:	1885883a 	add	r2,r3,r2
  80543c:	10800017 	ldw	r2,0(r2)
  805440:	1000683a 	jmp	r2
  805444:	00805484 	movi	r2,338
  805448:	00805484 	movi	r2,338
  80544c:	00805494 	movui	r2,338
  805450:	00805494 	movui	r2,338
  805454:	00805494 	movui	r2,338
  805458:	00805484 	movi	r2,338
  80545c:	0080548c 	andi	r2,zero,338
  805460:	00805494 	movui	r2,338
  805464:	00805484 	movi	r2,338
  805468:	00805484 	movi	r2,338
  80546c:	00805494 	movui	r2,338
  805470:	00805484 	movi	r2,338
  805474:	0080548c 	andi	r2,zero,338
  805478:	00805494 	movui	r2,338
  80547c:	00805494 	movui	r2,338
  805480:	00805484 	movi	r2,338
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  805484:	00800044 	movi	r2,1
  805488:	00000306 	br	805498 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80548c:	0005883a 	mov	r2,zero
  805490:	00000106 	br	805498 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  805494:	0005883a 	mov	r2,zero
  }
}
  805498:	e037883a 	mov	sp,fp
  80549c:	df000017 	ldw	fp,0(sp)
  8054a0:	dec00104 	addi	sp,sp,4
  8054a4:	f800283a 	ret

008054a8 <atexit>:
  8054a8:	200b883a 	mov	r5,r4
  8054ac:	000f883a 	mov	r7,zero
  8054b0:	000d883a 	mov	r6,zero
  8054b4:	0009883a 	mov	r4,zero
  8054b8:	08055701 	jmpi	805570 <__register_exitproc>

008054bc <exit>:
  8054bc:	defffe04 	addi	sp,sp,-8
  8054c0:	000b883a 	mov	r5,zero
  8054c4:	dc000015 	stw	r16,0(sp)
  8054c8:	dfc00115 	stw	ra,4(sp)
  8054cc:	2021883a 	mov	r16,r4
  8054d0:	08056880 	call	805688 <__call_exitprocs>
  8054d4:	00802034 	movhi	r2,128
  8054d8:	109cae04 	addi	r2,r2,29368
  8054dc:	11000017 	ldw	r4,0(r2)
  8054e0:	20800f17 	ldw	r2,60(r4)
  8054e4:	10000126 	beq	r2,zero,8054ec <exit+0x30>
  8054e8:	103ee83a 	callr	r2
  8054ec:	8009883a 	mov	r4,r16
  8054f0:	08058080 	call	805808 <_exit>

008054f4 <memcmp>:
  8054f4:	01c000c4 	movi	r7,3
  8054f8:	3980192e 	bgeu	r7,r6,805560 <memcmp+0x6c>
  8054fc:	2144b03a 	or	r2,r4,r5
  805500:	11c4703a 	and	r2,r2,r7
  805504:	10000f26 	beq	r2,zero,805544 <memcmp+0x50>
  805508:	20800003 	ldbu	r2,0(r4)
  80550c:	28c00003 	ldbu	r3,0(r5)
  805510:	10c0151e 	bne	r2,r3,805568 <memcmp+0x74>
  805514:	31bfff84 	addi	r6,r6,-2
  805518:	01ffffc4 	movi	r7,-1
  80551c:	00000406 	br	805530 <memcmp+0x3c>
  805520:	20800003 	ldbu	r2,0(r4)
  805524:	28c00003 	ldbu	r3,0(r5)
  805528:	31bfffc4 	addi	r6,r6,-1
  80552c:	10c00e1e 	bne	r2,r3,805568 <memcmp+0x74>
  805530:	21000044 	addi	r4,r4,1
  805534:	29400044 	addi	r5,r5,1
  805538:	31fff91e 	bne	r6,r7,805520 <__alt_data_end+0xff805520>
  80553c:	0005883a 	mov	r2,zero
  805540:	f800283a 	ret
  805544:	20c00017 	ldw	r3,0(r4)
  805548:	28800017 	ldw	r2,0(r5)
  80554c:	18bfee1e 	bne	r3,r2,805508 <__alt_data_end+0xff805508>
  805550:	31bfff04 	addi	r6,r6,-4
  805554:	21000104 	addi	r4,r4,4
  805558:	29400104 	addi	r5,r5,4
  80555c:	39bff936 	bltu	r7,r6,805544 <__alt_data_end+0xff805544>
  805560:	303fe91e 	bne	r6,zero,805508 <__alt_data_end+0xff805508>
  805564:	003ff506 	br	80553c <__alt_data_end+0xff80553c>
  805568:	10c5c83a 	sub	r2,r2,r3
  80556c:	f800283a 	ret

00805570 <__register_exitproc>:
  805570:	defffa04 	addi	sp,sp,-24
  805574:	dc000315 	stw	r16,12(sp)
  805578:	04002034 	movhi	r16,128
  80557c:	841cae04 	addi	r16,r16,29368
  805580:	80c00017 	ldw	r3,0(r16)
  805584:	dc400415 	stw	r17,16(sp)
  805588:	dfc00515 	stw	ra,20(sp)
  80558c:	18805217 	ldw	r2,328(r3)
  805590:	2023883a 	mov	r17,r4
  805594:	10003726 	beq	r2,zero,805674 <__register_exitproc+0x104>
  805598:	10c00117 	ldw	r3,4(r2)
  80559c:	010007c4 	movi	r4,31
  8055a0:	20c00e16 	blt	r4,r3,8055dc <__register_exitproc+0x6c>
  8055a4:	1a000044 	addi	r8,r3,1
  8055a8:	8800221e 	bne	r17,zero,805634 <__register_exitproc+0xc4>
  8055ac:	18c00084 	addi	r3,r3,2
  8055b0:	18c7883a 	add	r3,r3,r3
  8055b4:	18c7883a 	add	r3,r3,r3
  8055b8:	12000115 	stw	r8,4(r2)
  8055bc:	10c7883a 	add	r3,r2,r3
  8055c0:	19400015 	stw	r5,0(r3)
  8055c4:	0005883a 	mov	r2,zero
  8055c8:	dfc00517 	ldw	ra,20(sp)
  8055cc:	dc400417 	ldw	r17,16(sp)
  8055d0:	dc000317 	ldw	r16,12(sp)
  8055d4:	dec00604 	addi	sp,sp,24
  8055d8:	f800283a 	ret
  8055dc:	00800034 	movhi	r2,0
  8055e0:	10800004 	addi	r2,r2,0
  8055e4:	10002626 	beq	r2,zero,805680 <__register_exitproc+0x110>
  8055e8:	01006404 	movi	r4,400
  8055ec:	d9400015 	stw	r5,0(sp)
  8055f0:	d9800115 	stw	r6,4(sp)
  8055f4:	d9c00215 	stw	r7,8(sp)
  8055f8:	00000000 	call	0 <__reset-0x800000>
  8055fc:	d9400017 	ldw	r5,0(sp)
  805600:	d9800117 	ldw	r6,4(sp)
  805604:	d9c00217 	ldw	r7,8(sp)
  805608:	10001d26 	beq	r2,zero,805680 <__register_exitproc+0x110>
  80560c:	81000017 	ldw	r4,0(r16)
  805610:	10000115 	stw	zero,4(r2)
  805614:	02000044 	movi	r8,1
  805618:	22405217 	ldw	r9,328(r4)
  80561c:	0007883a 	mov	r3,zero
  805620:	12400015 	stw	r9,0(r2)
  805624:	20805215 	stw	r2,328(r4)
  805628:	10006215 	stw	zero,392(r2)
  80562c:	10006315 	stw	zero,396(r2)
  805630:	883fde26 	beq	r17,zero,8055ac <__alt_data_end+0xff8055ac>
  805634:	18c9883a 	add	r4,r3,r3
  805638:	2109883a 	add	r4,r4,r4
  80563c:	1109883a 	add	r4,r2,r4
  805640:	21802215 	stw	r6,136(r4)
  805644:	01800044 	movi	r6,1
  805648:	12406217 	ldw	r9,392(r2)
  80564c:	30cc983a 	sll	r6,r6,r3
  805650:	4992b03a 	or	r9,r9,r6
  805654:	12406215 	stw	r9,392(r2)
  805658:	21c04215 	stw	r7,264(r4)
  80565c:	01000084 	movi	r4,2
  805660:	893fd21e 	bne	r17,r4,8055ac <__alt_data_end+0xff8055ac>
  805664:	11006317 	ldw	r4,396(r2)
  805668:	218cb03a 	or	r6,r4,r6
  80566c:	11806315 	stw	r6,396(r2)
  805670:	003fce06 	br	8055ac <__alt_data_end+0xff8055ac>
  805674:	18805304 	addi	r2,r3,332
  805678:	18805215 	stw	r2,328(r3)
  80567c:	003fc606 	br	805598 <__alt_data_end+0xff805598>
  805680:	00bfffc4 	movi	r2,-1
  805684:	003fd006 	br	8055c8 <__alt_data_end+0xff8055c8>

00805688 <__call_exitprocs>:
  805688:	defff504 	addi	sp,sp,-44
  80568c:	df000915 	stw	fp,36(sp)
  805690:	dd400615 	stw	r21,24(sp)
  805694:	dc800315 	stw	r18,12(sp)
  805698:	dfc00a15 	stw	ra,40(sp)
  80569c:	ddc00815 	stw	r23,32(sp)
  8056a0:	dd800715 	stw	r22,28(sp)
  8056a4:	dd000515 	stw	r20,20(sp)
  8056a8:	dcc00415 	stw	r19,16(sp)
  8056ac:	dc400215 	stw	r17,8(sp)
  8056b0:	dc000115 	stw	r16,4(sp)
  8056b4:	d9000015 	stw	r4,0(sp)
  8056b8:	2839883a 	mov	fp,r5
  8056bc:	04800044 	movi	r18,1
  8056c0:	057fffc4 	movi	r21,-1
  8056c4:	00802034 	movhi	r2,128
  8056c8:	109cae04 	addi	r2,r2,29368
  8056cc:	12000017 	ldw	r8,0(r2)
  8056d0:	45005217 	ldw	r20,328(r8)
  8056d4:	44c05204 	addi	r19,r8,328
  8056d8:	a0001c26 	beq	r20,zero,80574c <__call_exitprocs+0xc4>
  8056dc:	a0800117 	ldw	r2,4(r20)
  8056e0:	15ffffc4 	addi	r23,r2,-1
  8056e4:	b8000d16 	blt	r23,zero,80571c <__call_exitprocs+0x94>
  8056e8:	14000044 	addi	r16,r2,1
  8056ec:	8421883a 	add	r16,r16,r16
  8056f0:	8421883a 	add	r16,r16,r16
  8056f4:	84402004 	addi	r17,r16,128
  8056f8:	a463883a 	add	r17,r20,r17
  8056fc:	a421883a 	add	r16,r20,r16
  805700:	e0001e26 	beq	fp,zero,80577c <__call_exitprocs+0xf4>
  805704:	80804017 	ldw	r2,256(r16)
  805708:	e0801c26 	beq	fp,r2,80577c <__call_exitprocs+0xf4>
  80570c:	bdffffc4 	addi	r23,r23,-1
  805710:	843fff04 	addi	r16,r16,-4
  805714:	8c7fff04 	addi	r17,r17,-4
  805718:	bd7ff91e 	bne	r23,r21,805700 <__alt_data_end+0xff805700>
  80571c:	00800034 	movhi	r2,0
  805720:	10800004 	addi	r2,r2,0
  805724:	10000926 	beq	r2,zero,80574c <__call_exitprocs+0xc4>
  805728:	a0800117 	ldw	r2,4(r20)
  80572c:	1000301e 	bne	r2,zero,8057f0 <__call_exitprocs+0x168>
  805730:	a0800017 	ldw	r2,0(r20)
  805734:	10003226 	beq	r2,zero,805800 <__call_exitprocs+0x178>
  805738:	a009883a 	mov	r4,r20
  80573c:	98800015 	stw	r2,0(r19)
  805740:	00000000 	call	0 <__reset-0x800000>
  805744:	9d000017 	ldw	r20,0(r19)
  805748:	a03fe41e 	bne	r20,zero,8056dc <__alt_data_end+0xff8056dc>
  80574c:	dfc00a17 	ldw	ra,40(sp)
  805750:	df000917 	ldw	fp,36(sp)
  805754:	ddc00817 	ldw	r23,32(sp)
  805758:	dd800717 	ldw	r22,28(sp)
  80575c:	dd400617 	ldw	r21,24(sp)
  805760:	dd000517 	ldw	r20,20(sp)
  805764:	dcc00417 	ldw	r19,16(sp)
  805768:	dc800317 	ldw	r18,12(sp)
  80576c:	dc400217 	ldw	r17,8(sp)
  805770:	dc000117 	ldw	r16,4(sp)
  805774:	dec00b04 	addi	sp,sp,44
  805778:	f800283a 	ret
  80577c:	a0800117 	ldw	r2,4(r20)
  805780:	80c00017 	ldw	r3,0(r16)
  805784:	10bfffc4 	addi	r2,r2,-1
  805788:	15c01426 	beq	r2,r23,8057dc <__call_exitprocs+0x154>
  80578c:	80000015 	stw	zero,0(r16)
  805790:	183fde26 	beq	r3,zero,80570c <__alt_data_end+0xff80570c>
  805794:	95c8983a 	sll	r4,r18,r23
  805798:	a0806217 	ldw	r2,392(r20)
  80579c:	a5800117 	ldw	r22,4(r20)
  8057a0:	2084703a 	and	r2,r4,r2
  8057a4:	10000b26 	beq	r2,zero,8057d4 <__call_exitprocs+0x14c>
  8057a8:	a0806317 	ldw	r2,396(r20)
  8057ac:	2088703a 	and	r4,r4,r2
  8057b0:	20000c1e 	bne	r4,zero,8057e4 <__call_exitprocs+0x15c>
  8057b4:	89400017 	ldw	r5,0(r17)
  8057b8:	d9000017 	ldw	r4,0(sp)
  8057bc:	183ee83a 	callr	r3
  8057c0:	a0800117 	ldw	r2,4(r20)
  8057c4:	15bfbf1e 	bne	r2,r22,8056c4 <__alt_data_end+0xff8056c4>
  8057c8:	98800017 	ldw	r2,0(r19)
  8057cc:	153fcf26 	beq	r2,r20,80570c <__alt_data_end+0xff80570c>
  8057d0:	003fbc06 	br	8056c4 <__alt_data_end+0xff8056c4>
  8057d4:	183ee83a 	callr	r3
  8057d8:	003ff906 	br	8057c0 <__alt_data_end+0xff8057c0>
  8057dc:	a5c00115 	stw	r23,4(r20)
  8057e0:	003feb06 	br	805790 <__alt_data_end+0xff805790>
  8057e4:	89000017 	ldw	r4,0(r17)
  8057e8:	183ee83a 	callr	r3
  8057ec:	003ff406 	br	8057c0 <__alt_data_end+0xff8057c0>
  8057f0:	a0800017 	ldw	r2,0(r20)
  8057f4:	a027883a 	mov	r19,r20
  8057f8:	1029883a 	mov	r20,r2
  8057fc:	003fb606 	br	8056d8 <__alt_data_end+0xff8056d8>
  805800:	0005883a 	mov	r2,zero
  805804:	003ffb06 	br	8057f4 <__alt_data_end+0xff8057f4>

00805808 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  805808:	defffd04 	addi	sp,sp,-12
  80580c:	df000215 	stw	fp,8(sp)
  805810:	df000204 	addi	fp,sp,8
  805814:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  805818:	0001883a 	nop
  80581c:	e0bfff17 	ldw	r2,-4(fp)
  805820:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  805824:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  805828:	10000226 	beq	r2,zero,805834 <_exit+0x2c>
    ALT_SIM_FAIL();
  80582c:	002af070 	cmpltui	zero,zero,43969
  805830:	00000106 	br	805838 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  805834:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  805838:	003fff06 	br	805838 <__alt_data_end+0xff805838>
