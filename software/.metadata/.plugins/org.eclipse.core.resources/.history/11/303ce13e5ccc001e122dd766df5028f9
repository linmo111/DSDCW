#include <system.h>
#include <stdio.h>

#include <stdlib.h>
#include <sys/alt_stdio.h>
#include <sys/alt_alarm.h>
#include <sys/times.h>
#include <alt_types.h>
#include <unistd.h>
#include <math.h>
//#define ALT_CI_CUSTOM_MUL_0_N 0x0
//#define ALT_CI_CUSTOM_MUL_0(A,B)
//__builtin_custom_inii(ALT_CI_CUSTOM_MUL_0_N,(A),(B))#
#define ALT_CI_FP_ADD_0_N 0x1
#define ALT_CI_FP_ADD_0(A,B) __builtin_custom_fnff(ALT_CI_FP_ADD_0_N,(A),(B))
#define ALT_CI_FP_MULT_0_N 0x3
#define ALT_CI_FP_MULT_0(A,B) __builtin_custom_fnff(ALT_CI_FP_MULT_0_N,(A),(B))
#define ALT_CI_FP_SUB_0_N 0x2
#define ALT_CI_FP_SUB_0(A,B) __builtin_custom_fnff(ALT_CI_FP_SUB_0_N,(A),(B))
#define ALT_CI_LPM_1_0_N 0x0
#define ALT_CI_LPM_1_0(A,B) __builtin_custom_fnff(ALT_CI_LPM_1_0_N,(A),(B))


// Test case 1
//#define step 5
//#define N 52
// Test case 2
//#define step 1/8.0
//#define N 2041
//Test case 3
#define step 1/1024.0
#define N 261121
// Generates the vector x and stores it in the memory
// Test Case 4
//#define N 2323
//#define RANDSEED 334
void generateVector(float x[N])
{
	int i;
	x[0] = 0;
	for (i=1; i<N; i++)
	x[i] = x[i-1] + step;
}
float sumVector(float x[], int M)
{
	float sum=0;

	for (int i=0;i<M;i++){
		sum+= 0.5*x[i]+x[i]*x[i]*(cos((x[i]-128)/128));
	}
//		printf("the current sum is %f, current xi is %f \n", sum,x[i]);}
	return sum;
// YOUR CODE GOES HERE
}
float CustomSumVector(float x[], int M)
{
	float sum=0;

	for (int i=0;i<M;i++){
//		float a=ALT_CI_FP_SUB_0(x[i], 128);
//		float b=cos(ALT_CI_FP_MULT_0(a ,1/128));
//		float c=ALT_CI_FP_MULT_0(x[i],b );
//		float d=ALT_CI_FP_MULT_0(x[i],c);
//		sum+= 0.5*x[i]+x[i]*x[i]*(cos((x[i]-128)/128));
		//ALT_CI_FP_MULT_0(x[i], ALT_CI_FP_MULT_0(x[i], cos(ALT_CI_FP_MULT_0(ALT_CI_FP_SUB_0(x[i], 128),1/128))))
		sum= ALT_CI_FP_ADD_0(sum,  ALT_CI_FP_ADD_0(ALT_CI_FP_MULT_0(0.5,x[i]),ALT_CI_FP_MULT_0(x[i],ALT_CI_FP_MULT_0(x[i],cos(ALT_CI_FP_MULT_0(ALT_CI_FP_SUB_0(x[i], 128) ,1/128)) )) ));
	}
//		printf("the current sum is %f, current xi is %f \n", sum,x[i]);}
	return sum;
// YOUR CODE GOES HERE
}
int main()
{
	alt_putstr("hello");
	printf("Task 4!\n");
//	Define input vector
	float x[N];
 // Returned result
	float y;

	generateVector(x);

	clock_t exec_t1, exec_t2;
 	 exec_t1 = times(NULL); // get system time before starting the process
 	 y = sumVector(x, N);

 // till here
 	 exec_t2 = times(NULL); // get system time after finishing the process
 	 printf(" proc time = %d ticks \n", (unsigned int) (exec_t2-exec_t1));
 	 int i;
 	 for (i=0; i<10; i++){
 		 y = y/2.0;}
 	 printf("Result: %f \n", (float) y);


 	 exec_t1 = times(NULL); // get system time before starting the process
	 y = CustomSumVector(x, N);

 // till here
	 exec_t2 = times(NULL); // get system time after finishing the process
	 printf(" custom proc time = %d ticks \n", (unsigned int) (exec_t2-exec_t1));
	 int j;
	 for (j=0; j<10; j++){
		 y = y/2.0;}
	 printf("Custom Result: %f \n", (float) y);

 	 return 0;
}
